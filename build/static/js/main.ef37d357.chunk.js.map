{"version":3,"sources":["Models/Allocation.tsx","Models/Room.tsx","Presentational/Allocation/AllocationInfo/AllocationInfo.tsx","Presentational/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","Presentational/TimeView/TimeView.tsx","Models/Equipment.tsx","Presentational/Allocation/AllocationMenu/AllocationMenu.tsx","Presentational/RoomStatusBorder/RoomStatusBorder.tsx","Presentational/EquipmentBar/EquipmentBar.tsx","Presentational/StatusBar/StatusBar.tsx","Store/Allocation/AllocationSlice.tsx","Store/selectors.tsx","Store/Equipment/EquipmentSlice.tsx","Store/Room/RoomSlice.tsx","Store/UI/UISlice.tsx","Store/store.tsx","Providers/googleApi.ts","Google/SignInButton.tsx","Presentational/RoomView/RoomView.tsx","Store/UI/UISelectors.tsx","Containers/SelectedRoom/SelectedRoom.tsx","App.tsx","serviceWorker.js","Store/start.tsx","index.tsx"],"names":["Allocation","_title","_roomName","_from","_to","Object","classCallCheck","this","id","title","from","to","confirmed","by","attendees","agenda","roomName","replace","c","r","Math","random","v","toString","RoomStatus","allocationInfo","props","console","log","Date","toLocaleTimeString","hour","minute","hour12","react_default","a","createElement","className","Fragment","timeView","date","time","EquipmentType","EquipmentStatus","Room","_name","name","capacity","location","equipment","allocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","currentAllocation","roomStatus","awaiting","onClick","onConfirmMeetingClick","xlinkHref","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","concat","roomStatusBorder","classNames","push","join","children","equipmentBar","map","e","key","type","status","toLowerCase","onChangeStatusClick","StatusBar","room","EquipmentBar_EquipmentBar","allocationSlice","createSlice","slice","initialState","entity","ids","reducers","addAllocation","state","action","payload","finishEarly","now","extendMeeting","amount","confirmMeeting","n","Equipment","equipmentSlice","addEquipment","toConsumableArray","setStatus","filter","eq","changeStatus","newStatus","Available","Broken","NotAvailable","roomSlice","addRoom","uiSlice","selectedRoomId","setSelectedRoomId","setTime","rootReducer","combineReducers","ui","reducer","allocation","store","configureStore","apiCalendar","GoogleApi","sign","onLoadCallback","events","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","CONFIG","apiKey","clientId","discoveryDocs","scope","syncToken","handleClientLoad","createClass","get","window","value","_this","script","document","src","body","appendChild","onload","gapi","load","initClient","auth2","getAuthInstance","signIn","signOut","callback","isSignedIn","listen","request","_this2","constructUpcomingEventsRequestFull","constructUpcomingEventsRequestPartial","singleSync","pageToken","client","calendar","list","then","response","result","items","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","nextPageToken","nextSyncToken","catch","statusCode","sync","calendarId","arguments","maxResults","timeMin","toISOString","singleEvents","today","setDate","getDate","showDeleted","orderBy","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","summary","start","dateTime","getTime","end","dispatch","actions","objectSpread","_this3","init","updateSigninStatus","listUpcomingEvents","SignInButton","possibleConstructorReturn","getPrototypeOf","call","signedIn","handleItemClick","bind","assertThisInitialized","setState","listenSign","event","handleAuthClick","handleSignoutClick","React","Component","roomView","currentAllocationTag","nextAllocationTag","AllocationInfoBig_AllocationInfoBig","AllocationInfo_AllocationInfo","Presentational_StatusBar_StatusBar","assign","RoomStatusBorder_RoomStatusBorder","TimeView_TimeView","AllocationMenu_AllocationMenu","SignInButton_SignInButton","createSelector","getSelectedRoomId","getSelectedRoom","roomId","rooms","getSelectedRoomAllocations","values","getSelectedRoomCurrentAllocations","allocations","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getSelectedRoomNextAllocation","getSelectedRoomCurrentAllocation","isSelectedRoomOccupied","getSelectedRoomEquipment","SelectedRoom","connect","ownProps","threshold","occupied","free","RoomView","App","SelectedRoom_SelectedRoom","Boolean","hostname","match","subscribe","getState","Projector","Skype","WhiteBoard","roomName1","roomAllocations","roomEquipment","roomOccupied","setInterval","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef37d357.chunk.js","sourcesContent":["export default class Allocation {\n  public id: string;\n  public title: string;\n  public from: number;\n  public to: number;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n\n  public roomName: string;\n\n  constructor(_title: string, _roomName: string, _from: number, _to: number) {\n    this.id = uuidv4();\n\n    this.title = _title;\n    this.roomName = _roomName;\n    this.from = _from;\n    this.to = _to;\n  }\n}\n\nfunction uuidv4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    let r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}\n\nexport default class Room {\n  // this property is identifier of the object and should be unique\n  public name!: string;\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  constructor(_name: string) {\n    this.name = _name;\n  }\n}\n","import React from \"react\";\nimport \"./AllocationInfo.scss\";\n\nconst allocationInfo = (props: any) => {\n  console.log(\"allocationInfo: \", props);\n  const from = new Date(props.from).toLocaleTimeString(\"en-US\", {hour: '2-digit', minute:'2-digit', hour12: false});\n  const to = new Date(props.to).toLocaleTimeString(\"en-US\", {hour: '2-digit', minute:'2-digit', hour12: false});\n  \n  return (\n    <div className=\"AllocationInfo\">Next Meeting:\n      <div>{from} - {to}</div>\n      <div>{props.by}</div>\n      <div>{props.title}</div>\n    </div>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport \"./AllocationInfoBig.scss\";\n\nconst allocationInfo = (props: any) => {\n  console.log(\"allocationInfo: \", props);\n  const from = new Date(props.from).toLocaleTimeString(\"en-US\", {hour: '2-digit', minute:'2-digit', hour12: false});\n  const to = new Date(props.to).toLocaleTimeString(\"en-US\", {hour: '2-digit', minute:'2-digit', hour12: false});\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">Current Meeting:\n        <div>{from} - {to}</div>\n        <div>{props.by}</div>\n        <div>{props.title}</div>\n        {props.attendees ? <div>Attendees: {props.attendees}</div> : null}\n        {props.agenda ? <div>Agenda: {props.agenda}</div> : null}\n      </div>\n    </>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport \"./TimeView.scss\"\n\nconst timeView = (props: any) => {\n  const date = new Date(props.time).toLocaleTimeString(\"en-US\", {hour: '2-digit', minute:'2-digit', hour12: false});\n  return (\n    <div className=\"TimeView\">{date}</div>\n  )\n}\n\nexport default timeView;\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n\nexport enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n\nexport class Equipment {\n  constructor(public roomName: string, public type: EquipmentType, public status: EquipmentStatus) {}\n}\n","import React from \"react\";\nimport \"./AllocationMenu.scss\";\nimport { RoomStatus } from '../../../Models/Room';\n\nconst allocationMenu = (props: any) => {\n  console.log('Allocation menu:', props.id);\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <button className=\"btn btn_flat\" onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-check-o\"></use>\n          </svg>\n          <span>Confirm</span>\n        </button>\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <button className=\"btn btn_flat\" onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, 60000)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-plus-o\"></use>\n          </svg>\n          <span>Extend</span>\n        </button>\n        <button className=\"btn btn_flat\" onClick={() => props.onFinishEarlyClick(props.currentAllocation.id)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-times-o\"></use>\n          </svg>\n          <span>Finish</span>\n        </button>\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <button className=\"btn btn_flat\" onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-check-o\"></use>\n          </svg>\n          <span>Confirm</span>\n        </button>\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <button className=\"btn btn_flat\" onClick={() => props.onAddMeetingClick()}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-o\"></use>\n          </svg>\n          <span>Book now</span>\n        </button>\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default allocationMenu;\n\n\n\n\n      // {/* [TODO] Cancel meeting if exists */}\n      // <button onClick={() => props.onAddMeetingClick()}>Add Meeting</button>\n      // {/* [TODO] Only visible if current meeting exists */}\n      // {props.id ? <button onClick={() => props.onExtendMeetingClick(props.id, 60000)}>Extend Meeting</button> : null}\n      // {/* [TODO] Only visible if current meeting is active */}\n      // {props.id ? <button onClick={() => props.onFinishEarlyClick(props.id)}>Finish early</button> : null}","import React from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\n\nconst roomStatusBorder = (props: any) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default roomStatusBorder;\n","import React from \"react\";\nimport { Equipment } from \"../../Models/Equipment\";\nimport \"./EquipmentBar.scss\";\n\nconst equipmentBar = (props: { equipment: Equipment[], onChangeStatusClick: (e: Equipment) => void }) => {\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => {\n        return (\n          <button key={e.type} className={`btn btn_${e.status.toLowerCase()}`} onClick={() => props.onChangeStatusClick(e)}>\n            <svg className={`icon icon_${e.status.toLowerCase()} icon-${e.type.toLowerCase()}`}>\n              <use xlinkHref={`symbol-defs.svg#icon-${e.type.toLowerCase()}`}></use>\n            </svg>\n          </button>\n        )\n      })\n    }\n    </div>\n  )\n}\n\nexport default equipmentBar;\n\n{/* <svg viewBox=\"0 0 100 100\" className=\"icon shape-codepen\">\n<use xlinkHref={`/Assets/sprite.svg#shape-codepen#shape-${e.type.toLowerCase()}`} />\n</svg> */}\n{/* <i className={`fab fa-${e.type.toLowerCase()}`}></i> */}","import React from \"react\";\nimport EquipmentBar from \"../EquipmentBar/EquipmentBar\";\nimport \"./StatusBar.scss\";\n\nconst StatusBar = (props: any) => {\n  return (\n    <div className=\"StatusBar\">\n      <div>{props.room.name}</div>\n      {/* <div>{new Date(props.time).toLocaleTimeString(\"en-US\")}</div> */}\n      <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick}/>\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../Models/Allocation\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload].to = Date.now() - 60000;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = Date.now() - 60000;\n    },\n  },\n});\n\nexport default allocationSlice;\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../Models/Allocation\";\nimport { Equipment } from \"../Models/Equipment\";\nimport Room, { RoomStatus } from \"../Models/Room\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.filter((r: Room) => r.name === roomId)[0],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomName === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => equipment.filter((e: Equipment) => e.roomName === roomId),\n);\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment, EquipmentStatus } from \"../../Models/Equipment\";\n\n// EQUIPMENT ////////////////////////\n// [TODO] add ids\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: [],\n  reducers: {\n    addEquipment: (state, action) => [...state, action.payload] as never[],\n    setStatus: (state, action) => {\n      const equipment: Equipment =\n        state.filter((eq: Equipment) => eq.roomName === action.payload.roomName && eq.type === action.payload.type)[0];\n      equipment.status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment =\n        state.filter((eq: Equipment) => eq.roomName === action.payload.roomName && eq.type === action.payload.type)[0];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { createSlice } from \"redux-starter-kit\";\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: [],\n  reducers: {\n    addRoom: (state, action) => [...state, action.payload] as never[],\n  },\n});\n\nexport default roomSlice;\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n  },\n});\n\nexport default uiSlice;\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst rootReducer = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n});\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import store from '../Store/store';\nimport allocationSlice from '../Store/Allocation/AllocationSlice';\nimport Allocation from '../Models/Allocation';\nimport { start } from 'repl';\n\nexport class GoogleApi {\n  public get gapi(): any {\n    return (window as any)['gapi'];\n  }\n\n  public sign: boolean = false;\n  public onLoadCallback: any;\n  public events: any = {};\n\n  // Client ID and API key from the Developer Console\n  private readonly CLIENT_ID = \"162342559011-rh81oauc2fut2lj6d03j4srkk3oeea2l.apps.googleusercontent.com\";\n  private readonly API_KEY = \"AIzaSyBe9hJXEgWHgkhAjqMEnxDtyCQLVCdEByI\";\n\n  // Array of API discovery doc URLs for APIs used by the quickstart\n  private readonly DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n  // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n  private readonly SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n\n  private readonly CONFIG = {\n    apiKey: this.API_KEY,\n    clientId: this.CLIENT_ID,\n    discoveryDocs: this.DISCOVERY_DOCS,\n    scope: this.SCOPES,\n  };\n\n  private syncToken: string | null = null;\n\n  constructor() {\n    this.handleClientLoad();\n  }\n\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n  public handleClientLoad() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    script.onload = () => {\n      // this.gapi = window['gapi'] as any;\n      // this.gapi.load('client:auth2', this.initClient);\n      this.gapi.load('client:auth2', () => this.initClient());\n    };\n    // gapi.load(\"client:auth2\", initClient);\n  }\n\n  public handleAuthClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signIn();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public handleSignoutClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signOut();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  /**\n   * Execute the callback function when a user is disconnected or connected with the sign status.\n   * @param callback\n   */\n  public listenSign(callback: Function) {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().isSignedIn.listen(callback);\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public sync() {\n    // Construct the {@link Calendar.Events.List} request, but don't execute it yet.\n    // Calendar.Events.List request = client.events().list(\"primary\");\n    let request: any;\n\n    // Load the sync token stored from the last execution, if any.\n    if (this.syncToken == null) {\n      console.log(\"Performing full sync.\");\n      request = this.constructUpcomingEventsRequestFull();\n      \n      // Set the filters you want to use during the full sync. Sync tokens aren't compatible with\n      // most filters, but you may want to limit your full sync to only a certain date range.\n      // In this example we are only syncing events up to a year old.\n      // Date oneYearAgo = Utils.getRelativeDate(java.util.Calendar.YEAR, -1);\n      // request.setTimeMin(new DateTime(oneYearAgo, TimeZone.getTimeZone(\"UTC\")));\n    } else {\n      console.log(\"Performing incremental sync.\");\n      request = this.constructUpcomingEventsRequestPartial();\n      request.syncToken = this.syncToken;\n    }\n\n    // Retrieve the events, one page at a time.\n    // let pageToken = null;\n    // let events = null;\n\n    // do {\n    // request.pageToken = pageToken;\n\n    // try {\n    const singleSync = (pageToken: string | null) => {\n      request.pageToken = pageToken;\n      console.log('request body: ', request);\n      this.gapi.client.calendar.events.list(request)\n        .then((response: any) => {\n          console.log('synced object: ', response.result);\n          console.log('events synced: ', response.result.items);\n          this.events = response.result;\n\n          if (this.events.items.length === 0) {\n            console.log(\"No new events to sync.\");\n          } else {\n            for (let event of this.events.items) {\n              // console.log('event: ', event);\n              // syncEvent(event);\n            }\n          }\n\n          let pageToken = this.events.nextPageToken;\n          if (pageToken) {\n            console.log('new pageToken: ', pageToken);\n            singleSync(pageToken);\n          } else {\n            console.log('setting sync Token: ', this.events.nextSyncToken);\n            this.syncToken = this.events.nextSyncToken;\n            console.log(\"Sync complete.\");\n          }\n\n        })\n        .catch((err: any) => {\n          console.log('Sync Error: ', err);\n          if (err.statusCode === 410) {\n            // A 410 status code, \"Gone\", indicates that the sync token is invalid.\n            console.log(\"Invalid sync token, clearing event store and re-syncing.\");\n            this.syncToken = null;\n            this.events = [];\n            this.sync();\n          } else {\n            throw err;\n          }\n        });\n    };\n\n    singleSync(null);\n    // pageToken = events.getNextPageToken();\n    // } while (pageToken != null);\n\n    // Store the sync token from the last request to be used during the next execution.\n    // syncSettingsDataStore.set(SYNC_TOKEN_KEY, events.getNextSyncToken());\n    // this.syncToken = this.events.syncToken;\n  }\n\n  private constructUpcomingEventsRequestFull(calendarId = \"primary\", maxResults = 1000) {\n    const today = new Date();\n    // const tomorrow = new Date();\n    // tomorrow.setDate(today.getDate() + 1);\n    // tomorrow.setTime(today.getTime() + 30000);\n    return {\n      'calendarId': calendarId,\n      'timeMin': (today).toISOString(),\n      // 'timeMax': (tomorrow).toISOString(),\n      'singleEvents': true,\n      'maxResults': maxResults,\n      'syncToken': null as (string | null),\n      'pageToken': null as (string | null)\n    }\n  }\n\n  private constructUpcomingEventsRequestPartial(calendarId = \"primary\", maxResults = 1000) {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    return {\n      'calendarId': calendarId,\n      'singleEvents': true,\n      'maxResults': maxResults,\n      'syncToken': null as (string | null),\n      'pageToken': null as (string | null)\n    }\n  }\n\n  public listUpcomingEvents(maxResults: number) {\n    if (this.gapi) {\n      return this.gapi.client.calendar.events.list({\n        'calendarId': 'primary',\n        'timeMin': (new Date()).toISOString(),\n        'showDeleted': false,\n        'singleEvents': true,\n        'maxResults': maxResults,\n        'orderBy': 'startTime'\n      }).then((response: any) => {\n        console.log('events: ', response.result.items);\n        for (let allocation of response.result.items) {\n          var a = new Allocation(allocation.summary, \"Supernova\",\n            new Date(allocation.start.dateTime).getTime(),\n            new Date(allocation.end.dateTime).getTime())\n\n          // allocation.organizer.displayName\n          // status\n          // description\n          // attendees.length\n          store.dispatch(allocationSlice.actions.addAllocation({ ...a }));\n        }\n      });\n    }\n    else {\n      console.log(\"Error: this.gapi not loaded\");\n      return false;\n    }\n  }\n\n  /**\n * Auth to the google Api.\n */\n  private initClient() {\n    this.gapi.client.init(this.CONFIG)\n      .then(() => {\n        // Listen for sign-in state changes.\n        this.gapi.auth2.getAuthInstance().isSignedIn.listen((e: any) => this.updateSigninStatus(e));\n        // Handle the initial sign-in state.\n        this.updateSigninStatus(this.gapi.auth2.getAuthInstance().isSignedIn.get());\n        if (this.onLoadCallback) {\n          this.onLoadCallback();\n        }\n      })\n      .catch((e: any) => {\n        console.log(e);\n      });\n  }\n\n  private updateSigninStatus(isSignedIn: boolean) {\n    if (isSignedIn) {\n      this.listUpcomingEvents(10);\n    }\n    this.sign = isSignedIn;\n  }\n\n}\n\nlet apiCalendar: GoogleApi = new GoogleApi();\nexport default apiCalendar;","import React, { ReactNode, SyntheticEvent } from 'react';\nimport apiCalendar from '../Providers/googleApi';\n\nexport default class SignInButton extends React.Component<{}, { signedIn: boolean }> {\n\n\n  constructor(props: any) {\n    super(props);\n    this.state = {signedIn: apiCalendar.sign};\n    this.handleItemClick = this.handleItemClick.bind(this);\n    apiCalendar.onLoadCallback = () => {\n      this.setState({signedIn: apiCalendar.sign});\n      apiCalendar.listenSign((status: any) => {\n        console.log(status);\n        this.setState({\n          signedIn: status\n        });\n      });\n    };\n  }\n\n  \n\n  public handleItemClick(event: SyntheticEvent<any>, name: string): void {\n    if (name === 'sign-in') {\n      apiCalendar.handleAuthClick();\n    } else if (name === 'sign-out') {\n      apiCalendar.handleSignoutClick();\n    }\n  }\n\n  public sync() {\n    apiCalendar.sync();\n  }\n\n  render(): ReactNode {\n    return (\n      <>\n        { !this.state.signedIn ?\n        <button onClick={(e) => this.handleItemClick(e, 'sign-in')}>\n          sign-in\n        </button> \n        :\n        <button onClick={(e) => this.handleItemClick(e, 'sign-out')}>\n          sign-out\n        </button>\n        }\n        <button onClick={() => this.sync()}>\n          sync\n        </button>\n      </>\n    );\n  }\n}","import React from \"react\";\n\nimport AllocationInfo from \"../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport TimeView from \"../TimeView/TimeView\";\nimport AllocationMenu from \"../Allocation/AllocationMenu/AllocationMenu\";\nimport RoomClock from \"../RoomClock/RoomClock\";\nimport RoomStatusBorder from \"../RoomStatusBorder/RoomStatusBorder\";\nimport StatusBar from \"../StatusBar/StatusBar\";\nimport \"./RoomView.scss\";\nimport SignInButton from '../../Google/SignInButton';\n\nconst roomView = (props: any) => {\n  console.log(\"roomView: \", props);\n  let currentAllocationTag;\n  let currentAllocationId;\n  let nextAllocationTag;\n\n  if (props.currentAllocation) {\n    currentAllocationId = props.currentAllocation.id;\n\n    currentAllocationTag =\n    <AllocationInfoBig\n      {...props.currentAllocation}\n      // onFinishEarlyClick={props.onFinishEarlyClick}\n      // onExtendMeetingClick={props.onExtendMeetingClick}\n      // onAddMeetingClick={props.onAddMeetingClick}\n    />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo {...props.nextAllocation}/>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <StatusBar  time={props.time} {...props}/>\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        {/* <Header name={props.room.name}/> */}\n        <TimeView time={props.time} />\n        <div className=\"Separator\"></div>\n        <div className=\"RightSection\">\n          {/* <RoomClock/> */}\n          {currentAllocationTag}\n          {nextAllocationTag}\n          <AllocationMenu\n            currentAllocation={props.currentAllocation}\n            nextAllocation={props.nextAllocation}\n            roomStatus={props.roomStatus}\n            onFinishEarlyClick={props.onFinishEarlyClick}\n            onExtendMeetingClick={props.onExtendMeetingClick}\n            onConfirmMeetingClick={props.onConfirmMeetingClick}\n            onAddMeetingClick={props.onAddMeetingClick}\n            />\n        </div>\n      </RoomStatusBorder>\n      <SignInButton/>\n    </div>\n  );\n};\n\nexport default roomView;\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n","import { connect } from \"react-redux\";\nimport Allocation from \"../../Models/Allocation\";\nimport { Equipment } from \"../../Models/Equipment\";\nimport RoomView from \"../../Presentational/RoomView/RoomView\";\nimport allocationSlice from \"../../Store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../Store/Equipment/EquipmentSlice\";\nimport { getSelectedRoom, getSelectedRoomCurrentAllocations, getSelectedRoomEquipment,\n         getSelectedRoomNextAllocation, isSelectedRoomOccupied, getSelectedRoomStatus } from \"../../Store/selectors\";\nimport { getDate } from \"../../Store/UI/UISelectors\";\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const room = getSelectedRoom(state);\n  const equipment = getSelectedRoomEquipment(state);\n\n  // 2 min\n  const roomStatus = getSelectedRoomStatus(120000)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = getSelectedRoomCurrentAllocations(state)[0];\n  const nextAllocation = getSelectedRoomNextAllocation(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    roomStatus,\n    room,\n    time,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAddMeetingClick: (id: string) => {\n      // [TODO] roomName to id\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", \"Supernova\", Date.now() - 60000, Date.now() + 50000), confirmed: true}));\n    },\n    onConfirmMeetingClick: (id: string) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onExtendMeetingClick: (id: string, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, amount}));\n    },\n    onFinishEarlyClick: (id: string) => {\n      dispatch(allocationSlice.actions.finishEarly(id));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport \"./App.scss\";\nimport SelectedRoom from \"./Containers/SelectedRoom/SelectedRoom\";\n\nclass App extends Component {\n  public render() {\n    console.log(\"hello world\", \"test\");\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Allocation from \"../Models/Allocation\";\nimport Room from \"../Models/Room\";\nimport store from \"./store\";\n\nimport { Equipment, EquipmentStatus, EquipmentType } from \"../Models/Equipment\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport { getSelectedRoomAllocations, getSelectedRoomCurrentAllocations,\n   getSelectedRoomEquipment, getSelectedRoomNextAllocation, isSelectedRoomOccupied } from \"./selectors\";\nimport { getSelectedRoomId } from \"./UI/UISelectors\";\nimport uiSlice from \"./UI/UISlice\";\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  console.log(\"hello world\");\n  store.subscribe(() => {\n    console.log(store.getState());\n  });\n\n  store.dispatch(roomSlice.actions.addRoom({...new Room(\"Supernova\")}));\n  store.dispatch(roomSlice.actions.addRoom({...new Room(\"Room 2\")}));\n\n  store.dispatch(uiSlice.actions.setSelectedRoomId(\"Supernova\"));\n\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation 1a\", \"Supernova\", Date.now() - 1200000, Date.now() - 1200000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation 1b\", \"Supernova\", Date.now() - 1200000, Date.now() - 1200000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation Current 1c\", \"Supernova\", Date.now() - 120000 , Date.now() + 50000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation Next 1d\", \"Supernova\", Date.now() + 110000, Date.now() + 480000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation 1e\", \"Supernova\", Date.now() + 1000000, Date.now() + 1200000)}));\n\n  store.dispatch(allocationSlice.actions.addAllocation(\n    {...new Allocation(\"Test allocation 2a\", \"Room 2\", Date.now() - 1200000, Date.now() - 1200000)}));\n\n  store.dispatch(equipmentSlice.actions.addEquipment(\n    {...new Equipment(\"Supernova\", EquipmentType.Projector, EquipmentStatus.Available)}));\n  store.dispatch(equipmentSlice.actions.addEquipment(\n    {...new Equipment(\"Supernova\", EquipmentType.Skype, EquipmentStatus.Available)}));\n  store.dispatch(equipmentSlice.actions.addEquipment(\n    {...new Equipment(\"Supernova\", EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n  // store.dispatch(equipmentSlice.actions.changeStatus(\n  //   {...new Equipment(\"Supernova\", EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n  const roomName1 = getSelectedRoomId(store.getState());\n  const roomAllocations = getSelectedRoomAllocations(store.getState());\n  const roomEquipment = getSelectedRoomEquipment(store.getState());\n\n  const roomOccupied = isSelectedRoomOccupied(store.getState());\n  const currentAllocation = getSelectedRoomCurrentAllocations(store.getState())[0];\n  const nextAllocation = getSelectedRoomNextAllocation(store.getState());\n\n  // const timeInterval = selectDateTime();\n  // console.log('Time: ', selectDateTime(store.getState()));\n  // console.log('Occupied2: ', roomOccupied2);\n  // const roomOccupied2 = isSelectedRoomOccupied2(store.getState());\n  console.log(\"Name: \", roomName1);\n  console.log(\"Allocations: \", roomAllocations);\n  console.log(\"Occupied: \", roomOccupied);\n  console.log(\"Equipment: \", roomEquipment);\n  console.log(\"Current allocation: \", currentAllocation);\n  console.log(\"Next allocation: \", nextAllocation);\n\n  setInterval(() => {\n    console.log(\"Interval\");\n    // console.log('Time: ', selectDateTime(store.getState()));\n    store.dispatch(uiSlice.actions.setTime(Date.now()));\n  }, 1000 * 60);\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport \"./Assets/symbol-defs.svg\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./Store/start\";\nimport store from \"./Store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}