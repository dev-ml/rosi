{"version":3,"sources":["models/Room.ts","shared/utility.ts","components/Allocation/AllocationInfo/AllocationInfo.tsx","components/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","models/EquipmentStatus.ts","components/Allocation/AllocationMenu/AllocationMenu.tsx","components/RoomStatusBorder/RoomStatusBorder.tsx","components/EquipmentBar/EquipmentBar.tsx","components/StatusBar/StatusBar.tsx","components/TimeView/TimeView.tsx","components/RoomView/RoomView.tsx","models/Allocation.ts","store/Allocation/AllocationSlice.tsx","store/Equipment/EquipmentSlice.tsx","store/selectors.tsx","store/UI/UISelectors.tsx","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","models/EquipmentType.ts","store/Room/RoomSlice.tsx","store/UI/UISlice.tsx","store/store.tsx","models/Equipment.ts","store/start.tsx","index.tsx"],"names":["RoomStatus","formatTimeStamp","timeStamp","Date","toLocaleTimeString","hour","minute","hour12","allocationInfo","props","console","log","react_default","a","createElement","className","from","to","by","title","Fragment","attendees","agenda","EquipmentStatus","Room","name","Object","classCallCheck","this","capacity","location","equipment","allocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","id","currentAllocation","roomStatus","awaiting","onClick","onConfirmMeetingClick","xlinkHref","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","concat","roomStatusBorder","classNames","push","join","children","equipmentBar","map","e","key","type","status","toLowerCase","onChangeStatusClick","mapEquipmentToButton","StatusBar","room","EquipmentBar_EquipmentBar","timeView","time","roomView","currentAllocationTag","nextAllocationTag","AllocationInfoBig_AllocationInfoBig","AllocationInfo_AllocationInfo","components_StatusBar_StatusBar","assign","RoomStatusBorder_RoomStatusBorder","TimeView_TimeView","AllocationMenu_AllocationMenu","Allocation","roomName","confirmed","replace","c","r","Math","random","toString","allocationSlice","createSlice","slice","initialState","entity","ids","reducers","addAllocation","state","action","payload","finishEarly","now","extendMeeting","amount","confirmMeeting","n","equipmentSlice","addEquipment","toConsumableArray","setStatus","filter","eq","changeStatus","newStatus","Available","Broken","NotAvailable","getDate","createSelector","getSelectedRoomId","getSelectedRoom","roomId","rooms","getSelectedRoomAllocations","allocation","values","getSelectedRoomCurrentAllocations","date","allocations","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getSelectedRoomNextAllocation","getSelectedRoomCurrentAllocation","isSelectedRoomOccupied","length","getSelectedRoomEquipment","SelectedRoom","connect","ownProps","threshold","selectors","occupied","free","dispatch","actions","objectSpread","RoomView","App","SelectedRoom_SelectedRoom","Component","Boolean","window","hostname","match","EquipmentType","roomSlice","addRoom","uiSlice","selectedRoomId","setSelectedRoomId","setTime","rootReducer","combineReducers","ui","reducer","store","configureStore","Equipment","subscribe","getState","Projector","Skype","WhiteBoard","roomName1","roomAllocations","roomEquipment","roomOccupied","setInterval","start","ReactDOM","render","es","containers_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69d890ae.chunk.js","sourcesContent":["export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}\n\nexport default class Room {\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n  }\n}\n","export const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\nconst allocationInfo = (props: any) => {\n  console.log(\"allocationInfo: \", props);\n\n  return (\n    <div className=\"AllocationInfo\">Next Meeting:\n      <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      <div>{props.by}</div>\n      <div>{props.title}</div>\n    </div>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\nconst allocationInfo = (props: any) => {\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">Current Meeting:\n        <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n        <div>{props.by}</div>\n        <div>{props.title}</div>\n        {props.attendees ? <div>Attendees: {props.attendees}</div> : null}\n        {props.agenda ? <div>Agenda: {props.agenda}</div> : null}\n      </div>\n    </>\n  );\n};\n\nexport default allocationInfo;\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\nimport { RoomStatus } from \"../../../models/Room\";\nimport \"./AllocationMenu.scss\";\n\nconst allocationMenu = (props: any) => {\n  console.log(\"Allocation menu:\", props.id);\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <button className=\"btn btn_flat\" onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-check-o\"/>\n          </svg>\n          <span>Confirm</span>\n        </button>\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <button className=\"btn btn_flat\" onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, 60000)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-plus-o\"/>\n          </svg>\n          <span>Extend</span>\n        </button>\n        <button className=\"btn btn_flat\" onClick={() => props.onFinishEarlyClick(props.currentAllocation.id)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-times-o\"/>\n          </svg>\n          <span>Finish</span>\n        </button>\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <button className=\"btn btn_flat\" onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id)}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-check-o\"/>\n          </svg>\n          <span>Confirm</span>\n        </button>\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <button className=\"btn btn_flat\" onClick={() => props.onAddMeetingClick()}>\n          <svg className=\"icon\">\n            <use xlinkHref=\"symbol-defs.svg#icon-calendar-o\"/>\n          </svg>\n          <span>Book now</span>\n        </button>\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default allocationMenu;\n","import React from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\n\nconst roomStatusBorder = (props: any) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default roomStatusBorder;\n","import React from \"react\";\nimport { Equipment } from \"../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\n\nconst equipmentBar = (props: { equipment: Equipment[], onChangeStatusClick: (e: Equipment) => void }) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return (\n      <button key={e.type} className={`btn btn_${e.status.toLowerCase()}`} onClick={() => props.onChangeStatusClick(e)}>\n        <svg className={`icon icon_${e.status.toLowerCase()} icon-${e.type.toLowerCase()}`}>\n          <use xlinkHref={`symbol-defs.svg#icon-${e.type.toLowerCase()}`}/>\n        </svg>\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default equipmentBar;\n","import React from \"react\";\nimport EquipmentBar from \"../EquipmentBar/EquipmentBar\";\nimport \"./StatusBar.scss\";\n\nconst StatusBar = (props: any) => {\n  return (\n    <div className=\"StatusBar\">\n      <div>{props.room.name}</div>\n      <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick}/>\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../shared/utility\";\nimport \"./TimeView.scss\";\n\nconst timeView = (props: any) => {\n  return (\n    <div className=\"TimeView\">{formatTimeStamp(props.time)}</div>\n  );\n};\n\nexport default timeView;\n","import React from \"react\";\nimport AllocationInfo from \"../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../Allocation/AllocationMenu/AllocationMenu\";\nimport RoomStatusBorder from \"../RoomStatusBorder/RoomStatusBorder\";\nimport StatusBar from \"../StatusBar/StatusBar\";\nimport TimeView from \"../TimeView/TimeView\";\nimport \"./RoomView.scss\";\n\nconst roomView = (props: any) => {\n  console.log(\"roomView: \", props);\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  if (props.currentAllocation) {\n    currentAllocationTag =\n    <AllocationInfoBig\n      {...props.currentAllocation}\n    />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo {...props.nextAllocation}/>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <StatusBar  time={props.time} {...props}/>\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <TimeView time={props.time} />\n        <div className=\"Separator\"/>\n        <div className=\"RightSection\">\n          {currentAllocationTag}\n          {nextAllocationTag}\n          <AllocationMenu\n            currentAllocation={props.currentAllocation}\n            nextAllocation={props.nextAllocation}\n            roomStatus={props.roomStatus}\n            onFinishEarlyClick={props.onFinishEarlyClick}\n            onExtendMeetingClick={props.onExtendMeetingClick}\n            onConfirmMeetingClick={props.onConfirmMeetingClick}\n            onAddMeetingClick={props.onAddMeetingClick}\n          />\n        </div>\n      </RoomStatusBorder>\n    </div>\n  );\n};\n\nexport default roomView;\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n\n  constructor(public title: string, public roomName: string, public from: number, public to: number) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload].to = Date.now() - 60000;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = Date.now() - 60000;\n    },\n  },\n});\n\nexport default allocationSlice;\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\n// [TODO] add ids\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: [],\n  reducers: {\n    addEquipment: (state, action) => [...state, action.payload] as never[],\n    setStatus: (state, action) => {\n      const equipment: Equipment =\n        state.filter((eq: Equipment) => eq.roomName === action.payload.roomName && eq.type === action.payload.type)[0];\n      equipment.status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment =\n        state.filter((eq: Equipment) => eq.roomName === action.payload.roomName && eq.type === action.payload.type)[0];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport Room, { RoomStatus } from \"../models/Room\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.filter((r: Room) => r.name === roomId)[0],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomName === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => equipment.filter((e: Equipment) => e.roomName === roomId),\n);\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getDate } from \"../../store/UI/UISelectors\";\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n\n  // 2 min\n  const roomStatus = selectors.getSelectedRoomStatus(120000)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocations(state)[0];\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAddMeetingClick: (id: string) => {\n      // [TODO] roomName to id\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", \"Supernova\", Date.now() - 60000, Date.now() + 50000), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id}));\n    },\n    onExtendMeetingClick: (id: string, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, amount}));\n    },\n    onFinishEarlyClick: (id: string) => {\n      dispatch(allocationSlice.actions.finishEarly(id));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    console.log(\"hello world\", \"test\");\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n","import { createSlice } from \"redux-starter-kit\";\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: [],\n  reducers: {\n    addRoom: (state, action) => [...state, action.payload] as never[],\n  },\n});\n\nexport default roomSlice;\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n  },\n});\n\nexport default uiSlice;\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst rootReducer = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n});\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import { EquipmentStatus } from \"./EquipmentStatus\";\nimport { EquipmentType } from \"./EquipmentType\";\n\nexport class Equipment {\n  constructor(public roomName: string, public type: EquipmentType, public status: EquipmentStatus) {}\n}\n","import Allocation from \"../models/Allocation\";\nimport Room from \"../models/Room\";\nimport store from \"./store\";\n\nimport { Equipment } from \"../models/Equipment\";\nimport { EquipmentStatus } from \"../models/EquipmentStatus\";\nimport { EquipmentType } from \"../models/EquipmentType\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport { getSelectedRoomAllocations, getSelectedRoomCurrentAllocations,\n   getSelectedRoomEquipment, getSelectedRoomNextAllocation, isSelectedRoomOccupied } from \"./selectors\";\nimport { getSelectedRoomId } from \"./UI/UISelectors\";\nimport uiSlice from \"./UI/UISlice\";\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  console.log(\"hello world\");\n  store.subscribe(() => {\n    console.log(store.getState());\n  });\n\n  store.dispatch(roomSlice.actions.addRoom({...new Room(\"Supernova\")}));\n  store.dispatch(roomSlice.actions.addRoom({...new Room(\"Room 2\")}));\n\n  store.dispatch(uiSlice.actions.setSelectedRoomId(\"Supernova\"));\n\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation 1a\", \"Supernova\", Date.now() - 1200000, Date.now() - 1200000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation 1b\", \"Supernova\", Date.now() - 1200000, Date.now() - 1200000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation Current 1c\", \"Supernova\", Date.now() - 120000 , Date.now() + 50000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation Next 1d\", \"Supernova\", Date.now() + 110000, Date.now() + 480000)}));\n  // store.dispatch(allocationSlice.actions.addAllocation(\n  //   {...new Allocation(\"Test allocation 1e\", \"Supernova\", Date.now() + 1000000, Date.now() + 1200000)}));\n\n  store.dispatch(allocationSlice.actions.addAllocation(\n    {...new Allocation(\"Test allocation 2a\", \"Room 2\", Date.now() - 1200000, Date.now() - 1200000)}));\n\n  store.dispatch(equipmentSlice.actions.addEquipment(\n    {...new Equipment(\"Supernova\", EquipmentType.Projector, EquipmentStatus.Available)}));\n  store.dispatch(equipmentSlice.actions.addEquipment(\n    {...new Equipment(\"Supernova\", EquipmentType.Skype, EquipmentStatus.Available)}));\n  store.dispatch(equipmentSlice.actions.addEquipment(\n    {...new Equipment(\"Supernova\", EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n  // store.dispatch(equipmentSlice.actions.changeStatus(\n  //   {...new Equipment(\"Supernova\", EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n  const roomName1 = getSelectedRoomId(store.getState());\n  const roomAllocations = getSelectedRoomAllocations(store.getState());\n  const roomEquipment = getSelectedRoomEquipment(store.getState());\n\n  const roomOccupied = isSelectedRoomOccupied(store.getState());\n  const currentAllocation = getSelectedRoomCurrentAllocations(store.getState())[0];\n  const nextAllocation = getSelectedRoomNextAllocation(store.getState());\n\n  // const timeInterval = selectDateTime();\n  // console.log('Time: ', selectDateTime(store.getState()));\n  // console.log('Occupied2: ', roomOccupied2);\n  // const roomOccupied2 = isSelectedRoomOccupied2(store.getState());\n  console.log(\"Name: \", roomName1);\n  console.log(\"Allocations: \", roomAllocations);\n  console.log(\"Occupied: \", roomOccupied);\n  console.log(\"Equipment: \", roomEquipment);\n  console.log(\"Current allocation: \", currentAllocation);\n  console.log(\"Next allocation: \", nextAllocation);\n\n  setInterval(() => {\n    console.log(\"Interval\");\n    // console.log('Time: ', selectDateTime(store.getState()));\n    store.dispatch(uiSlice.actions.setTime(Date.now()));\n  }, 1000 * 60);\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./Assets/symbol-defs.svg\";\nimport App from \"./containers/App/App\";\nimport \"./index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}