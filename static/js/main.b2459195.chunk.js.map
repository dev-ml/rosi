{"version":3,"sources":["assets/symbol-defs.svg","models/RoomStatus.ts","shared/utility.ts","components/Allocation/AllocationInfo/AllocationInfo.tsx","components/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","store/selectors.ts","models/EquipmentType.ts","components/UI/Button/Button.tsx","components/Allocation/AllocationMenu/AllocationMenu.tsx","components/Room/RoomStatusBorder/RoomStatusBorder.tsx","components/StatusBar/StatusBar.tsx","components/Room/TimeView/TimeView.tsx","components/Header/EquipmentBar/EquipmentBar.tsx","components/Header/Header.tsx","components/UI/Backdrop/Backdrop.tsx","components/UI/Popup/Popup.tsx","store/UI/UISelectors.ts","store/Room/RoomSlice.ts","store/crossSliceReducer.ts","shared/cacheManager.ts","store/UI/UISlice.ts","models/Room.ts","components/Equipment/EquipmentAdmin/EquipmentAdmin.tsx","models/EquipmentStatus.ts","components/UI/Input/Input.tsx","components/Admin/AdminPanel/AdminPanel.tsx","models/Equipment.ts","store/Equipment/EquipmentSlice.ts","containers/Admin/Admin.tsx","components/Room/RoomView/RoomView.tsx","models/Allocation.ts","store/Allocation/AllocationSlice.ts","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","store/store.ts","store/start.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RoomStatus","formatTimeStamp","timeStamp","Date","toLocaleTimeString","hour","minute","hour12","millisecondsToMinutes","milliseconds","Math","ceil","roundEpochToMinutes","epoch","updateObject","oldObject","updatedProperties","Object","objectSpread","checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","uuidv4","replace","c","r","random","toString","allocationInfo","props","console","log","startsIn","from","time","react_default","a","createElement","className","title","by","to","allocationInfoBig","timeTillEnd","duration","timeInMeeting","round","Fragment","attendees","agenda","n","EquipmentType","Button","buttonElement","type","concat","btnClassName","onClick","aria-label","iconId","xlinkHref","icons","label","allocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","id","currentAllocation","roomStatus","awaiting","UI_Button_Button","onConfirmMeetingClick","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","roomId","roomStatusBorder","classNames","push","join","children","StatusBar","onAdminClicked","timeView","mainRadius","canvasSize","greenColor","redColor","drawCircleStroke","ctx","fromMinute","toMinute","color","radius","lineWidth","clockRadius","dayMinuteToRadian","minuteRadian","PI","beginPath","strokeStyle","startAngle","endAngle","arc","stroke","UTCToClockTime","date","setUTCMilliseconds","getHours","getMinutes","canvas","React","createRef","setTimeout","current","getContext","width","height","minutes","allocations","map","forEach","e","i","drawCurrentTime","ref","equipmentBar","equipment","key","onChangeStatusClick","toLowerCase","status","mapEquipmentToButton","Header","room","name","toLocaleDateString","EquipmentBar_EquipmentBar","Backdrop","Popup","classes","open","UI_Backdrop_Backdrop","onCloseClick","getDate","createSelector","getSelectedRoomId","getAdminPanelOpen","getSelectedRoom","rooms","entity","getSelectedRoomAllocations","allocation","values","filter","getSelectedRoomCurrentAllocations","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getSelectedRoomNextAllocation","slice","getSelectedRoomCurrentAllocation","getSelectedRoomEquipment","roomSlice","createSlice","initialState","ids","reducers","addRoom","state","action","payload","changeRoomName","saveStateStarted","createAction","saveStateSucceeded","saveStateFailed","loadStateStarted","loadStateSucceeded","loadStateFailed","removeStateStarted","removeStateSucceeded","removeStateFailed","saveState","dispatch","getState","data","localforage","setItem","then","error","loadState","getItem","removeState","removeItem","uiSlice","selectedRoomId","now","adminPanelOpen","syncInProgress","syncError","setSelectedRoomId","setTime","showAdminPanel","hideAdminPanel","Room","classCallCheck","this","capacity","location","EquipmentStatus","EquipmentAdmin","onEquipmentToggleClick","Input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","assign","elementConfig","onChange","changed","options","option","displayValue","AdminPanel","_this","possibleConstructorReturn","getPrototypeOf","call","orderForm","roomName","placeholder","validation","valid","clientID","apiKey","calendarID","formIsValid","selectedRoom","roomEquipment","orderHandler","event","preventDefault","formData","formElementIdentifier","order","orderData","inputChangedHandler2","inputIdentifier","updatedFormElement","target","updatedOrderForm","defineProperty","setState","onSettingsSaved","onSettingsClear","newState","_this2","formElementsArray","config","form","onSubmit","formElement","UI_Input_Input","Equipment_EquipmentAdmin_EquipmentAdmin","btnType","disabled","_this3","submitSettings","inputChangedHandler","clearSettings","Component","Equipment","equipmentSlice","addEquipment","deleteEquipment","toggleEquipment","equipmentFound","eq","newEquipment","Available","setStatus","changeStatus","newStatus","Broken","NotAvailable","Admin","connect","selectors","actions","roomView","currentAllocationTag","AllocationInfoBig_AllocationInfoBig","nextAllocationTag","AllocationInfo_AllocationInfo","RoomStatusBorder_RoomStatusBorder","components_Header_Header","TimeView_TimeView","clockAllocations","AllocationMenu_AllocationMenu","components_StatusBar_StatusBar","onAdminClick","UI_Popup_Popup","onPopupCloseClick","Admin_Admin","Allocation","confirmed","extId","extStatus","allocationSlice","addAllocation","deleteAllocation","finishEarly","extendMeeting","amount","confirmMeeting","syncExternalAllocations","newAllocations","expiredAllocations","sa","find","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","foundAllocation","_iterator2","SelectedRoom","ownProps","threshold","occupied","free","RoomView","App","SelectedRoom_SelectedRoom","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","combinedReducers","combineReducers","ui","reducer","rootReducer","reduceReducers","store","configureStore","startState","setInterval","start","ReactDOM","render","es","containers_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b2459195.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symbol-defs.119ddbe0.svg\";","export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}","export const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\n\nexport const millisecondsToMinutes = (milliseconds: number): number => {\n  return Math.ceil((milliseconds / 1000) / 60);\n}\n\nexport const roundEpochToMinutes = (epoch: number): number => {\n  return epoch - (epoch % (1000 * 60));\n}\n\nexport const updateObject = (oldObject: any, updatedProperties: any) => {\n  return {\n      ...oldObject,\n      ...updatedProperties,\n  };\n};\n\nexport const checkValidity = ( value: any, rules: any ) => {\n  let isValid = true;\n  if ( !rules ) {\n      return true;\n  }\n\n  if ( rules.required ) {\n      isValid = value.trim() !== '' && isValid;\n  }\n\n  if ( rules.minLength ) {\n      isValid = value.length >= rules.minLength && isValid\n  }\n\n  if ( rules.maxLength ) {\n      isValid = value.length <= rules.maxLength && isValid\n  }\n\n  if ( rules.isEmail ) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test( value ) && isValid\n  }\n\n  if ( rules.isNumeric ) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test( value ) && isValid\n  }\n\n  return isValid;\n}\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\nconst allocationInfo = (props: any) => {\n  console.log(\"allocationInfo: \", props);\n  const startsIn = millisecondsToMinutes(props.from - props.time);\n\n  return (\n    <div className=\"AllocationInfo\">\n      <div>Next Meeting</div>\n      <div><h4>{props.title}</h4></div>\n      <div>{props.by}{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      <div>Starts in: {startsIn} min</div>\n    </div>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\nconst allocationInfoBig = (props: any) => {\n  const timeTillEnd = millisecondsToMinutes(props.to - props.time);\n  const duration = millisecondsToMinutes(props.to - props.from);\n  const timeInMeeting = duration - timeTillEnd;\n  const percentInMeeting = Math.round(timeInMeeting / duration * 100);\n\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">\n        <div>In Progress</div>\n        <div><h2>{props.title}</h2></div>\n        <div><h3>{props.by}</h3><span>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</span></div>\n        <div>Ends In: {timeTillEnd} min</div>\n        {props.attendees ? <div>{props.attendees} attendees</div> : null}\n        {props.agenda ? <div>Agenda: {props.agenda}</div> : null}\n        {/* <div>Duration: {duration} min</div> */}\n        {/* <div>% Done: {percentInMeeting}</div> */}\n      </div>\n    </>\n  );\n};\n\nexport default allocationInfoBig;\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport Room from \"../models/Room\";\nimport { RoomStatus } from \"../models/RoomStatus\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\nimport timeView from \"../components/Room/TimeView/TimeView\";\nimport { getRoomEquipment } from \"./Equipment/EquipmentSelectors\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.entity[roomId],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\n// [TODO] not only future meeting should be given but also meetings date - 60 min\nexport const getSelectedRoomFutureAllocationsForNextNMinutes = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted, getDate],\n  (allocations: Allocation[], time: number) => allocations.filter((a: Allocation) => a.to < time + n * 60 * 1000),\n);\n\n// Gives allocations that end after from, but also end before to\nexport const getSelectedRoomAllocationsFromTo = (from: number, to: number) => createSelector(\n  [getSelectedRoomAllocations],\n  (allocations: Allocation[]) => allocations.filter((a: Allocation) => a.to > from && a.to < to),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomNextAllocationTimeToBegin = createSelector(\n  [getSelectedRoomNextAllocation, getDate],\n  (allocation: Allocation, time: number) => allocation.from - time,\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocationLength = createSelector(\n  [getSelectedRoomCurrentAllocation],\n  (allocation: Allocation) => allocation.to - allocation.from,\n);\n\nexport const getSelectedRoomCurrentAllocationTimeToEnd = createSelector(\n  [getSelectedRoomCurrentAllocations, getDate],\n  (allocation: Allocation, time: number) => allocation.to - time,\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => {\n    // [TODO] Bug on the production\n    if (!equipment.entity) {\n      return [];\n    }\n\n    const equipmentArray: Equipment[] = Object.values(equipment.entity) || [];\n    return equipmentArray.filter((e: Equipment) => e.roomId === roomId);\n  }\n);\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n","import React from \"react\";\nimport icons from \"../../../assets/symbol-defs.svg\";\n\nconst Button = (props: any) => {\n  let buttonElement = <button>Not configured button</button>;\n\n  switch (props.type) {\n    case \"icon\":\n      buttonElement = (\n        <button className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.iconId}>\n          <svg className={`icon`}>\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n        </button>\n      );\n      break;\n    case \"icon-text\":\n      buttonElement = (\n        <button className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"text\":\n      buttonElement = (\n        <button type=\"button\" className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n  }\n  \n  return buttonElement;\n};\n\nexport default Button;\n","import React from \"react\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport \"./AllocationMenu.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst allocationMenu = (props: any) => {\n  console.log(\"Allocation menu:\", props.id);\n  console.log(\"Props: \", props);\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, props.time, 60000 * 15)}\n          iconId=\"icon-calendar-plus-o\"\n          label=\"Extend\"\n        />\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onFinishEarlyClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-times-o\"\n          label=\"Finish\"\n        />\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onAddMeetingClick(props.roomId, props.time)}\n          iconId=\"icon-calendar-o\"\n          label=\"Book now\"\n        />\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default allocationMenu;\n","import React from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\n\nconst roomStatusBorder = (props: any) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default roomStatusBorder;\n","import React from \"react\";\nimport \"./StatusBar.scss\";\nimport Button from \"../UI/Button/Button\";\nimport SignInButton from \"../Google/SignInButton\";\n\nconst StatusBar = (props: any) => {\n  return (\n    <div className=\"StatusBar\">\n      {/* <SignInButton roomId={props.room.id} /> */}\n      <Button type=\"icon-text\" onClick={props.onAdminClicked} iconId=\"icon-settings\" label=\"Admin\" />\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./TimeView.scss\";\n\n// [TODO] show overlapping events with different color\nconst timeView = (props: any) => {\n\n  const mainRadius = 240;\n  const timeRadius = 225;\n  const canvasSize = 500;\n  const greenColor = \"#4CAF50\"; //\"rgb(139, 195, 74)\";\n  const redColor = \"#F44336\"; // \"rgb(255, 87, 34)\";\n\n  function drawCircleStroke(ctx: any, fromMinute: number, toMinute: number, color: string, radius?: number, lineWidth?: number) {\n    const clockRadius = radius || mainRadius;\n\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth || 4;\n    ctx.strokeStyle = color;\n\n    function dayMinuteToRadian(minute: number) {\n      const minuteRadian = 2 * Math.PI / (12 * 60);\n      const startingRadian = -0.5 * Math.PI;\n      return startingRadian + minute * minuteRadian;\n    }\n\n    const startAngle = dayMinuteToRadian(fromMinute);\n    const endAngle = dayMinuteToRadian(toMinute);\n\n    ctx.arc(canvasSize / 2, canvasSize / 2, clockRadius, startAngle, endAngle);\n    ctx.stroke();\n  }\n\n  function UTCToClockTime(epoch: number): number {\n    const date = new Date(0);\n    date.setUTCMilliseconds(epoch);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  function drawCurrentTime(ctx: any) {\n    const minutes = UTCToClockTime(props.time);\n    // Draw circle background\n    drawCircleStroke(ctx, minutes + 1, minutes, \"#000\", 200, 22);\n    \n    // Draw available slots for whole day\n    drawCircleStroke(ctx, minutes - 60, minutes - 120, greenColor, 200, 5);\n    \n    // Draw busy slots for given allocations\n    // [TODO] The busy slots drawing should have min and max value so it shouldn't exceed 11 hours threshold\n    props.allocations\n    .map((a: any) => ({from: UTCToClockTime(a.from), to: UTCToClockTime(a.to)}))\n    .forEach((e: any) => drawCircleStroke(ctx, e.from, e.to, redColor, 200, 12));\n    \n    // Draw current time\n    drawCircleStroke(ctx, minutes - 1, minutes + 2, \"#FFF\", 170, 20);\n    drawCircleStroke(ctx, minutes, minutes + 1, \"#000\", 196, 20);\n\n    // draw 30 min slots\n    for (let i = 0; i < 24; i++) {\n      // long line on each full hour and short on not full hour\n      if (i % 2) {\n        drawCircleStroke(ctx, i * 30, i * 30 + 1, \"#FFF\", 200, 12);\n      } else {\n        drawCircleStroke(ctx, i * 30, i * 30 + 1, \"#FFF\", 196, 20);\n      }\n    }\n    \n  }\n\n  let canvas: any = React.createRef();\n  // [TODO] This component need to be smart component and this timeout then can be removed\n  setTimeout(function () {\n    if (canvas.current && canvas.current.getContext) {\n      const ctx = canvas.current.getContext(\"2d\");\n\n      canvas.current.width = canvasSize;\n      canvas.current.height = canvasSize;\n      drawCurrentTime(ctx);\n    }\n  }, 10)\n\n  return (\n    <div className=\"TimeView\">\n      <span>{formatTimeStamp(props.time)}</span>\n      <canvas className=\"TimeViewCanvas\" id=\"canvas\" ref={canvas}></canvas>\n    </div>\n  );\n};\n\nexport default timeView;\n","import React from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst equipmentBar = (props: { equipment: Equipment[], onChangeStatusClick: (e: Equipment) => void }) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return <Button\n      key={e.type}\n      type=\"icon\"\n      onClick={() => props.onChangeStatusClick(e)}\n      iconId={`icon-${e.type.toLowerCase()}`}\n      btnClassName={`btn_${e.status.toLowerCase()}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default equipmentBar;\n","import React from \"react\";\nimport EquipmentBar from \"./EquipmentBar/EquipmentBar\";\nimport \"./Header.scss\";\n\nconst Header = (props: any) => {\n  return (\n    <div className=\"Header\">\n      <div><h1>{props.room.name}</h1></div>\n      <div>{new Date().toLocaleDateString()}</div>\n      <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick}/>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport \"./Backdrop.scss\";\n\nconst Backdrop = () => {\n  return (\n    <div className=\"Backdrop\"/>\n  )\n}\n\nexport default Backdrop;\n","import React from \"react\";\nimport \"./Popup.scss\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Popup = (props: any) => {\n  const classes = [\"Popup\"];\n  if (props.open) {\n    classes.push(\"open\");\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <Backdrop/>\n      <div className=\"content\">\n        <Button\n          type=\"icon-text\"\n          onClick={props.onCloseClick}\n          iconId=\"icon-close\"\n          label=\"Close\"\n        />\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n\nexport const getAdminPanelOpen = createSelector(\n  [\"ui.adminPanelOpen\"],\n);\n","import { createSlice } from \"redux-starter-kit\";\nimport Room from \"../../models/Room\";\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: {\n    entity: {} as {[id: string]: Room },\n    ids: [] as string[],\n  },\n  reducers: {\n    addRoom: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    changeRoomName: (state, action) => {\n      // [TODO] Temporary create room when it does not exists\n      if (!state.entity[action.payload.id]) {\n        state.entity[action.payload.id] = action.payload;\n        state.ids.push(action.payload.id);\n      } else {\n        state.entity[action.payload.id].name = action.payload.name;\n      }\n    }\n  },\n});\n\nexport default roomSlice;\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../shared/cacheManager\";\n\nconst saveStateStarted = createAction(\"crossslice/savestate/started\")\nconst saveStateSucceeded = createAction(\"crossslice/savestate/succeeded\")\nconst saveStateFailed = createAction(\"crossslice/savestate/failed\")\n\nconst loadStateStarted = createAction(\"crossslice/loadstate/started\")\nconst loadStateSucceeded = createAction(\"crossslice/loadstate/succeeded\")\nconst loadStateFailed = createAction(\"crossslice/loadstate/failed\")\n\nconst removeStateStarted = createAction(\"crossslice/removestate/started\")\nconst removeStateSucceeded = createAction(\"crossslice/removestate/succeeded\")\nconst removeStateFailed = createAction(\"crossslice/removestate/failed\")\n\nexport const saveState = () => (dispatch: any, getState: any) => {\n  dispatch(saveStateStarted());\n  return cacheManager.writeData(\"state\", getState()).then(\n    () => dispatch(saveStateSucceeded()),\n    (error) => dispatch(saveStateFailed(error))\n  );\n};\n\nexport const loadState = () => (dispatch: any) => {\n  dispatch(loadStateStarted());\n  return cacheManager.readData(\"state\").then(\n    (state) => dispatch(loadStateSucceeded(state)),\n    (error) => dispatch(loadStateFailed(error))\n  );\n};\n\nexport const removeState = () => (dispatch: any) => {\n  dispatch(removeStateStarted());\n  return cacheManager.removeData(\"state\").then(\n    (state) => {\n      dispatch(removeStateSucceeded(state));\n      dispatch(loadState());\n    },\n    (error) => dispatch(removeStateFailed(error))\n  );\n};\n\nexport const crossSliceReducer = (state: any, action: any) => {\n  let newState: any = {...state};\n  newState.ui = {...newState.ui};\n\n  switch (action.type) {\n    case removeStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case removeStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case removeStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case saveStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case saveStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case saveStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case loadStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case loadStateSucceeded.toString():\n      // [TODO] if new version arrive, state shuold be cleaned, or retrofitted.\n      newState = {...newState, ...action.payload};\n      // newState = {...action.payload};\n      newState.ui.time = Date.now();\n      newState.ui.syncInProgress = false;\n      return newState;\n    case loadStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    default:\n      return state;\n  }\n}\n","import localforage from \"localforage\";\n\nexport const writeData = (key: any, data: any) => localforage.setItem(key, data);\nexport const readData = (key: any) => localforage.getItem(key);\nexport const removeData = (key: any) => localforage.removeItem(key);\nexport const clear = () => localforage.clear();\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n    adminPanelOpen: false,\n    syncInProgress: false,\n    syncError: \"\"\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n    showAdminPanel: (state) => {\n      state.adminPanelOpen = true;\n      return state;\n    },\n    hideAdminPanel: (state) => {\n      state.adminPanelOpen = false;\n      return state;\n    },\n  },\n});\n\nexport default uiSlice;\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Room {\n  public id: string;\n\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n    this.id = uuidv4();\n  }\n}\n","import React from \"react\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\n\nconst EquipmentAdmin = (props: any) => {\n  return (\n    <>\n      <div>This is equipment admin</div>\n      {Object.values(EquipmentType).map((type: any) => <div key={type}><button onClick={() => props.onEquipmentToggleClick(props.roomId, type)}>{type}</button></div>)}\n    </>\n  );\n};\n\nexport default EquipmentAdmin;\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\n\nimport \"./Input.scss\";\n\nconst Input = ( props: any ) => {\n    let inputElement = null;\n    const inputClasses = [\"InputElement\"];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(\"Invalid\");\n    }\n\n    switch ( props.elementType ) {\n        case ( \"input\" ):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} \n            />;\n            break;\n        case ( \"textarea\" ):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} \n            />;\n            break;\n        case ( \"select\" ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map((option: any) => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={\"Input\"}>\n            <label className={\"Label\"}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default Input;","import React, { ChangeEvent, Component, FormEvent } from \"react\";\nimport Room from \"../../../models/Room\";\nimport Button from \"../../UI/Button/Button\";\nimport EquipmentAdmin from \"../../Equipment/EquipmentAdmin/EquipmentAdmin\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\nimport Input from \"../../UI/Input/Input\";\nimport \"./AdminPanel.scss\";\n\ninterface IAdminPanelProps {\n  onSettingsSaved: (room: Room) => void;\n  onEquipmentToggleClick: ({ }) => void;\n  onSettingsClear: () => void;\n}\n\ninterface IAdminPanelState {\n  room: Room;\n  formIsValid: Boolean;\n  orderForm: any;\n}\n\nclass AdminPanel extends Component<IAdminPanelProps, IAdminPanelState> {\n  state: IAdminPanelState = {\n    room: new Room(\"\"),\n    orderForm: {\n      roomName: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Room name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      clientID: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Client ID'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      apiKey: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'API key'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      calendarID: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Calendar ID'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    formIsValid: false\n  }\n\n  private selectedRoom: Room;\n  private roomEquipment: Equipment[];\n\n  constructor(props: any) {\n    super(props)\n    this.selectedRoom = props.selectedRoom;\n    this.roomEquipment = props.roomEquipment;\n\n    if (!this.selectedRoom) {\n      this.selectedRoom = { ... new Room(\"Conference Room 1\") };\n    }\n\n    this.setState({\n      room: { ... this.selectedRoom },\n    });\n  }\n\n\n\n  orderHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const formData: any = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    }\n    const order = {\n      orderData: formData,\n    }\n\n    console.log(\"[AdminPanel] order: \", order);\n\n    // this.props.onOrderBurger(order, this.props.token);\n  }\n\n  inputChangedHandler2 = (event: ChangeEvent<HTMLInputElement>, inputIdentifier: any) => {\n\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  }\n\n\n\n  submitSettings(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    this.props.onSettingsSaved(this.state.room);\n  };\n\n  clearSettings() {\n    this.props.onSettingsClear();\n  }\n\n  inputChangedHandler(event: ChangeEvent<HTMLInputElement>) {\n    console.log(event);\n    const newState = { ...this.state };\n    if (newState.room) {\n      newState.room.name = event.target.value;\n    }\n    this.setState(newState);\n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event: any) => this.inputChangedHandler2(event, formElement.id)} />\n        ))}\n        <div>\n          <EquipmentAdmin roomId={this.state.room.id} equipment={this.roomEquipment} onEquipmentToggleClick={this.props.onEquipmentToggleClick} />\n        </div>\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n    // if (this.props.loading) {\n    //   form = <Spinner />;\n    // }\n    return (\n      <div className=\"ContactData\">\n        <h4>Enter your Contact Data</h4>\n        {form}\n\n      </div>\n    );\n  }\n\n\n  render2() {\n    return (\n      <div>\n        <h3>This is admin panel</h3>\n        <form onSubmit={(e) => this.submitSettings(e)}>\n          <span>General</span>\n          <div>\n            <label>Room name</label>\n            <input\n              type=\"text\"\n              placeholder=\"Room Name\"\n              value={this.state.room.name}\n              onChange={(e) => this.inputChangedHandler(e)}\n            />\n          </div>\n          <div>\n            <label>API key</label>\n            <input\n              type=\"text\"\n              placeholder=\"Room Name\"\n              value={this.state.room.name}\n              onChange={(e) => this.inputChangedHandler(e)}\n            />\n          </div>\n          <div>\n            <label>Client ID</label>\n            <input\n              type=\"text\"\n              placeholder=\"Client ID\"\n              value={this.state.room.name}\n              onChange={(e) => this.inputChangedHandler(e)}\n            />\n          </div>\n          <div>\n            <label>Calendar ID</label>\n            <input\n              type=\"text\"\n              placeholder=\"Room Name\"\n              value={this.state.room.name}\n              onChange={(e) => this.inputChangedHandler(e)}\n            />\n          </div>\n          <div>\n            <EquipmentAdmin roomId={this.state.room.id} equipment={this.roomEquipment} onEquipmentToggleClick={this.props.onEquipmentToggleClick} />\n          </div>\n\n          <Button\n            type=\"icon-text\"\n            iconId=\"icon-save\"\n            label=\"Save Settings\"\n          />\n\n\n        </form>\n        <Button\n          type=\"text\"\n          label=\"Clear Settings\"\n          onClick={() => this.clearSettings()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AdminPanel;\n","import { EquipmentStatus } from \"./EquipmentStatus\";\nimport { EquipmentType } from \"./EquipmentType\";\nimport { uuidv4 } from \"../shared/utility\";\n\nexport class Equipment {\n  public id: string;\n\n  constructor(public roomId: string, public type: EquipmentType, public status: EquipmentStatus) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: {\n    entity: {} as {[id: string]: Equipment },\n  },\n  reducers: {\n    addEquipment: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n    },\n    deleteEquipment: (state, action) => {\n      delete state.entity[action.payload.id];\n    },\n    toggleEquipment: (state, action) => {\n      console.log('toggle equipment: ', action);\n      const roomId = action.payload.roomId;\n      const type = action.payload.type;\n      const equipmentFound = Object.values(state.entity).filter((eq: Equipment) => eq.roomId === roomId && eq.type === type)[0];\n      if (equipmentFound) {\n        delete state.entity[equipmentFound.id];\n      } else {\n        const newEquipment = new Equipment(roomId, type, EquipmentStatus.Available);\n        state.entity[newEquipment.id] = {...newEquipment};\n      }\n    },\n    setStatus: (state, action) => {\n      state.entity[action.payload.id].status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment = state.entity[action.payload.id];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { connect } from \"react-redux\";\nimport * as selectors from \"../../store/selectors\";\nimport roomSlice from \"../../store/Room/RoomSlice\";\nimport Room from \"../../models/Room\";\nimport {saveState, removeState} from \"../../store/crossSliceReducer\";\nimport uiSlice from \"../../store/UI/UISlice\";\nimport AdminPanel from \"../../components/Admin/AdminPanel/AdminPanel\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\n\nconst mapStateToProps = (state: any) => {\n  const selectedRoom = selectors.getSelectedRoom(state);\n  const roomEquipment = selectors.getSelectedRoomEquipment(state);\n\n  return {\n    selectedRoom,\n    roomEquipment,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSettingsSaved: (room: Room) => {\n      dispatch(roomSlice.actions.changeRoomName(room));\n      // [TODO] temporary solution, need to be changed when multiple room management will be added\n      dispatch(uiSlice.actions.setSelectedRoomId(room.id));\n      dispatch(saveState());\n    },\n    onEquipmentToggleClick: (roomId: string, type: string) => {\n      console.log(\"onEquipmentToggleClick\");\n      dispatch(equipmentSlice.actions.toggleEquipment({roomId, type}));\n    },\n    onSettingsClear: () => {\n      dispatch(removeState());\n    }\n  };\n};\n\nconst Admin = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AdminPanel);\n\nexport default Admin;\n","import React from \"react\";\nimport AllocationInfo from \"../../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../../Allocation/AllocationMenu/AllocationMenu\";\nimport RoomStatusBorder from \"../RoomStatusBorder/RoomStatusBorder\";\nimport StatusBar from \"../../StatusBar/StatusBar\";\nimport TimeView from \"../TimeView/TimeView\";\nimport \"./RoomView.scss\";\nimport Header from \"../../Header/Header\";\nimport Popup from \"../../UI/Popup/Popup\";\nimport Admin from \"../../../containers/Admin/Admin\";\n\nconst roomView = (props: any) => {\n  // console.log(\"roomView: \", props);\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <Admin/>;\n  }\n\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  // [TODO] Overlapping events, if current event is overlapping next\n  if (props.currentAllocation) {\n    currentAllocationTag =\n    <AllocationInfoBig time={props.time}\n      {...props.currentAllocation}\n    />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo time={props.time} {...props.nextAllocation}/>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <Header time={props.time} {...props}/>\n      </RoomStatusBorder>\n      <div className=\"Content\">\n        <TimeView time={props.time} allocations={props.clockAllocations} />\n        <div className=\"Separator\"/>\n        <div className=\"RightSection\">\n          <div className=\"Allocations\">\n            {currentAllocationTag}\n            {nextAllocationTag}\n          </div>\n          <AllocationMenu\n            roomId={props.room.id}\n            time={props.time}\n            currentAllocation={props.currentAllocation}\n            nextAllocation={props.nextAllocation}\n            roomStatus={props.roomStatus}\n            onFinishEarlyClick={props.onFinishEarlyClick}\n            onExtendMeetingClick={props.onExtendMeetingClick}\n            onConfirmMeetingClick={props.onConfirmMeetingClick}\n            onAddMeetingClick={props.onAddMeetingClick}\n          />\n        </div>\n      </div>\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <StatusBar room={props.room} onAdminClicked={props.onAdminClick}/>\n      </RoomStatusBorder>\n      <Popup open={props.adminPanelOpen} onCloseClick={props.onPopupCloseClick}>\n        <Admin></Admin>\n      </Popup>\n    </div>\n  );\n};\n\nexport default roomView;\n","import { uuidv4, roundEpochToMinutes } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n  public extId?: string;\n  public extStatus?: string;\n\n  // From and to are epochs rounded to minutes\n  constructor(public title: string, public roomId: string, public from: number, public to: number) {\n    this.id = uuidv4();\n    this.from = roundEpochToMinutes(this.from);\n    this.to = roundEpochToMinutes(this.to);\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\nimport { roundEpochToMinutes } from \"../../shared/utility\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    deleteAllocation: (state, action) => {\n      delete state.entity[action.payload.id];\n      // this operation can be costly\n      state.ids = state.ids.filter((id: string) => id !== action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload].to = roundEpochToMinutes(action.payload.time);\n      state.entity[action.payload].confirmed = true;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = roundEpochToMinutes(action.payload.time);\n    },\n    // [TODO] sync adhoc meetings to external source\n    syncExternalAllocations: (state, action) => {\n      console.log(\"[AllocationSlice:syncExternalAllocations] : \", action);\n      // [TODO] Delete objects with extId && !confirmed && not in newAllocations\n      const newAllocations: Allocation[] = action.payload;\n      const expiredAllocations = Object.values(state.entity).filter((sa: Allocation) => !!sa.extId && !sa.confirmed && !newAllocations.find((a: Allocation) => a.extId === sa.extId));\n      for (const deleteAllocation of expiredAllocations) {\n        delete state.entity[deleteAllocation.id];\n        // this operation can be costly\n        state.ids = state.ids.filter((id: string) => id !== deleteAllocation.id);\n      };\n\n      // For each allocation in payload\n      for (const allocation of newAllocations) {\n        // check if exist entry with extId = id\n        const foundAllocation = Object.values(state.entity).find((sa: Allocation) => sa.extId === allocation.extId);\n        if (foundAllocation) {\n          // if exists entry then check the status !== confirmed, if yes delete, else update \n          if (allocation.extStatus !== \"confirmed\") {\n            delete state.entity[foundAllocation.id];\n            // this operation can be costly\n            state.ids = state.ids.filter((id: string) => id !== foundAllocation.id);\n          } else {\n            // update if meeting isn't yet confirmed \n            if (!foundAllocation.confirmed) {\n              foundAllocation.from = allocation.from;\n              foundAllocation.to = allocation.to;\n              foundAllocation.title = allocation.title;\n            }\n          }\n        } else {\n          // if no entry check status === confirmed, if yes add\n          if (allocation.extStatus === \"confirmed\") {\n            state.entity[allocation.id] = allocation;\n            state.ids.push(allocation.id);\n          }\n        }\n      }\n    }\n  },\n});\n\nexport default allocationSlice;\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/Room/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getDate, getAdminPanelOpen } from \"../../store/UI/UISelectors\";\nimport uiSlice from \"../../store/UI/UISlice\";\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  // console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const adminPanelOpen = getAdminPanelOpen(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n\n  // 2 min\n  const roomStatus = selectors.getSelectedRoomStatus(120000)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocation(state);\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  // get allocations for next 10 hours\n  const clockMaxTime = time + 10 * 60 * 60 * 1000;\n  const clockMinTime = time - 1 * 60 * 60 * 1000;\n  const clockAllocations = selectors.getSelectedRoomAllocationsFromTo(clockMinTime, clockMaxTime)(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n    adminPanelOpen,\n    clockAllocations,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAdminClick: () => {\n      dispatch(uiSlice.actions.showAdminPanel());\n    },\n    onPopupCloseClick: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onAddMeetingClick: (roomId: string, time: number) => {\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", roomId, time, time + 60 * 1000 * 30), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id}));\n    },\n    onExtendMeetingClick: (id: string, time: number, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, time, amount}));\n    },\n    onFinishEarlyClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.finishEarly(id, time));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\nimport reduceReducers from \"reduce-reducers\";\nimport { crossSliceReducer } from \"./crossSliceReducer\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst combinedReducers = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n});\n\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer);\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import Allocation from \"../models/Allocation\";\nimport Room from \"../models/Room\";\nimport store from \"./store\";\n\nimport { Equipment } from \"../models/Equipment\";\nimport { EquipmentStatus } from \"../models/EquipmentStatus\";\nimport { EquipmentType } from \"../models/EquipmentType\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport {\n  getSelectedRoomAllocations, getSelectedRoomCurrentAllocations,\n  getSelectedRoomEquipment, getSelectedRoomNextAllocation, isSelectedRoomOccupied\n} from \"./selectors\";\nimport { getSelectedRoomId } from \"./UI/UISelectors\";\nimport uiSlice from \"./UI/UISlice\";\nimport { loadState, saveState } from \"./crossSliceReducer\";\nimport { roundEpochToMinutes } from \"../shared/utility\";\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  const startState = store.getState();\n  console.log(\"[Start] startState:\", startState);\n  store.dispatch(loadState());\n\n  // [TODO] once a day clean old entries\n  setInterval(() => {\n    console.log(\"[Start] Interval\");\n    // Set time to be alway 1 milliesecond after full minute\n    store.dispatch(uiSlice.actions.setTime(roundEpochToMinutes(Date.now()) + 1));\n    store.dispatch(saveState());\n  }, 60 * 1000);\n\n\n  // store.subscribe(() => {\n  //   console.log(store.getState());\n  // });\n\n  const initData = () => {\n    console.log('[Start] init data');\n    // const usedRoom = new Room(\"Supernova\");\n    // store.dispatch(roomSlice.actions.addRoom({...usedRoom}));\n    // store.dispatch(roomSlice.actions.addRoom({...new Room(\"Room 2\")}));\n\n    // store.dispatch(uiSlice.actions.setSelectedRoomId(usedRoom.id));\n\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1a\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1b\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Current 1c\", usedRoom.id, Date.now() - 120000 , Date.now() + 50000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Next 1d\", usedRoom.id, Date.now() + 110000, Date.now() + 480000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1e\", usedRoom.id, Date.now() + 1000000, Date.now() + 1200000)}));\n\n    // store.dispatch(allocationSlice.actions.addAllocation(\n    //   {...new Allocation(\"Test allocation 2a\", \"Room 2\", Date.now() - 1200000, Date.now() - 1200000)}));\n\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Projector, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Skype, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // // store.dispatch(equipmentSlice.actions.changeStatus(\n    // //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // const roomName1 = getSelectedRoomId(store.getState());\n    // const roomAllocations = getSelectedRoomAllocations(store.getState());\n    // const roomEquipment = getSelectedRoomEquipment(store.getState());\n\n    // const roomOccupied = isSelectedRoomOccupied(store.getState());\n    // const currentAllocation = getSelectedRoomCurrentAllocations(store.getState())[0];\n    // const nextAllocation = getSelectedRoomNextAllocation(store.getState());\n\n    // // const timeInterval = selectDateTime();\n    // // console.log('Time: ', selectDateTime(store.getState()));\n    // // console.log('Occupied2: ', roomOccupied2);\n    // // const roomOccupied2 = isSelectedRoomOccupied2(store.getState());\n    // console.log(\"Name: \", roomName1);\n    // console.log(\"Allocations: \", roomAllocations);\n    // console.log(\"Occupied: \", roomOccupied);\n    // console.log(\"Equipment: \", roomEquipment);\n    // console.log(\"Current allocation: \", currentAllocation);\n    // console.log(\"Next allocation: \", nextAllocation);\n  }\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App/App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}