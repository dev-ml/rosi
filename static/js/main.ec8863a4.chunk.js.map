{"version":3,"sources":["assets/symbol-defs.svg","models/RoomStatus.ts","shared/utility.ts","components/Allocation/AllocationInfo/AllocationInfo.tsx","components/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","models/EquipmentStatus.ts","components/UI/Button/Button.tsx","components/Allocation/AllocationMenu/AllocationMenu.tsx","components/Room/RoomStatusBorder/RoomStatusBorder.tsx","models/Allocation.ts","store/Allocation/AllocationSlice.ts","models/Equipment.ts","store/Equipment/EquipmentSlice.ts","store/selectors.ts","models/EquipmentType.ts","store/Room/RoomSlice.ts","store/UI/UISlice.ts","store/crossSliceReducer.ts","shared/cacheManager.ts","store/store.ts","providers/googleApi.ts","components/Google/SignInButton.tsx","components/StatusBar/StatusBar.tsx","components/Room/TimeView/TimeView.tsx","components/Header/EquipmentBar/EquipmentBar.tsx","components/Header/Header.tsx","components/UI/Backdrop/Backdrop.tsx","components/UI/Popup/Popup.tsx","store/UI/UISelectors.ts","models/Room.ts","components/Equipment/EquipmentAdmin/EquipmentAdmin.tsx","components/Admin/AdminPanel/AdminPanel.tsx","containers/Admin/Admin.tsx","components/Room/RoomView/RoomView.tsx","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","store/start.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RoomStatus","formatTimeStamp","timeStamp","Date","toLocaleTimeString","hour","minute","hour12","millisecondsToMinutes","milliseconds","Math","floor","uuidv4","replace","c","r","random","toString","allocationInfo","props","console","log","react_default","a","createElement","className","from","to","by","title","allocationInfoBig","Fragment","attendees","agenda","time","ceil","EquipmentStatus","Button","buttonElement","type","concat","btnClassName","onClick","aria-label","iconId","xlinkHref","icons","label","allocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","id","currentAllocation","roomStatus","awaiting","UI_Button_Button","onConfirmMeetingClick","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","roomId","roomStatusBorder","classNames","push","join","children","Allocation","Object","classCallCheck","this","confirmed","extId","extStatus","allocationSlice","createSlice","slice","initialState","entity","ids","reducers","addAllocation","state","action","payload","deleteAllocation","filter","finishEarly","now","extendMeeting","amount","confirmMeeting","syncExternalAllocations","newAllocations","expiredAllocations","values","sa","find","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","value","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","allocation","foundAllocation","_iterator2","Equipment","status","n","EquipmentType","equipmentSlice","addEquipment","deleteEquipment","toggleEquipment","equipmentFound","eq","newEquipment","Available","objectSpread","setStatus","changeStatus","equipment","newStatus","Broken","NotAvailable","roomSlice","addRoom","changeRoomName","name","uiSlice","selectedRoomId","adminPanelOpen","syncInProgress","syncError","setSelectedRoomId","setTime","showAdminPanel","hideAdminPanel","saveStateStarted","createAction","saveStateSucceeded","saveStateFailed","loadStateStarted","loadStateSucceeded","loadStateFailed","removeStateStarted","removeStateSucceeded","removeStateFailed","saveState","dispatch","getState","key","data","localforage","setItem","then","error","loadState","getItem","removeState","removeItem","combinedReducers","combineReducers","ui","reducer","room","rootReducer","reduceReducers","newState","store","configureStore","GoogleApi","Config","sign","onLoadCallback","events","syncToken","CONFIG","handleClientLoad","createClass","get","window","gapi","_this","script","document","src","body","appendChild","onload","load","initClient","auth2","getAuthInstance","signIn","signOut","callback","isSignedIn","listen","request","_this2","constructUpcomingEventsRequestFull","constructUpcomingEventsRequestPartial","singleSync","pageToken","client","calendar","list","response","result","items","length","syncEvents","nextPageToken","nextSyncToken","catch","statusCode","sync","_this3","mappedEvents","map","event","summary","start","dateTime","getTime","end","actions","_this4","maxResults","arguments","today","tomorrow","setDate","getDate","calendarId","orderBy","showDeleted","singleEvents","timeMin","toISOString","timeMax","_this5","init","e","updateSigninStatus","listUpcomingEvents","SignInButton","possibleConstructorReturn","getPrototypeOf","call","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","apiKey","clientId","discoveryDocs","scope","apiCalendar","signedIn","handleItemClick","bind","assertThisInitialized","setState","listenSign","handleAuthClick","handleSignoutClick","signButton","React","Component","StatusBar","SignInButton_SignInButton","onAdminClicked","timeView","mainRadius","timeRadius","canvasSize","greenColor","redColor","drawCircleStroke","ctx","fromMinute","toMinute","color","radius","lineWidth","clockRadius","dayMinuteToRadian","minuteRadian","PI","beginPath","strokeStyle","startAngle","endAngle","arc","stroke","UTCToClockTime","epoch","date","setUTCMilliseconds","getHours","getMinutes","canvas","createRef","setTimeout","current","getContext","width","height","minutes","allocations","forEach","drawCurrentTime","ref","equipmentBar","onChangeStatusClick","toLowerCase","mapEquipmentToButton","Header","EquipmentBar_EquipmentBar","Backdrop","Popup","classes","open","UI_Backdrop_Backdrop","onCloseClick","createSelector","getSelectedRoomId","getAdminPanelOpen","getSelectedRoom","rooms","getSelectedRoomAllocations","getSelectedRoomCurrentAllocations","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getSelectedRoomNextAllocation","getSelectedRoomCurrentAllocation","getSelectedRoomEquipment","Room","capacity","location","EquipmentAdmin","onEquipmentToggleClick","AdminPanel","selectedRoom","roomEquipment","preventDefault","onSettingsSaved","onSettingsClear","target","onSubmit","submitSettings","placeholder","onChange","inputChangedHandler","Equipment_EquipmentAdmin_EquipmentAdmin","clearSettings","Admin","connect","selectors","roomView","currentAllocationTag","AllocationInfoBig_AllocationInfoBig","assign","nextAllocationTag","AllocationInfo_AllocationInfo","components_Header_Header","RoomStatusBorder_RoomStatusBorder","TimeView_TimeView","clockAllocations","AllocationMenu_AllocationMenu","components_StatusBar_StatusBar","onAdminClick","UI_Popup_Popup","onPopupCloseClick","Admin_Admin","SelectedRoom","ownProps","threshold","occupied","free","RoomView","App","SelectedRoom_SelectedRoom","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","startState","setInterval","ReactDOM","render","es","containers_App_App","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ec8863a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symbol-defs.119ddbe0.svg\";","export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}","export const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\nexport const millisecondsToMinutes = (milliseconds: number): number => {\n  return Math.floor((milliseconds / 1000) / 60);\n}\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\nconst allocationInfo = (props: any) => {\n  console.log(\"allocationInfo: \", props);\n\n  return (\n    <div className=\"AllocationInfo\">Next Meeting:\n      <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      <div>{props.by}</div>\n      <div>{props.title}</div>\n    </div>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\nconst allocationInfoBig = (props: any) => {\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">Current Meeting:\n        <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n        <div>{props.by}</div>\n        <div>{props.title}</div>\n        {props.attendees ? <div>Attendees: {props.attendees}</div> : null}\n        {props.agenda ? <div>Agenda: {props.agenda}</div> : null}\n        <div>Duration: {millisecondsToMinutes(props.to - props.from)} min</div>\n        <div>Time till end: {millisecondsToMinutes(props.to - props.time)} min</div>\n        <div>% Done: {100 - Math.ceil(100 * (props.to - props.time) / (props.to - props.from))}</div>\n      </div>\n    </>\n  );\n};\n\nexport default allocationInfoBig;\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\nimport icons from \"../../../assets/symbol-defs.svg\";\n\nconst Button = (props: any) => {\n  let buttonElement = <button>Not configured button</button>;\n\n  switch (props.type) {\n    case \"icon\":\n      buttonElement = (\n        <button className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.iconId}>\n          <svg className={`icon`}>\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n        </button>\n      );\n      break;\n    case \"icon-text\":\n      buttonElement = (\n        <button className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"text\":\n      buttonElement = (\n        <button type=\"button\" className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n  }\n  \n  return buttonElement;\n};\n\nexport default Button;\n","import React from \"react\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport \"./AllocationMenu.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst allocationMenu = (props: any) => {\n  console.log(\"Allocation menu:\", props.id);\n  console.log(\"Props: \", props);\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, 60000)}\n          iconId=\"icon-calendar-plus-o\"\n          label=\"Extend\"\n        />\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onFinishEarlyClick(props.currentAllocation.id)}\n          iconId=\"icon-calendar-times-o\"\n          label=\"Finish\"\n        />\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onAddMeetingClick(props.roomId)}\n          iconId=\"icon-calendar-o\"\n          label=\"Book now\"\n        />\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default allocationMenu;\n","import React from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\n\nconst roomStatusBorder = (props: any) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default roomStatusBorder;\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n  public extId?: string;\n  public extStatus?: string;\n\n  constructor(public title: string, public roomId: string, public from: number, public to: number) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    deleteAllocation: (state, action) => {\n      delete state.entity[action.payload.id];\n      // this operation can be costly\n      state.ids = state.ids.filter((id: string) => id !== action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload].to = Date.now() - 60000;\n      state.entity[action.payload].confirmed = true;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = Date.now() - 60000;\n    },\n    syncExternalAllocations: (state, action) => {\n      console.log(\"[AllocationSlice:syncExternalAllocations] : \", action);\n      // [TODO] Delete objects with extId && !confirmed && not in newAllocations\n      const newAllocations: Allocation[] = action.payload;\n      const expiredAllocations = Object.values(state.entity).filter((sa: Allocation) => !!sa.extId && !sa.confirmed && !newAllocations.find((a: Allocation) => a.extId === sa.extId));\n      for (const deleteAllocation of expiredAllocations) {\n        delete state.entity[deleteAllocation.id];\n        // this operation can be costly\n        state.ids = state.ids.filter((id: string) => id !== deleteAllocation.id);\n      };\n\n      // For each allocation in payload\n      for (const allocation of newAllocations) {\n        // check if exist entry with extId = id\n        const foundAllocation = Object.values(state.entity).find((sa: Allocation) => sa.extId === allocation.extId);\n        if (foundAllocation) {\n          // if exists entry then check the status !== confirmed, if yes delete, else update \n          if (allocation.extStatus !== \"confirmed\") {\n            delete state.entity[foundAllocation.id];\n            // this operation can be costly\n            state.ids = state.ids.filter((id: string) => id !== foundAllocation.id);\n          } else {\n            // update if meeting isn't yet confirmed \n            if (!foundAllocation.confirmed) {\n              foundAllocation.from = allocation.from;\n              foundAllocation.to = allocation.to;\n              foundAllocation.title = allocation.title;\n            }\n          }\n        } else {\n          // if no entry check status === confirmed, if yes add\n          if (allocation.extStatus === \"confirmed\") {\n            state.entity[allocation.id] = allocation;\n            state.ids.push(allocation.id);\n          }\n        }\n      }\n    }\n  },\n});\n\nexport default allocationSlice;\n","import { EquipmentStatus } from \"./EquipmentStatus\";\nimport { EquipmentType } from \"./EquipmentType\";\nimport { uuidv4 } from \"../shared/utility\";\n\nexport class Equipment {\n  public id: string;\n\n  constructor(public roomId: string, public type: EquipmentType, public status: EquipmentStatus) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: {\n    entity: {} as {[id: string]: Equipment },\n  },\n  reducers: {\n    addEquipment: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n    },\n    deleteEquipment: (state, action) => {\n      delete state.entity[action.payload.id];\n    },\n    toggleEquipment: (state, action) => {\n      console.log('toggle equipment: ', action);\n      const roomId = action.payload.roomId;\n      const type = action.payload.type;\n      const equipmentFound = Object.values(state.entity).filter((eq: Equipment) => eq.roomId === roomId && eq.type === type)[0];\n      if (equipmentFound) {\n        delete state.entity[equipmentFound.id];\n      } else {\n        const newEquipment = new Equipment(roomId, type, EquipmentStatus.Available);\n        state.entity[newEquipment.id] = {...newEquipment};\n      }\n    },\n    setStatus: (state, action) => {\n      state.entity[action.payload.id].status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment = state.entity[action.payload.id];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport Room from \"../models/Room\";\nimport { RoomStatus } from \"../models/RoomStatus\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\nimport timeView from \"../components/Room/TimeView/TimeView\";\nimport { getRoomEquipment } from \"./Equipment/EquipmentSelectors\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.entity[roomId],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\nexport const getSelectedRoomFutureAllocationsForNextNMinutes = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted, getDate],\n  (allocations: Allocation[], time: number) => allocations.filter((a: Allocation) => a.to < time + n * 60 * 1000),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomNextAllocationTimeToBegin = createSelector(\n  [getSelectedRoomNextAllocation, getDate],\n  (allocation: Allocation, time: number) => allocation.from - time,\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocationLength = createSelector(\n  [getSelectedRoomCurrentAllocation],\n  (allocation: Allocation) => allocation.to - allocation.from,\n);\n\nexport const getSelectedRoomCurrentAllocationTimeToEnd = createSelector(\n  [getSelectedRoomCurrentAllocations, getDate],\n  (allocation: Allocation, time: number) => allocation.to - time,\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => {\n    const equipmentArray: Equipment[] = Object.values(equipment.entity) || [];\n    return equipmentArray.filter((e: Equipment) => e.roomId === roomId);\n  }\n);\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Room from \"../../models/Room\";\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: {\n    entity: {} as {[id: string]: Room },\n    ids: [] as string[],\n  },\n  reducers: {\n    addRoom: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    changeRoomName: (state, action) => {\n      // [TODO] Temporary create room when it does not exists\n      if (!state.entity[action.payload.id]) {\n        state.entity[action.payload.id] = action.payload;\n        state.ids.push(action.payload.id);\n      } else {\n        state.entity[action.payload.id].name = action.payload.name;\n      }\n    }\n  },\n});\n\nexport default roomSlice;\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n    adminPanelOpen: false,\n    syncInProgress: false,\n    syncError: \"\"\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n    showAdminPanel: (state) => {\n      state.adminPanelOpen = true;\n      return state;\n    },\n    hideAdminPanel: (state) => {\n      state.adminPanelOpen = false;\n      return state;\n    },\n  },\n});\n\nexport default uiSlice;\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../shared/cacheManager\";\n\nconst saveStateStarted = createAction(\"crossslice/savestate/started\")\nconst saveStateSucceeded = createAction(\"crossslice/savestate/succeeded\")\nconst saveStateFailed = createAction(\"crossslice/savestate/failed\")\n\nconst loadStateStarted = createAction(\"crossslice/loadstate/started\")\nconst loadStateSucceeded = createAction(\"crossslice/loadstate/succeeded\")\nconst loadStateFailed = createAction(\"crossslice/loadstate/failed\")\n\nconst removeStateStarted = createAction(\"crossslice/removestate/started\")\nconst removeStateSucceeded = createAction(\"crossslice/removestate/succeeded\")\nconst removeStateFailed = createAction(\"crossslice/removestate/failed\")\n\nexport const saveState = () => (dispatch: any, getState: any) => {\n  dispatch(saveStateStarted());\n  return cacheManager.writeData(\"state\", getState()).then(\n    () => dispatch(saveStateSucceeded()),\n    (error) => dispatch(saveStateFailed(error))\n  );\n};\n\nexport const loadState = () => (dispatch: any) => {\n  dispatch(loadStateStarted());\n  return cacheManager.readData(\"state\").then(\n    (state) => dispatch(loadStateSucceeded(state)),\n    (error) => dispatch(loadStateFailed(error))\n  );\n};\n\nexport const removeState = () => (dispatch: any) => {\n  dispatch(removeStateStarted());\n  return cacheManager.removeData(\"state\").then(\n    (state) => {\n      dispatch(removeStateSucceeded(state));\n      dispatch(loadState());\n    },\n    (error) => dispatch(removeStateFailed(error))\n  );\n};\n\nexport const crossSliceReducer = (state: any, action: any) => {\n  let newState: any = {...state};\n  newState.ui = {...newState.ui};\n\n  switch (action.type) {\n    case removeStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case removeStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case removeStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case saveStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case saveStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case saveStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case loadStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case loadStateSucceeded.toString():\n      // [TODO] if new version arrive, state shuold be cleaned, or retrofitted.\n      newState = {...newState, ...action.payload};\n      // newState = {...action.payload};\n      newState.ui.time = Date.now();\n      newState.ui.syncInProgress = false;\n      return newState;\n    case loadStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    default:\n      return state;\n  }\n}\n","import localforage from \"localforage\";\n\nexport const writeData = (key: any, data: any) => localforage.setItem(key, data);\nexport const readData = (key: any) => localforage.getItem(key);\nexport const removeData = (key: any) => localforage.removeItem(key);\nexport const clear = () => localforage.clear();\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\nimport reduceReducers from \"reduce-reducers\";\nimport { crossSliceReducer } from \"./crossSliceReducer\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst combinedReducers = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n});\n\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer);\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import Allocation from \"../models/Allocation\";\nimport allocationSlice from \"../store/Allocation/AllocationSlice\";\nimport store from \"../store/store\";\n\nexport class GoogleApi {\n  public get gapi(): any {\n    return (window as any).gapi;\n  }\n\n  public sign: boolean = false;\n  public onLoadCallback: any;\n  public events: any = {};\n\n  private syncToken: string | null = null;\n\n  private readonly CONFIG: any;\n  private readonly roomId: string;\n\n  constructor(roomId: string, Config: any) {\n    this.roomId = roomId;\n    this.CONFIG = Config;\n    this.handleClientLoad();\n  }\n\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n  public handleClientLoad() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    script.onload = () => {\n      // this.gapi = window[\"gapi\"] as any;\n      // this.gapi.load(\"client:auth2\", this.initClient);\n      this.gapi.load(\"client:auth2\", () => this.initClient());\n    };\n    // gapi.load(\"client:auth2\", initClient);\n  }\n\n  public handleAuthClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signIn();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public handleSignoutClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signOut();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  /**\n   * Execute the callback function when a user is disconnected or connected with the sign status.\n   * @param callback\n   */\n  public listenSign(callback: (status: any) => void) {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().isSignedIn.listen(callback);\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public sync() {\n    // Construct the {@link Calendar.Events.List} request, but don\"t execute it yet.\n    // Calendar.Events.List request = client.events().list(\"primary\");\n    let request: any;\n\n    // Load the sync token stored from the last execution, if any.\n    if (this.syncToken == null) {\n      console.log(\"Performing full sync.\");\n      request = this.constructUpcomingEventsRequestFull();\n\n      // Set the filters you want to use during the full sync. Sync tokens aren\"t compatible with\n      // most filters, but you may want to limit your full sync to only a certain date range.\n      // In this example we are only syncing events up to a year old.\n      // Date oneYearAgo = Utils.getRelativeDate(java.util.Calendar.YEAR, -1);\n      // request.setTimeMin(new DateTime(oneYearAgo, TimeZone.getTimeZone(\"UTC\")));\n    } else {\n      console.log(\"Performing incremental sync.\");\n      request = this.constructUpcomingEventsRequestPartial();\n      request.syncToken = this.syncToken;\n    }\n\n    // Retrieve the events, one page at a time.\n    // let pageToken = null;\n    // let events = null;\n\n    // do {\n    // request.pageToken = pageToken;\n\n    // try {\n    const singleSync = (pageToken: string | null) => {\n      request.pageToken = pageToken;\n      console.log(\"request body: \", request);\n      this.gapi.client.calendar.events.list(request)\n        .then((response: any) => {\n          console.log(\"synced object: \", response.result);\n          console.log(\"events synced: \", response.result.items);\n          this.events = response.result;\n\n          if (this.events.items.length === 0) {\n            console.log(\"No new events to sync.\");\n          } else {\n            console.log(\"[TODO] syncEvents\");\n            this.syncEvents(this.events.items);\n\n          }\n\n          const nextPageToken = this.events.nextPageToken;\n          if (nextPageToken) {\n            console.log(\"new pageToken: \", nextPageToken);\n            singleSync(nextPageToken);\n          } else {\n            console.log(\"setting sync Token: \", this.events.nextSyncToken);\n            this.syncToken = this.events.nextSyncToken;\n            console.log(\"Sync complete.\");\n          }\n\n        })\n        .catch((err: any) => {\n          console.log(\"Sync Error: \", err);\n          if (err.statusCode === 410) {\n            // A 410 status code, \"Gone\", indicates that the sync token is invalid.\n            console.log(\"Invalid sync token, clearing event store and re-syncing.\");\n            this.syncToken = null;\n            this.events = [];\n            this.sync();\n          } else {\n            throw err;\n          }\n        });\n    };\n\n    singleSync(null);\n    // pageToken = events.getNextPageToken();\n    // } while (pageToken != null);\n\n    // Store the sync token from the last request to be used during the next execution.\n    // syncSettingsDataStore.set(SYNC_TOKEN_KEY, events.getNextSyncToken());\n    // this.syncToken = this.events.syncToken;\n  }\n\n  private syncEvents(events: any) {\n    const mappedEvents = events.map((event: any) => {\n      const a = new Allocation(\n        event.summary, \n        this.roomId,\n        new Date(event.start.dateTime).getTime(),\n        new Date(event.end.dateTime).getTime());\n      if (event.attendees) {\n        a.attendees = event.attendees.length;\n      }\n      a.extId = event.id;\n      a.extStatus = event.status;\n      return {...a};\n    })\n      // allocation.organizer.displayName\n      // status\n      // description\n      // attendees.length\n    store.dispatch(allocationSlice.actions.syncExternalAllocations(mappedEvents));\n\n    console.log(\"Google api. syncEvents items: \", events.length);\n  }\n\n  public listUpcomingEvents(maxResults: number = 100) {\n    console.log(\"[GoogleApi] list upcoming events\");\n    if (this.gapi) {\n      var today = new Date();\n      var tomorrow = new Date();\n      tomorrow.setDate(today.getDate() + 1);\n      return this.gapi.client.calendar.events.list({\n        calendarId: \"primary\",\n        maxResults,\n        orderBy: \"startTime\",\n        showDeleted: true,\n        singleEvents: true,\n        timeMin: today.toISOString(),\n        timeMax: tomorrow.toISOString()\n      }).then((response: any) => {\n        console.log(\"events: \", response.result.items);\n        this.syncEvents(response.result.items)\n        // for (const allocation of response.result.items) {\n        //   const a = new Allocation(allocation.summary, this.roomId,\n        //     new Date(allocation.start.dateTime).getTime(),\n        //     new Date(allocation.end.dateTime).getTime());\n\n        //   // allocation.organizer.displayName\n        //   // status\n        //   // description\n        //   // attendees.length\n        //   store.dispatch(allocationSlice.actions.addAllocation({ ...a }));\n        // }\n      });\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n      return false;\n    }\n  }\n\n  private constructUpcomingEventsRequestFull(calendarId = \"mobica.com_3331303731333131353835@resource.calendar.google.com\", maxResults = 10000) {\n    const today = new Date();\n    // const tomorrow = new Date();\n    // tomorrow.setDate(today.getDate() + 1);\n    // tomorrow.setTime(today.getTime() + 30000);\n    return {\n      calendarId,\n      // \"timeMax\": (tomorrow).toISOString(),\n      maxResults,\n      pageToken: null as (string | null),\n      singleEvents: true,\n      syncToken: null as (string | null),\n      timeMin: (today).toISOString(),\n    };\n  }\n\n  private constructUpcomingEventsRequestPartial(calendarId = \"mobica.com_3331303731333131353835@resource.calendar.google.com\", maxResults = 1000) {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    return {\n      calendarId,\n      maxResults,\n      pageToken: null as (string | null),\n      singleEvents: true,\n      syncToken: null as (string | null),\n    };\n  }\n\n  /**\n   * Auth to the google Api.\n   */\n  private initClient() {\n    this.gapi.client.init(this.CONFIG)\n      .then(() => {\n        // Listen for sign-in state changes.\n        this.gapi.auth2.getAuthInstance().isSignedIn.listen((e: any) => this.updateSigninStatus(e));\n        // Handle the initial sign-in state.\n        this.updateSigninStatus(this.gapi.auth2.getAuthInstance().isSignedIn.get());\n        if (this.onLoadCallback) {\n          this.onLoadCallback();\n        }\n      })\n      .catch((e: any) => {\n        console.log(e);\n      });\n  }\n\n  private updateSigninStatus(isSignedIn: boolean) {\n    if (isSignedIn) {\n      this.listUpcomingEvents(10);\n    }\n    this.sign = isSignedIn;\n  }\n\n}\n\n// const apiCalendar: GoogleApi = new GoogleApi();\nexport default GoogleApi;\n","import React, { ReactNode, SyntheticEvent } from \"react\";\nimport { GoogleApi } from \"../../providers/googleApi\";\n\n\n\nexport default class SignInButton extends React.Component<{roomId: string}, { signedIn: boolean }> {\n\n    // Client ID and API key from the Developer Console\n    private readonly CLIENT_ID = \"162342559011-rh81oauc2fut2lj6d03j4srkk3oeea2l.apps.googleusercontent.com\";\n    private readonly API_KEY = \"AIzaSyBe9hJXEgWHgkhAjqMEnxDtyCQLVCdEByI\";\n  \n    // Array of API discovery doc URLs for APIs used by the quickstart\n    private readonly DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    // Authorization scopes required by the API; multiple scopes can be\n    // included, separated by spaces.\n    private readonly SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n  \n    private readonly CONFIG = {\n      apiKey: this.API_KEY,\n      clientId: this.CLIENT_ID,\n      discoveryDocs: this.DISCOVERY_DOCS,\n      scope: this.SCOPES,\n    };\n\n  private apiCalendar: GoogleApi;\n  \n  \n  constructor(props: any) {\n    \n    super(props);\n    this.apiCalendar = new GoogleApi(props.roomId, this.CONFIG);\n\n    this.state = {signedIn: this.apiCalendar.sign};\n    this.handleItemClick = this.handleItemClick.bind(this);\n    this.apiCalendar.onLoadCallback = () => {\n      this.setState({signedIn: this.apiCalendar.sign});\n      this.apiCalendar.listenSign((status: any) => {\n        console.log(status);\n        this.setState({\n          signedIn: status,\n        });\n      });\n    };\n  }\n\n  public handleItemClick(event: SyntheticEvent<any>, name: string): void {\n    if (name === \"sign-in\") {\n      this.apiCalendar.handleAuthClick();\n    } else if (name === \"sign-out\") {\n      this.apiCalendar.handleSignoutClick();\n    }\n  }\n\n  public sync() {\n    this.apiCalendar.listUpcomingEvents();\n    // this.apiCalendar.sync();\n  }\n\n  public render(): ReactNode {\n    const signButton = !this.state.signedIn ?\n      <button onClick={(e) => this.handleItemClick(e, \"sign-in\")}>\n        sign-in\n      </button>\n      :\n      <button onClick={(e) => this.handleItemClick(e, \"sign-out\")}>\n        sign-out\n      </button>;\n\n    return (\n      <>\n        {signButton}\n        <button onClick={() => this.sync()}>\n          sync\n        </button>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./StatusBar.scss\";\nimport Button from \"../UI/Button/Button\";\nimport SignInButton from \"../Google/SignInButton\";\n\nconst StatusBar = (props: any) => {\n  return (\n    <div className=\"StatusBar\">\n      <div>This is StatusBar</div>\n      <SignInButton roomId={props.room.id} />\n      <Button type=\"icon-text\" onClick={props.onAdminClicked} iconId=\"icon-settings\" label=\"Admin\" />\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./TimeView.scss\";\n\nconst timeView = (props: any) => {\n\n  const mainRadius = 240;\n  const timeRadius = 225;\n  const canvasSize = 500;\n  const greenColor = \"rgb(139, 195, 74)\";\n  const redColor = \"rgb(255, 87, 34)\";\n\n  function drawCircleStroke(ctx: any, fromMinute: number, toMinute: number, color: string, radius?: number, lineWidth?: number) {\n    const clockRadius = radius || mainRadius;\n\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth || 4;\n    ctx.strokeStyle = color;\n\n    function dayMinuteToRadian(minute: number) {\n      const minuteRadian = 2 * Math.PI / (12 * 60);\n      const startingRadian = -0.5 * Math.PI;\n      return startingRadian + minute * minuteRadian;\n    }\n\n    const startAngle = dayMinuteToRadian(fromMinute);\n    const endAngle = dayMinuteToRadian(toMinute);\n\n    ctx.arc(canvasSize / 2, canvasSize / 2, clockRadius, startAngle, endAngle);\n    ctx.stroke();\n  }\n\n  function UTCToClockTime(epoch: number): number {\n    const date = new Date(0);\n    date.setUTCMilliseconds(epoch);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  function drawCurrentTime(ctx: any) {\n    const minutes = UTCToClockTime(props.time);\n    // Draw current time\n    drawCircleStroke(ctx, minutes - 3, minutes + 2, \"#000\", timeRadius, 8);\n\n    drawCircleStroke(ctx, minutes, minutes - 1, \"#000\", mainRadius, 10);\n    \n    // Draw available slots for whole day\n    drawCircleStroke(ctx, minutes - 60, minutes - 120, greenColor, mainRadius, 6);\n\n    // Draw busy slots for the next 11 hours\n    props.allocations\n      .map((a: any) => ({from: UTCToClockTime(a.from), to: UTCToClockTime(a.to)}))\n      .forEach((e: any) => drawCircleStroke(ctx, e.from, e.to, redColor, mainRadius, 12));\n  }\n\n  let canvas: any = React.createRef();\n  // [TODO] This component need to be smart component and this timeout then can be removed\n  setTimeout(function () {\n    if (canvas.current && canvas.current.getContext) {\n      const ctx = canvas.current.getContext(\"2d\");\n\n      canvas.current.width = canvasSize;\n      canvas.current.height = canvasSize;\n      drawCurrentTime(ctx);\n    }\n  }, 10)\n\n  return (\n    <div className=\"TimeView\">\n      <span>{formatTimeStamp(props.time)}</span>\n      <canvas className=\"TimeViewCanvas\" id=\"canvas\" ref={canvas}></canvas>\n    </div>\n  );\n};\n\nexport default timeView;\n","import React from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst equipmentBar = (props: { equipment: Equipment[], onChangeStatusClick: (e: Equipment) => void }) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return <Button\n      key={e.type}\n      type=\"icon\"\n      onClick={() => props.onChangeStatusClick(e)}\n      iconId={`icon-${e.type.toLowerCase()}`}\n      btnClassName={`btn_${e.status.toLowerCase()}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default equipmentBar;\n","import React from \"react\";\nimport EquipmentBar from \"./EquipmentBar/EquipmentBar\";\nimport \"./Header.scss\";\n\nconst Header = (props: any) => {\n  return (\n    <div className=\"Header\">\n      <div>{props.room.name}</div>\n      <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick}/>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport \"./Backdrop.scss\";\n\nconst Backdrop = () => {\n  return (\n    <div className=\"Backdrop\"/>\n  )\n}\n\nexport default Backdrop;\n","import React from \"react\";\nimport \"./Popup.scss\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Popup = (props: any) => {\n  const classes = [\"Popup\"];\n  if (props.open) {\n    classes.push(\"open\");\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <Backdrop/>\n      <div className=\"content\">\n        <Button\n          type=\"icon-text\"\n          onClick={props.onCloseClick}\n          iconId=\"icon-close\"\n          label=\"Close\"\n        />\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n\nexport const getAdminPanelOpen = createSelector(\n  [\"ui.adminPanelOpen\"],\n);\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Room {\n  public id: string;\n\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n    this.id = uuidv4();\n  }\n}\n","import React from \"react\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\n\nconst EquipmentAdmin = (props: any) => {\n  return (\n    <>\n      <div>This is equipment admin</div>\n      {Object.values(EquipmentType).map((type: any) => <div key={type}><button onClick={() => props.onEquipmentToggleClick(props.roomId, type)}>{type}</button></div>)};\n      <div> test</div>\n    </>\n  );\n};\n\nexport default EquipmentAdmin;\n","import React, { ChangeEvent, Component, FormEvent } from \"react\";\nimport Room from \"../../../models/Room\";\nimport Button from \"../../UI/Button/Button\";\nimport EquipmentAdmin from \"../../Equipment/EquipmentAdmin/EquipmentAdmin\";\nimport { Equipment } from \"../../../models/Equipment\";\n\ninterface IAdminPanelProps {\n  onSettingsSaved: (room: Room) => void;\n  onEquipmentToggleClick: ({}) => void;\n  onSettingsClear: () => void;\n}\n\ninterface IAdminPanelState {\n  room: Room;\n}\n\nclass AdminPanel extends Component<IAdminPanelProps, IAdminPanelState> {\n  private selectedRoom: Room;\n  private roomEquipment: Equipment[];\n\n  constructor(props: any) {\n    super(props)\n    this.selectedRoom = props.selectedRoom;\n    this.roomEquipment = props.roomEquipment;\n\n    if (!this.selectedRoom) {\n      this.selectedRoom = {... new Room(\"Conference Room 1\")};\n    }\n\n    this.state = {\n      room: {... this.selectedRoom},\n    };\n}\n\n  submitSettings(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    this.props.onSettingsSaved(this.state.room);\n  };\n\n  clearSettings() {\n    this.props.onSettingsClear();\n  }\n\n  inputChangedHandler(event: ChangeEvent<HTMLInputElement>) {\n    console.log(event);\n    const newState = {...this.state};\n    newState.room.name = event.target.value;\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>This is admin panel</h3>\n        <form onSubmit={(e) => this.submitSettings(e)}>\n          <div>\n            <span>General</span>\n            <label>Room name</label>\n            <input\n              type=\"text\"\n              placeholder=\"Room Name\" \n              value={this.state.room.name}\n              onChange={(e) => this.inputChangedHandler(e)}\n            />\n          </div>\n          <div>\n            <EquipmentAdmin roomId={this.state.room.id} equipment={this.roomEquipment} onEquipmentToggleClick={this.props.onEquipmentToggleClick}/>\n          </div>\n\n          <Button\n            type=\"icon-text\"\n            iconId=\"icon-save\"\n            label=\"Save Settings\"\n          />\n\n          \n        </form>\n        <Button\n            type=\"text\"\n            label=\"Clear Settings\"\n            onClick={() => this.clearSettings()}\n          />\n      </div>\n    );\n  }\n}\n\nexport default AdminPanel;\n","import { connect } from \"react-redux\";\nimport * as selectors from \"../../store/selectors\";\nimport roomSlice from \"../../store/Room/RoomSlice\";\nimport Room from \"../../models/Room\";\nimport {saveState, removeState} from \"../../store/crossSliceReducer\";\nimport uiSlice from \"../../store/UI/UISlice\";\nimport AdminPanel from \"../../components/Admin/AdminPanel/AdminPanel\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\n\nconst mapStateToProps = (state: any) => {\n  const selectedRoom = selectors.getSelectedRoom(state);\n  const roomEquipment = selectors.getSelectedRoomEquipment(state);\n\n  return {\n    selectedRoom,\n    roomEquipment,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSettingsSaved: (room: Room) => {\n      dispatch(roomSlice.actions.changeRoomName(room));\n      // [TODO] temporary solution, need to be changed when multiple room management will be added\n      dispatch(uiSlice.actions.setSelectedRoomId(room.id));\n      dispatch(saveState());\n    },\n    onEquipmentToggleClick: (roomId: string, type: string) => {\n      console.log(\"onEquipmentToggleClick\");\n      dispatch(equipmentSlice.actions.toggleEquipment({roomId, type}));\n    },\n    onSettingsClear: () => {\n      dispatch(removeState());\n    }\n  };\n};\n\nconst Admin = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AdminPanel);\n\nexport default Admin;\n","import React from \"react\";\nimport AllocationInfo from \"../../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../../Allocation/AllocationMenu/AllocationMenu\";\nimport RoomStatusBorder from \"../RoomStatusBorder/RoomStatusBorder\";\nimport StatusBar from \"../../StatusBar/StatusBar\";\nimport TimeView from \"../TimeView/TimeView\";\nimport \"./RoomView.scss\";\nimport Header from \"../../Header/Header\";\nimport Popup from \"../../UI/Popup/Popup\";\nimport Admin from \"../../../containers/Admin/Admin\";\n\nconst roomView = (props: any) => {\n  // console.log(\"roomView: \", props);\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <Admin/>;\n  }\n\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  // [TODO] Overlapping events, if current event is overlapping next\n  if (props.currentAllocation) {\n    currentAllocationTag =\n    <AllocationInfoBig time={props.time}\n      {...props.currentAllocation}\n    />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo time={props.time} {...props.nextAllocation}/>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <Header time={props.time} {...props}/>\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <TimeView time={props.time} allocations={props.clockAllocations} />\n        <div className=\"Separator\"/>\n        <div className=\"RightSection\">\n          <div className=\"Allocations\">\n            {currentAllocationTag}\n            {nextAllocationTag}\n          </div>\n          <AllocationMenu\n            currentAllocation={props.currentAllocation}\n            nextAllocation={props.nextAllocation}\n            roomStatus={props.roomStatus}\n            roomId={props.room.id}\n            onFinishEarlyClick={props.onFinishEarlyClick}\n            onExtendMeetingClick={props.onExtendMeetingClick}\n            onConfirmMeetingClick={props.onConfirmMeetingClick}\n            onAddMeetingClick={props.onAddMeetingClick}\n          />\n        </div>\n      </RoomStatusBorder>\n      <StatusBar room={props.room} onAdminClicked={props.onAdminClick}/>\n      <Popup open={props.adminPanelOpen} onCloseClick={props.onPopupCloseClick}>\n        <Admin></Admin>\n      </Popup>\n    </div>\n  );\n};\n\nexport default roomView;\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/Room/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getDate, getAdminPanelOpen } from \"../../store/UI/UISelectors\";\nimport uiSlice from \"../../store/UI/UISlice\";\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  // console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const adminPanelOpen = getAdminPanelOpen(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n  // console.log(\"equipment: \", equipment);\n\n  // 2 min\n  const roomStatus = selectors.getSelectedRoomStatus(120000)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocation(state);\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  // get allocations for next 10 hours\n  const clockMaxTime = 10 * 60;\n  const clockAllocations = selectors.getSelectedRoomFutureAllocationsForNextNMinutes(clockMaxTime)(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n    adminPanelOpen,\n    clockAllocations,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAdminClick: () => {\n      dispatch(uiSlice.actions.showAdminPanel());\n    },\n    onPopupCloseClick: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onAddMeetingClick: (roomId: string) => {\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", roomId, Date.now() - 60000, Date.now() + 50000), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id}));\n    },\n    onExtendMeetingClick: (id: string, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, amount}));\n    },\n    onFinishEarlyClick: (id: string) => {\n      dispatch(allocationSlice.actions.finishEarly(id));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Allocation from \"../models/Allocation\";\nimport Room from \"../models/Room\";\nimport store from \"./store\";\n\nimport { Equipment } from \"../models/Equipment\";\nimport { EquipmentStatus } from \"../models/EquipmentStatus\";\nimport { EquipmentType } from \"../models/EquipmentType\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport { getSelectedRoomAllocations, getSelectedRoomCurrentAllocations,\n   getSelectedRoomEquipment, getSelectedRoomNextAllocation, isSelectedRoomOccupied } from \"./selectors\";\nimport { getSelectedRoomId } from \"./UI/UISelectors\";\nimport uiSlice from \"./UI/UISlice\";\nimport { loadState, saveState } from \"./crossSliceReducer\";\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  const startState = store.getState();\n  console.log(\"[Start] startState:\", startState);\n  store.dispatch(loadState());\n\n  // [TODO] once a day clean old entries\n  setInterval(() => {\n    console.log(\"[Start] Interval\");\n    store.dispatch(uiSlice.actions.setTime(Date.now()));\n    store.dispatch(saveState());\n  }, 1000 * 60);\n\n  \n  // store.subscribe(() => {\n  //   console.log(store.getState());\n  // });\n  \n  const initData = () => {\n    console.log('[Start] init data');\n    // const usedRoom = new Room(\"Supernova\");\n    // store.dispatch(roomSlice.actions.addRoom({...usedRoom}));\n    // store.dispatch(roomSlice.actions.addRoom({...new Room(\"Room 2\")}));\n\n    // store.dispatch(uiSlice.actions.setSelectedRoomId(usedRoom.id));\n\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1a\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1b\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Current 1c\", usedRoom.id, Date.now() - 120000 , Date.now() + 50000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Next 1d\", usedRoom.id, Date.now() + 110000, Date.now() + 480000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1e\", usedRoom.id, Date.now() + 1000000, Date.now() + 1200000)}));\n\n    // store.dispatch(allocationSlice.actions.addAllocation(\n    //   {...new Allocation(\"Test allocation 2a\", \"Room 2\", Date.now() - 1200000, Date.now() - 1200000)}));\n\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Projector, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Skype, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // // store.dispatch(equipmentSlice.actions.changeStatus(\n    // //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // const roomName1 = getSelectedRoomId(store.getState());\n    // const roomAllocations = getSelectedRoomAllocations(store.getState());\n    // const roomEquipment = getSelectedRoomEquipment(store.getState());\n\n    // const roomOccupied = isSelectedRoomOccupied(store.getState());\n    // const currentAllocation = getSelectedRoomCurrentAllocations(store.getState())[0];\n    // const nextAllocation = getSelectedRoomNextAllocation(store.getState());\n\n    // // const timeInterval = selectDateTime();\n    // // console.log('Time: ', selectDateTime(store.getState()));\n    // // console.log('Occupied2: ', roomOccupied2);\n    // // const roomOccupied2 = isSelectedRoomOccupied2(store.getState());\n    // console.log(\"Name: \", roomName1);\n    // console.log(\"Allocations: \", roomAllocations);\n    // console.log(\"Occupied: \", roomOccupied);\n    // console.log(\"Equipment: \", roomEquipment);\n    // console.log(\"Current allocation: \", currentAllocation);\n    // console.log(\"Next allocation: \", nextAllocation);\n  }\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App/App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}