{"version":3,"sources":["assets/symbol-defs.svg","models/RoomStatus.ts","store/Allocation/AllocationSelectors.ts","store/selectors.ts","models/EquipmentType.ts","store/UI/UISelectors.ts","store/Room/RoomSlice.ts","store/crossSliceReducer.ts","shared/cacheManager.ts","store/UI/UISlice.ts","shared/utility.ts","models/Room.ts","components/UI/Button/Button.tsx","models/EquipmentStatus.ts","components/Admin/EquipmentAdmin/EquipmentAdmin.tsx","components/UI/Input/Input.tsx","components/Google/SignInButton.tsx","models/Allocation.ts","store/Allocation/AllocationSlice.ts","models/Equipment.ts","store/Equipment/EquipmentSlice.ts","store/store.ts","providers/googleApi.ts","components/Admin/AdminPanel/AdminPanel.tsx","containers/Admin/Admin.tsx","components/Header/EquipmentBar/EquipmentBar.tsx","components/Room/RoomStatusBorder/RoomStatusBorder.tsx","components/Header/Header.tsx","components/Allocation/AllocationInfo/AllocationInfo.tsx","components/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","components/Allocation/AllocationMenu/AllocationMenu.tsx","components/Allocation/AllocationsView/AllocationsView.tsx","components/Room/TimeView/TimeView.tsx","components/Room/RoomViewContent/RoomViewContent.tsx","components/Footer/StatusBar/StatusBar.tsx","components/Footer/Footer.tsx","components/UI/Backdrop/Backdrop.tsx","components/UI/Popup/Popup.tsx","components/Room/RoomView/RoomView.tsx","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","store/start.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RoomStatus","n","EquipmentType","getDate","createSelector","getSelectedRoomId","getAdminPanelOpen","getSyncSettings","getSelectedRoom","roomId","rooms","entity","getSelectedRoomAllocations","allocation","Object","values","filter","a","getSelectedRoomCurrentAllocations","date","allocations","from","to","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getSelectedRoomNextAllocation","slice","getSelectedRoomCurrentAllocation","time","getSelectedRoomEquipment","length","equipment","e","roomSlice","createSlice","initialState","ids","reducers","addRoom","state","action","payload","id","push","changeRoomName","name","saveStateStarted","createAction","saveStateSucceeded","saveStateFailed","loadStateStarted","loadStateSucceeded","loadStateFailed","removeStateStarted","removeStateSucceeded","removeStateFailed","saveState","dispatch","getState","key","data","localforage","setItem","then","error","loadState","getItem","removeState","removeItem","uiSlice","selectedRoomId","Date","now","adminPanelOpen","syncSettings","syncInProgress","syncError","setSelectedRoomId","setTime","showAdminPanel","hideAdminPanel","setSyncSettings","formatTimeStamp","timeStamp","toLocaleTimeString","hour","minute","hour12","millisecondsToMinutes","milliseconds","Math","ceil","roundEpochToMinutes","epoch","updateObject","oldObject","updatedProperties","objectSpread","checkValidity","value","rules","isValid","required","trim","minLength","maxLength","isEmail","test","isNumeric","uuidv4","replace","c","r","random","toString","Room","classCallCheck","this","capacity","location","Button","props","getButtonType","btnType","buttonElement","react_default","createElement","type","className","btnClassName","onClick","aria-label","iconId","label","style","concat","xlinkHref","icons","EquipmentStatus","EquipmentAdmin","map","onEquipmentToggleClick","Input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","assign","join","elementConfig","onChange","changed","options","option","displayValue","SignInButton","_this","console","log","possibleConstructorReturn","getPrototypeOf","call","apiCalendar","googleApi","signedIn","sign","handleItemClick","bind","assertThisInitialized","onLoadCallback","setState","listenSign","status","handleAuthClick","event","handleSignoutClick","_this2","setInterval","listUpcomingEvents","initClient","_this3","signButton","Fragment","sync","React","Component","Allocation","title","confirmed","by","attendees","agenda","extId","extStatus","allocationSlice","addAllocation","deleteAllocation","finishEarly","extendMeeting","amount","confirmMeeting","syncExternalAllocations","newAllocations","expiredAllocations","sa","find","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","foundAllocation","_iterator2","Equipment","equipmentSlice","addEquipment","deleteEquipment","toggleEquipment","equipmentFound","eq","newEquipment","Available","setStatus","changeStatus","newStatus","Broken","NotAvailable","combinedReducers","combineReducers","ui","reducer","room","rootReducer","reduceReducers","newState","store","configureStore","GoogleApi","apiKey","clientId","calendarId","events","syncToken","DISCOVERY_DOCS","SCOPES","CONFIG","discoveryDocs","scope","handleClientLoad","createClass","get","window","gapi","script","document","src","body","appendChild","onload","load","auth2","getAuthInstance","signIn","signOut","callback","isSignedIn","listen","request","constructUpcomingEventsRequestFull","constructUpcomingEventsRequestPartial","singleSync","pageToken","client","calendar","list","response","result","items","syncEvents","nextPageToken","nextSyncToken","catch","statusCode","mappedEvents","summary","start","dateTime","getTime","end","organizer","displayName","actions","_this4","maxResults","arguments","today","tomorrow","setDate","orderBy","showDeleted","singleEvents","timeMin","toISOString","timeMax","_this5","init","updateSigninStatus","AdminPanel","formData","roomName","placeholder","validation","valid","clientID","calendarID","formIsValid","selectedRoom","roomEquipment","submitSettings","preventDefault","formElementIdentifier","newSettings","onSettingsSaved","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedFormData","defineProperty","changeConfig","onSettingsClear","onCancel","formElementsArray","config","form","onSubmit","formElement","UI_Input_Input","Admin_EquipmentAdmin_EquipmentAdmin","SignInButton_SignInButton","UI_Button_Button","clearSettings","cancel","Admin","connect","selectors","settings","equipmentBar","onChangeStatusClick","toLowerCase","mapEquipmentToButton","RoomStatusBorder","classNames","roomStatus","children","Header","Room_RoomStatusBorder_RoomStatusBorder","toLocaleDateString","EquipmentBar_EquipmentBar","allocationInfo","startsIn","floor","allocationInfoBig","timeTillEnd","duration","timeInMeeting","round","allocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","currentAllocation","awaiting","onConfirmMeetingClick","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","AllocationsView","currentAllocationTag","AllocationInfoBig_AllocationInfoBig","nextAllocationTag","AllocationInfo_AllocationInfo","AllocationMenu_AllocationMenu","Admin_Admin","timeView","mainRadius","canvasSize","greenColor","redColor","drawCircleStroke","ctx","fromMinute","toMinute","color","radius","lineWidth","clockRadius","dayMinuteToRadian","minuteRadian","PI","beginPath","strokeStyle","startAngle","endAngle","arc","stroke","UTCToClockTime","setUTCMilliseconds","getHours","getMinutes","capLimitMax","currentTime","limitTime","maxHourRange","min","canvas","createRef","setTimeout","current","getContext","width","height","minutes","minHourRange","max","forEach","i","drawCurrentTime","ref","RoomViewContent","TimeView_TimeView","clockAllocations","Allocation_AllocationsView_AllocationsView","StatusBar","onAdminClicked","Footer","Footer_StatusBar_StatusBar","onAdminClick","Backdrop","Popup","classes","open","UI_Backdrop_Backdrop","onCloseClick","roomView","components_Header_Header","Room_RoomViewContent_RoomViewContent","components_Footer_Footer","UI_Popup_Popup","onPopupCloseClick","SelectedRoom","ownProps","threshold","occupied","free","RoomView","App","SelectedRoom_SelectedRoom","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","startState","ReactDOM","render","es","containers_App_App","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6918d619.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symbol-defs.119ddbe0.svg\";","export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\n\nexport const getRoomAllocations = (id: string) => createSelector(\n  [\"allocation\"],\n  (allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === id);\n  },\n);\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport Room from \"../models/Room\";\nimport { RoomStatus } from \"../models/RoomStatus\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\nimport timeView from \"../components/Room/TimeView/TimeView\";\nimport { getRoomEquipment } from \"./Equipment/EquipmentSelectors\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.entity[roomId],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\n// [TODO] not only future meeting should be given but also meetings date - 60 min\nexport const getSelectedRoomFutureAllocationsForNextNMinutes = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted, getDate],\n  (allocations: Allocation[], time: number) => allocations.filter((a: Allocation) => a.to < time + n * 60 * 1000),\n);\n\n// Gives allocations that end after from, but also end before to\nexport const getSelectedRoomAllocationsFromTo = (from: number, to: number) => createSelector(\n  [getSelectedRoomAllocations],\n  (allocations: Allocation[]) => allocations.filter((a: Allocation) => a.to > from && a.from < to),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomNextAllocationTimeToBegin = createSelector(\n  [getSelectedRoomNextAllocation, getDate],\n  (allocation: Allocation, time: number) => allocation.from - time,\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocationLength = createSelector(\n  [getSelectedRoomCurrentAllocation],\n  (allocation: Allocation) => allocation.to - allocation.from,\n);\n\nexport const getSelectedRoomCurrentAllocationTimeToEnd = createSelector(\n  [getSelectedRoomCurrentAllocations, getDate],\n  (allocation: Allocation, time: number) => allocation.to - time,\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => {\n    // [TODO] Bug on the production\n    if (!equipment.entity) {\n      return [];\n    }\n\n    const equipmentArray: Equipment[] = Object.values(equipment.entity) || [];\n    return equipmentArray.filter((e: Equipment) => e.roomId === roomId);\n  }\n);\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n\nexport const getAdminPanelOpen = createSelector(\n  [\"ui.adminPanelOpen\"],\n);\n\nexport const getSyncSettings = createSelector(\n  [\"ui.syncSettings\"],\n);\n","import { createSlice } from \"redux-starter-kit\";\nimport Room from \"../../models/Room\";\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: {\n    entity: {} as {[id: string]: Room },\n    ids: [] as string[],\n  },\n  reducers: {\n    addRoom: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    changeRoomName: (state, action) => {\n      // [TODO] Temporary create room when it does not exists\n      if (!state.entity[action.payload.id]) {\n        state.entity[action.payload.id] = action.payload;\n        state.ids.push(action.payload.id);\n      } else {\n        state.entity[action.payload.id].name = action.payload.name;\n      }\n    }\n  },\n});\n\nexport default roomSlice;\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../shared/cacheManager\";\n\nconst saveStateStarted = createAction(\"crossslice/savestate/started\")\nconst saveStateSucceeded = createAction(\"crossslice/savestate/succeeded\")\nconst saveStateFailed = createAction(\"crossslice/savestate/failed\")\n\nconst loadStateStarted = createAction(\"crossslice/loadstate/started\")\nconst loadStateSucceeded = createAction(\"crossslice/loadstate/succeeded\")\nconst loadStateFailed = createAction(\"crossslice/loadstate/failed\")\n\nconst removeStateStarted = createAction(\"crossslice/removestate/started\")\nconst removeStateSucceeded = createAction(\"crossslice/removestate/succeeded\")\nconst removeStateFailed = createAction(\"crossslice/removestate/failed\")\n\nexport const saveState = () => (dispatch: any, getState: any) => {\n  dispatch(saveStateStarted());\n  return cacheManager.writeData(\"state\", getState()).then(\n    () => dispatch(saveStateSucceeded()),\n    (error) => dispatch(saveStateFailed(error))\n  );\n};\n\nexport const loadState = () => (dispatch: any) => {\n  dispatch(loadStateStarted());\n  return cacheManager.readData(\"state\").then(\n    (state) => dispatch(loadStateSucceeded(state)),\n    (error) => dispatch(loadStateFailed(error))\n  );\n};\n\nexport const removeState = () => (dispatch: any) => {\n  dispatch(removeStateStarted());\n  return cacheManager.removeData(\"state\").then(\n    (state) => {\n      dispatch(removeStateSucceeded(state));\n      dispatch(loadState());\n    },\n    (error) => dispatch(removeStateFailed(error))\n  );\n};\n\nexport const crossSliceReducer = (state: any, action: any) => {\n  let newState: any = {...state};\n  newState.ui = {...newState.ui};\n\n  switch (action.type) {\n    case removeStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case removeStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case removeStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case saveStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case saveStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case saveStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case loadStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case loadStateSucceeded.toString():\n      // [TODO] if new version arrive, state shuold be cleaned, or retrofitted.\n      newState = {...newState, ...action.payload};\n      // newState = {...action.payload};\n      newState.ui.time = Date.now();\n      newState.ui.syncInProgress = false;\n      return newState;\n    case loadStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    default:\n      return state;\n  }\n}\n","import localforage from \"localforage\";\n\nexport const writeData = (key: any, data: any) => localforage.setItem(key, data);\nexport const readData = (key: any) => localforage.getItem(key);\nexport const removeData = (key: any) => localforage.removeItem(key);\nexport const clear = () => localforage.clear();\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n    adminPanelOpen: false,\n    syncSettings: {},\n    syncInProgress: false,\n    syncError: \"\"\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n    showAdminPanel: (state) => {\n      state.adminPanelOpen = true;\n      return state;\n    },\n    hideAdminPanel: (state) => {\n      state.adminPanelOpen = false;\n      return state;\n    },\n    setSyncSettings: (state, action) => {\n      state.syncSettings = action.payload;\n      return state;\n    }\n  },\n});\n\nexport default uiSlice;\n","export const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\n\nexport const millisecondsToMinutes = (milliseconds: number): number => {\n  return Math.ceil((milliseconds / 1000) / 60);\n}\n\nexport const roundEpochToMinutes = (epoch: number): number => {\n  return epoch - (epoch % (1000 * 60));\n}\n\nexport const updateObject = (oldObject: any, updatedProperties: any) => {\n  return {\n      ...oldObject,\n      ...updatedProperties,\n  };\n};\n\nexport const checkValidity = ( value: any, rules: any ) => {\n  let isValid = true;\n  if ( !rules ) {\n      return true;\n  }\n\n  if ( rules.required ) {\n      isValid = value.trim() !== '' && isValid;\n  }\n\n  if ( rules.minLength ) {\n      isValid = value.length >= rules.minLength && isValid\n  }\n\n  if ( rules.maxLength ) {\n      isValid = value.length <= rules.maxLength && isValid\n  }\n\n  if ( rules.isEmail ) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test( value ) && isValid\n  }\n\n  if ( rules.isNumeric ) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test( value ) && isValid\n  }\n\n  return isValid;\n}\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Room {\n  public id: string;\n\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n    this.id = uuidv4();\n  }\n}\n","import React from \"react\";\nimport \"./Button.scss\";\nimport icons from \"../../../assets/symbol-defs.svg\";\n\nconst Button = (props: any) => {\n\n  const getButtonType = () => props.btnType || \"button\"\n\n  let buttonElement = <button type={getButtonType()} className={props.btnClassName}  onClick={props.onClick} aria-label={props.iconId}>{props.label}</button>;\n\n  switch (props.style) {\n    case \"icon\":\n      buttonElement = (\n        <button type={getButtonType()} className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.iconId}>\n          <svg className={`icon`}>\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n        </button>\n      );\n      break;\n    case \"icon-text\":\n      buttonElement = (\n        <button type={getButtonType()} className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"text\":\n      buttonElement = (\n        <button type={getButtonType()} className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n  }\n  \n  return buttonElement;\n};\n\nexport default Button;\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\nimport \"./EquipmentAdmin.scss\";\n\nconst EquipmentAdmin = (props: any) => {\n  return (\n    <div className=\"EquipmentAdmin\">\n      <label>Room Equipment</label>\n      {Object.values(EquipmentType).map((type: any) => <div key={type}><button type=\"button\" onClick={() => props.onEquipmentToggleClick(props.roomId, type)}>{type}</button></div>)}\n    </div>\n  );\n};\n\nexport default EquipmentAdmin;\n","import React from \"react\";\n\nimport \"./Input.scss\";\n\nconst Input = ( props: any ) => {\n    let inputElement = null;\n    const inputClasses = [\"InputElement\"];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(\"Invalid\");\n    }\n\n    switch ( props.elementType ) {\n        case ( \"input\" ):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} \n            />;\n            break;\n        case ( \"textarea\" ):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} \n            />;\n            break;\n        case ( \"select\" ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map((option: any) => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={\"Input\"}>\n            <label className={\"Label\"}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default Input;","import React, { ReactNode, SyntheticEvent } from \"react\";\nimport { GoogleApi } from \"../../providers/googleApi\";\n\n\n\nexport default class SignInButton extends React.Component<{roomId: string, googleApi: any}, { signedIn: boolean }> {\n\n    // Client ID and API key from the Developer Console\n    // TODO move to state and admin panel\n    // private readonly CLIENT_ID = \"162342559011-rh81oauc2fut2lj6d03j4srkk3oeea2l.apps.googleusercontent.com\";\n    // private readonly API_KEY = \"AIzaSyBe9hJXEgWHgkhAjqMEnxDtyCQLVCdEByI\";\n  \n    // private readonly CONFIG = {\n    //   apiKey: this.API_KEY,\n    //   clientId: this.CLIENT_ID,\n    //   calendarId: \"primary\",\n    // };\n\n  private apiCalendar: GoogleApi;\n  \n  \n  constructor(props: any) {\n    console.log(\"[SignInButton] constructor\");\n    super(props);\n    this.apiCalendar = this.props.googleApi; \n\n    this.state = {signedIn: this.apiCalendar.sign};\n    this.handleItemClick = this.handleItemClick.bind(this);\n    this.apiCalendar.onLoadCallback = () => {\n      this.setState({signedIn: this.apiCalendar.sign});\n\n      this.apiCalendar.listenSign((status: any) => {\n        console.log(status);\n        this.setState({\n          signedIn: status,\n        });\n      });\n\n      if (!this.apiCalendar.sign) {\n        this.apiCalendar.handleAuthClick();\n      }\n    };\n  }\n  componentDidMount() {\n    console.log(\"[SignInButton] componentDidMount\");\n  }\n\n\n  public handleItemClick(event: SyntheticEvent<any>, name: string): void {\n    if (name === \"sign-in\") {\n      this.apiCalendar.handleAuthClick();\n    } else if (name === \"sign-out\") {\n      this.apiCalendar.handleSignoutClick();\n    }\n  }\n\n  public sync() {\n    setInterval(() => {\n      console.log(\"[SignIn button] syncing events in interval\");\n      this.apiCalendar.listUpcomingEvents();\n    }, 60 * 1000);\n    // this.apiCalendar.sync();\n  }\n\n  public initClient() {\n    this.apiCalendar.initClient();\n  }\n\n  public render(): ReactNode {\n    const signButton = !this.state.signedIn ?\n      <button type=\"button\" onClick={(e) => this.handleItemClick(e, \"sign-in\")}>\n        sign-in\n      </button>\n      :\n      <button type=\"button\" onClick={(e) => this.handleItemClick(e, \"sign-out\")}>\n        sign-out\n      </button>;\n\n    return (\n      <>\n        <button type=\"button\" onClick={() => this.initClient()}>\n          init client\n        </button>\n        {signButton}\n        <button type=\"button\" onClick={() => this.sync()}>\n          sync\n        </button>\n      </>\n    );\n  }\n}\n","import { uuidv4, roundEpochToMinutes } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n  public extId?: string;\n  public extStatus?: string;\n\n  // From and to are epochs rounded to minutes\n  constructor(public title: string, public roomId: string, public from: number, public to: number) {\n    this.id = uuidv4();\n    this.from = roundEpochToMinutes(this.from);\n    this.to = roundEpochToMinutes(this.to);\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\nimport { roundEpochToMinutes } from \"../../shared/utility\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    deleteAllocation: (state, action) => {\n      delete state.entity[action.payload.id];\n      // this operation can be costly\n      state.ids = state.ids.filter((id: string) => id !== action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload.id].to = roundEpochToMinutes(action.payload.time);\n      state.entity[action.payload.id].confirmed = true;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = roundEpochToMinutes(action.payload.time);\n    },\n    // [TODO] sync adhoc meetings to external source\n    syncExternalAllocations: (state, action) => {\n      console.log(\"[AllocationSlice:syncExternalAllocations] : \", action);\n      // [TODO] Delete objects with extId && !confirmed && not in newAllocations\n      const newAllocations: Allocation[] = action.payload;\n      const expiredAllocations = Object.values(state.entity).filter((sa: Allocation) => !!sa.extId && !sa.confirmed && !newAllocations.find((a: Allocation) => a.extId === sa.extId));\n      for (const deleteAllocation of expiredAllocations) {\n        delete state.entity[deleteAllocation.id];\n        // this operation can be costly\n        state.ids = state.ids.filter((id: string) => id !== deleteAllocation.id);\n      };\n\n      // For each allocation in payload\n      for (const allocation of newAllocations) {\n        // check if exist entry with extId = id\n        const foundAllocation = Object.values(state.entity).find((sa: Allocation) => sa.extId === allocation.extId);\n        if (foundAllocation) {\n          // if exists entry then check the status !== confirmed, if yes delete, else update \n          if (allocation.extStatus !== \"confirmed\") {\n            delete state.entity[foundAllocation.id];\n            // this operation can be costly\n            state.ids = state.ids.filter((id: string) => id !== foundAllocation.id);\n          } else {\n            // update if meeting isn't yet confirmed \n            if (!foundAllocation.confirmed) {\n              foundAllocation.from = allocation.from;\n              foundAllocation.to = allocation.to;\n              foundAllocation.title = allocation.title;\n            }\n          }\n        } else {\n          // if no entry check status === confirmed, if yes add\n          if (allocation.extStatus === \"confirmed\") {\n            state.entity[allocation.id] = allocation;\n            state.ids.push(allocation.id);\n          }\n        }\n      }\n    }\n  },\n});\n\nexport default allocationSlice;\n","import { EquipmentStatus } from \"./EquipmentStatus\";\nimport { EquipmentType } from \"./EquipmentType\";\nimport { uuidv4 } from \"../shared/utility\";\n\nexport class Equipment {\n  public id: string;\n\n  constructor(public roomId: string, public type: EquipmentType, public status: EquipmentStatus) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: {\n    entity: {} as {[id: string]: Equipment },\n  },\n  reducers: {\n    addEquipment: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n    },\n    deleteEquipment: (state, action) => {\n      delete state.entity[action.payload.id];\n    },\n    toggleEquipment: (state, action) => {\n      console.log('toggle equipment: ', action);\n      const roomId = action.payload.roomId;\n      const type = action.payload.type;\n      const equipmentFound = Object.values(state.entity).filter((eq: Equipment) => eq.roomId === roomId && eq.type === type)[0];\n      if (equipmentFound) {\n        delete state.entity[equipmentFound.id];\n      } else {\n        const newEquipment = new Equipment(roomId, type, EquipmentStatus.Available);\n        state.entity[newEquipment.id] = {...newEquipment};\n      }\n    },\n    setStatus: (state, action) => {\n      state.entity[action.payload.id].status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment = state.entity[action.payload.id];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\nimport reduceReducers from \"reduce-reducers\";\nimport { crossSliceReducer } from \"./crossSliceReducer\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst combinedReducers = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n});\n\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer);\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import Allocation from \"../models/Allocation\";\nimport allocationSlice from \"../store/Allocation/AllocationSlice\";\nimport store from \"../store/store\";\n\nexport class GoogleApi {\n  public get gapi(): any {\n    return (window as any).gapi;\n  }\n\n  public sign: boolean = false;\n  public onLoadCallback: any;\n  public events: any = {};\n\n  private syncToken: string | null = null;\n\n     // Client ID and API key from the Developer Console\n    // TODO move to state and admin panel\n    // private readonly CLIENT_ID = \"162342559011-rh81oauc2fut2lj6d03j4srkk3oeea2l.apps.googleusercontent.com\";\n    // private readonly API_KEY = \"AIzaSyBe9hJXEgWHgkhAjqMEnxDtyCQLVCdEByI\";\n  \n\n    // Array of API discovery doc URLs for APIs used by the quickstart\n    private readonly DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    // Authorization scopes required by the API; multiple scopes can be\n    // included, separated by spaces.\n    private readonly SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n  \n    private readonly CONFIG = {\n      apiKey: \"[googleApi] apiKey not provided!!\",\n      clientId: \"[googleApi] clientId not provided!!\",\n      discoveryDocs: this.DISCOVERY_DOCS,\n      scope: this.SCOPES,\n    };\n\n  private calendarId: string;\n  private roomId: string;\n\n  constructor(roomId: string, apiKey: string, clientId: string, calendarId: string) {\n    this.roomId = roomId;\n    this.calendarId = calendarId;\n\n    this.CONFIG.apiKey = apiKey;\n    this.CONFIG.clientId = clientId;\n    this.handleClientLoad();\n  }\n\n  public changeConfig(roomId: string, apiKey: string, clientId: string, calendarId: string) {\n    this.roomId = roomId;\n    this.calendarId = calendarId;\n    this.CONFIG.apiKey = apiKey;\n    this.CONFIG.clientId = clientId;\n  }\n\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n  public handleClientLoad() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    script.onload = () => {\n      // this.gapi = window[\"gapi\"] as any;\n      // this.gapi.load(\"client:auth2\", this.initClient);\n      this.gapi.load(\"client:auth2\", () => console.log(\"[Google Api] gapi loaded\")); //this.initClient());\n    };\n    // gapi.load(\"client:auth2\", initClient);\n  }\n\n  public handleAuthClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signIn();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public handleSignoutClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signOut();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  /**\n   * Execute the callback function when a user is disconnected or connected with the sign status.\n   * @param callback\n   */\n  public listenSign(callback: (status: any) => void) {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().isSignedIn.listen(callback);\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public sync() {\n    // Construct the {@link Calendar.Events.List} request, but don\"t execute it yet.\n    // Calendar.Events.List request = client.events().list(\"primary\");\n    let request: any;\n\n    // Load the sync token stored from the last execution, if any.\n    if (this.syncToken == null) {\n      console.log(\"Performing full sync.\");\n      request = this.constructUpcomingEventsRequestFull();\n\n      // Set the filters you want to use during the full sync. Sync tokens aren\"t compatible with\n      // most filters, but you may want to limit your full sync to only a certain date range.\n      // In this example we are only syncing events up to a year old.\n      // Date oneYearAgo = Utils.getRelativeDate(java.util.Calendar.YEAR, -1);\n      // request.setTimeMin(new DateTime(oneYearAgo, TimeZone.getTimeZone(\"UTC\")));\n    } else {\n      console.log(\"Performing incremental sync.\");\n      request = this.constructUpcomingEventsRequestPartial();\n      request.syncToken = this.syncToken;\n    }\n\n    // Retrieve the events, one page at a time.\n    // let pageToken = null;\n    // let events = null;\n\n    // do {\n    // request.pageToken = pageToken;\n\n    // try {\n    const singleSync = (pageToken: string | null) => {\n      request.pageToken = pageToken;\n      console.log(\"request body: \", request);\n      this.gapi.client.calendar.events.list(request)\n        .then((response: any) => {\n          console.log(\"synced object: \", response.result);\n          console.log(\"events synced: \", response.result.items);\n          this.events = response.result;\n\n          if (this.events.items.length === 0) {\n            console.log(\"No new events to sync.\");\n          } else {\n            console.log(\"[TODO] syncEvents\");\n            this.syncEvents(this.events.items);\n\n          }\n\n          const nextPageToken = this.events.nextPageToken;\n          if (nextPageToken) {\n            console.log(\"new pageToken: \", nextPageToken);\n            singleSync(nextPageToken);\n          } else {\n            console.log(\"setting sync Token: \", this.events.nextSyncToken);\n            this.syncToken = this.events.nextSyncToken;\n            console.log(\"Sync complete.\");\n          }\n\n        })\n        .catch((err: any) => {\n          console.log(\"Sync Error: \", err);\n          if (err.statusCode === 410) {\n            // A 410 status code, \"Gone\", indicates that the sync token is invalid.\n            console.log(\"Invalid sync token, clearing event store and re-syncing.\");\n            this.syncToken = null;\n            this.events = [];\n            this.sync();\n          } else {\n            throw err;\n          }\n        });\n    };\n\n    singleSync(null);\n    // pageToken = events.getNextPageToken();\n    // } while (pageToken != null);\n\n    // Store the sync token from the last request to be used during the next execution.\n    // syncSettingsDataStore.set(SYNC_TOKEN_KEY, events.getNextSyncToken());\n    // this.syncToken = this.events.syncToken;\n  }\n\n  private syncEvents(events: any) {\n    const mappedEvents = events.map((event: any) => {\n      const a = new Allocation(\n        event.summary, \n        this.roomId,\n        new Date(event.start.dateTime).getTime(),\n        new Date(event.end.dateTime).getTime());\n      if (event.attendees) {\n        a.attendees = event.attendees.length;\n      }\n      if (event.organizer && event.organizer.displayName) {\n        a.by = event.organizer.displayName;\n      }\n      a.extId = event.id;\n      a.extStatus = event.status;\n      return {...a};\n    })\n      // allocation.organizer.displayName\n      // status\n      // description\n      // attendees.length\n    store.dispatch(allocationSlice.actions.syncExternalAllocations(mappedEvents));\n\n    console.log(\"Google api. syncEvents items: \", events.length);\n  }\n\n  public listUpcomingEvents(maxResults: number = 100) {\n    console.log(\"[GoogleApi] list upcoming events\");\n    if (this.gapi) {\n      var today = new Date();\n      var tomorrow = new Date();\n      tomorrow.setDate(today.getDate() + 1);\n      return this.gapi.client.calendar.events.list({\n        calendarId: this.calendarId,\n        maxResults,\n        orderBy: \"startTime\",\n        showDeleted: true,\n        singleEvents: true,\n        timeMin: today.toISOString(),\n        timeMax: tomorrow.toISOString()\n      }).then((response: any) => {\n        console.log(\"events: \", response.result.items);\n        this.syncEvents(response.result.items)\n        // for (const allocation of response.result.items) {\n        //   const a = new Allocation(allocation.summary, this.roomId,\n        //     new Date(allocation.start.dateTime).getTime(),\n        //     new Date(allocation.end.dateTime).getTime());\n\n        //   // allocation.organizer.displayName\n        //   // status\n        //   // description\n        //   // attendees.length\n        //   store.dispatch(allocationSlice.actions.addAllocation({ ...a }));\n        // }\n      });\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n      return false;\n    }\n  }\n\n  private constructUpcomingEventsRequestFull(calendarId = this.calendarId, maxResults = 10000) {\n    const today = new Date();\n    // const tomorrow = new Date();\n    // tomorrow.setDate(today.getDate() + 1);\n    // tomorrow.setTime(today.getTime() + 30000);\n    return {\n      calendarId,\n      // \"timeMax\": (tomorrow).toISOString(),\n      maxResults,\n      pageToken: null as (string | null),\n      singleEvents: true,\n      syncToken: null as (string | null),\n      timeMin: (today).toISOString(),\n    };\n  }\n\n  private constructUpcomingEventsRequestPartial(calendarId = this.calendarId, maxResults = 1000) {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    return {\n      calendarId,\n      maxResults,\n      pageToken: null as (string | null),\n      singleEvents: true,\n      syncToken: null as (string | null),\n    };\n  }\n\n  /**\n   * Auth to the google Api.\n   */\n  public initClient() {\n    // [TODO] client can be null when network connectin issues\n    console.log(\"[Google API] Begin initClient, Config: \", this.CONFIG);\n    this.gapi.client.init(this.CONFIG)\n      .then(() => {\n        console.log(\"[Google API] Client init success\");\n        // Listen for sign-in state changes. // [TODO] this fails when config is wrong\n        this.gapi.auth2.getAuthInstance().isSignedIn.listen((e: any) => this.updateSigninStatus(e));\n        // Handle the initial sign-in state.\n        this.updateSigninStatus(this.gapi.auth2.getAuthInstance().isSignedIn.get());\n        if (this.onLoadCallback) {\n          this.onLoadCallback();\n        }\n      })\n      .catch((e: any) => {\n        console.log(\"[Google API] Client init error:\", e);\n      });\n  }\n\n  private updateSigninStatus(isSignedIn: boolean) {\n    if (isSignedIn) {\n      this.listUpcomingEvents(10);\n    }\n    this.sign = isSignedIn;\n  }\n\n}\n\n// const apiCalendar: GoogleApi = new GoogleApi();\nexport default GoogleApi;\n","import React, { ChangeEvent, Component, FormEvent } from \"react\";\nimport Room from \"../../../models/Room\";\nimport Button from \"../../UI/Button/Button\";\nimport EquipmentAdmin from \"../EquipmentAdmin/EquipmentAdmin\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\nimport Input from \"../../UI/Input/Input\";\nimport \"./AdminPanel.scss\";\nimport SignInButton from \"../../Google/SignInButton\";\nimport GoogleApi from \"../../../providers/googleApi\";\n\ninterface IAdminPanelProps {\n  onSettingsSaved: (settings: any) => void;\n  onEquipmentToggleClick: ({ }) => void;\n  onSettingsClear: () => void;\n  onCancel: () => void;\n}\n\ninterface IAdminPanelState {\n  formIsValid: Boolean;\n  formData: any;\n}\n\nclass AdminPanel extends Component<IAdminPanelProps, IAdminPanelState> {\n  state: IAdminPanelState = {\n    formData: {\n      roomName: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Conference room 1',\n        },\n        label: \"Room name\",\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      clientID: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Client ID from google calendar API',\n        },\n        label: \"Client ID\",\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      apiKey: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'API key from google calendar API'\n        },\n        label: \"API key\",\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      calendarID: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Calendar ID can be found in google calendar settings'\n        },\n        label: \"Calendar ID\",\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    formIsValid: false\n  };\n\n  private selectedRoom: Room;\n  private roomEquipment: Equipment[];\n  private syncSettings: any;\n  private googleApi: any;\n\n  constructor(props: any) {\n    super(props)\n\n    this.selectedRoom = { ...props.selectedRoom };\n    this.roomEquipment = { ...props.roomEquipment };\n    this.syncSettings = { ...props.syncSettings };\n\n    if (!this.selectedRoom) {\n      this.selectedRoom = { ... new Room(\"Conference Room 1\") };\n    }\n\n    this.state.formData.roomName.value = this.selectedRoom.name;\n    this.state.formData.clientID.value = this.syncSettings.clientID;\n    this.state.formData.apiKey.value = this.syncSettings.apiKey;\n    this.state.formData.calendarID.value = this.syncSettings.calendarID;\n\n    this.googleApi = new GoogleApi(this.selectedRoom.id, this.syncSettings.apiKey, this.syncSettings.clientID, this.syncSettings.calendarID);\n  }\n\n  submitSettings = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const formData: any = {};\n    for (let formElementIdentifier in this.state.formData) {\n      formData[formElementIdentifier] = this.state.formData[formElementIdentifier].value;\n    }\n\n    this.selectedRoom.name = formData.roomName;\n    const newSettings = {\n      syncSettings: {\n        clientID: formData.clientID,\n        apiKey: formData.apiKey,\n        calendarID: formData.calendarID,\n      },\n      room: this.selectedRoom,\n    }\n\n    console.log(\"[AdminPanel] selectedroom:\", this.selectedRoom);\n    console.log(\"[AdminPanel] settings: \", newSettings);\n\n    this.props.onSettingsSaved(newSettings);\n  }\n\n  inputChangedHandler = (event: ChangeEvent<HTMLInputElement>, inputIdentifier: any) => {\n    const updatedFormElement = updateObject(this.state.formData[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.formData[inputIdentifier].validation),\n      touched: true\n    });\n    const updatedFormData = updateObject(this.state.formData, {\n      [inputIdentifier]: updatedFormElement\n    });\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedFormData) {\n      formIsValid = updatedFormData[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setSyncSettings(updatedFormData);\n    this.googleApi.changeConfig(this.selectedRoom.id, this.syncSettings.apiKey, this.syncSettings.clientID, this.syncSettings.calendarID);\n    this.setState({ formData: updatedFormData, formIsValid: formIsValid });\n  }\n\n  setSyncSettings(data: any) {\n    this.syncSettings = {\n      clientID: data.clientID,\n      apiKey: data.apiKey,\n      calendarID: data.calendarID,\n    }\n  }\n\n  clearSettings() {\n    this.props.onSettingsClear();\n  }\n\n  cancel() {\n    this.props.onCancel();\n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.formData) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.formData[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.submitSettings}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            label={formElement.config.label}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event: any) => this.inputChangedHandler(event, formElement.id)} />\n        ))}\n        <div>\n          <EquipmentAdmin roomId={this.selectedRoom.id} equipment={this.roomEquipment} onEquipmentToggleClick={this.props.onEquipmentToggleClick} />\n        </div>\n        <SignInButton roomId={this.selectedRoom.id} googleApi={this.googleApi} />\n        <div className=\"AdminPanelButtons\">\n          <Button\n            // type=\"text\"\n            label=\"Clear Settings\"\n            onClick={() => this.clearSettings()}\n          />\n          <Button\n            // type=\"text\"\n            label=\"Cancel\"\n            onClick={() => this.cancel()}\n          />\n          <Button\n            // type=\"icon-text\"\n            btnType=\"submit\"\n            iconId=\"icon-save\"\n            label=\"Save Settings\"\n          />\n        </div>\n\n        {/* <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button> */}\n      </form>\n\n    );\n    // if (this.props.loading) {\n    //   form = <Spinner />;\n    // }\n    return (\n      <div className=\"AdminPanel\">\n        <h3>Admin Panel</h3>\n        {form}\n        {/* // [TODO] all buttons are submit buttons */}\n\n      </div>\n    );\n  }\n}\n\nexport default AdminPanel;\n","import { connect } from \"react-redux\";\nimport * as selectors from \"../../store/selectors\";\nimport roomSlice from \"../../store/Room/RoomSlice\";\nimport Room from \"../../models/Room\";\nimport {saveState, removeState} from \"../../store/crossSliceReducer\";\nimport uiSlice from \"../../store/UI/UISlice\";\nimport AdminPanel from \"../../components/Admin/AdminPanel/AdminPanel\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport { getSyncSettings } from \"../../store/UI/UISelectors\";\n\nconst mapStateToProps = (state: any) => {\n  const selectedRoom = selectors.getSelectedRoom(state);\n  const roomEquipment = selectors.getSelectedRoomEquipment(state);\n  const syncSettings = getSyncSettings(state);\n\n  return {\n    selectedRoom,\n    roomEquipment,\n    syncSettings,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSettingsSaved: (settings: any) => {\n      dispatch(roomSlice.actions.changeRoomName({...settings.room}));\n      // [TODO] temporary solution, need to be changed when multiple room management will be added\n      dispatch(uiSlice.actions.setSelectedRoomId(settings.room.id));\n      dispatch(uiSlice.actions.setSyncSettings(settings.syncSettings));\n      dispatch(uiSlice.actions.hideAdminPanel());\n      dispatch(saveState());\n    },\n    onEquipmentToggleClick: (roomId: string, type: string) => {\n      console.log(\"onEquipmentToggleClick\");\n      dispatch(equipmentSlice.actions.toggleEquipment({roomId, type}));\n    },\n    onSettingsClear: () => {\n      dispatch(removeState());\n    },\n    onCancel: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    }\n  };\n};\n\nconst Admin = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AdminPanel);\n\nexport default Admin;\n","import React from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst equipmentBar = (props: { equipment: Equipment[], onChangeStatusClick: (e: Equipment) => void }) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return <Button\n      key={e.type}\n      style=\"icon\"\n      onClick={() => props.onChangeStatusClick(e)}\n      iconId={`icon-${e.type.toLowerCase()}`}\n      btnClassName={`btn_${e.status.toLowerCase()}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default equipmentBar;\n","import React from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\n\nconst RoomStatusBorder = (props: any) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default RoomStatusBorder;\n","import React from \"react\";\nimport EquipmentBar from \"./EquipmentBar/EquipmentBar\";\nimport \"./Header.scss\";\nimport RoomStatusBorder from \"../Room/RoomStatusBorder/RoomStatusBorder\";\n\nconst Header = (props: any) => {\n  return (\n    <div className=\"Header\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <div className=\"HeaderContent\">\n          <div><h1>{props.room.name}</h1></div>\n          <div>{new Date().toLocaleDateString()}</div>\n          <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick} />\n        </div>\n      </RoomStatusBorder>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\nconst allocationInfo = (props: any) => {\n  // console.log(\"allocationInfo: \", props);\n  const startsIn = millisecondsToMinutes(props.from - props.time);\n\n  return (\n    <div className=\"AllocationInfo\">\n      <div className=\"text-very-small text-gray\">Next Meeting</div>\n      <div><h4>{props.title}</h4></div>\n      <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      {/* <div>{props.by}{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div> */}\n      <div>Starts In: {Math.floor(startsIn / 60) ? <span>{Math.floor(startsIn / 60)} h</span> : null} {startsIn % 60} min</div>\n    </div>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\nconst allocationInfoBig = (props: any) => {\n  const timeTillEnd = millisecondsToMinutes(props.to - props.time);\n  const duration = millisecondsToMinutes(props.to - props.from);\n  const timeInMeeting = duration - timeTillEnd;\n  const percentInMeeting = Math.round(timeInMeeting / duration * 100);\n\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">\n        <div className=\"text-small text-gray\">In Progress</div>\n        <div><h2>{props.title}</h2></div>\n        <div><span>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</span></div>\n        {/* <div><h3>{props.by}</h3><span>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</span></div> */}\n        <div>Ends In: {Math.floor(timeTillEnd / 60) ? <span>{Math.floor(timeTillEnd / 60)} h</span> : null} {timeTillEnd % 60} min</div>\n        {props.attendees ? <div>{props.attendees} attendees</div> : null}\n        {props.agenda ? <div>Agenda: {props.agenda}</div> : null}\n        {/* <div>Duration: {duration} min</div> */}\n        {/* <div>% Done: {percentInMeeting}</div> */}\n      </div>\n    </>\n  );\n};\n\nexport default allocationInfoBig;\n","import React from \"react\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport \"./AllocationMenu.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst allocationMenu = (props: any) => {\n  // console.log(\"Allocation menu:\", props.id);\n  // console.log(\"Props: \", props);\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <Button\n          style=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          style=\"icon-text\"\n          onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, props.time, 60000 * 15)}\n          iconId=\"icon-calendar-plus-o\"\n          label=\"Extend\"\n        />\n        <Button\n          style=\"icon-text\"\n          onClick={() => props.onFinishEarlyClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-times-o\"\n          label=\"Finish\"\n        />\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <Button\n          style=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id, props.time)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          style=\"icon-text\"\n          onClick={() => props.onAddMeetingClick(props.roomId, props.time)}\n          iconId=\"icon-calendar-o\"\n          label=\"Book now\"\n        />\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default allocationMenu;\n","import React from \"react\";\nimport Admin from \"../../../containers/Admin/Admin\";\nimport AllocationInfo from \"../../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../../Allocation/AllocationMenu/AllocationMenu\";\nimport \"./AllocationsView.scss\";\n\nconst AllocationsView = (props: any) => {\n  // console.log(\"roomView: \", props);\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <Admin />;\n  }\n\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  // [TODO] Overlapping events, if current event is overlapping next\n  if (props.currentAllocation) {\n    currentAllocationTag =\n      <AllocationInfoBig time={props.time}\n        {...props.currentAllocation}\n      />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo time={props.time} {...props.nextAllocation} />;\n  }\n\n  return (\n    <div className=\"AllocationsView\">\n      <div className=\"Allocations\">\n        {currentAllocationTag}\n        {nextAllocationTag}\n      </div>\n      <AllocationMenu\n        roomId={props.room.id}\n        time={props.time}\n        currentAllocation={props.currentAllocation}\n        nextAllocation={props.nextAllocation}\n        roomStatus={props.roomStatus}\n        onFinishEarlyClick={props.onFinishEarlyClick}\n        onExtendMeetingClick={props.onExtendMeetingClick}\n        onConfirmMeetingClick={props.onConfirmMeetingClick}\n        onAddMeetingClick={props.onAddMeetingClick}\n      />\n    </div>\n\n  );\n};\n\nexport default AllocationsView;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./TimeView.scss\";\n\n// [TODO] show overlapping events with different color\nconst timeView = (props: any) => {\n\n  const mainRadius = 240;\n  const timeRadius = 225;\n  const canvasSize = 500;\n  const greenColor = \"#4CAF50\"; //\"rgb(139, 195, 74)\";\n  const redColor = \"#F44336\"; // \"rgb(255, 87, 34)\";\n\n  function drawCircleStroke(ctx: any, fromMinute: number, toMinute: number, color: string, radius?: number, lineWidth?: number) {\n    const clockRadius = radius || mainRadius;\n\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth || 4;\n    ctx.strokeStyle = color;\n\n    function dayMinuteToRadian(minute: number) {\n      const minuteRadian = 2 * Math.PI / (12 * 60);\n      const startingRadian = -0.5 * Math.PI;\n      return startingRadian + minute * minuteRadian;\n    }\n\n    const startAngle = dayMinuteToRadian(fromMinute);\n    const endAngle = dayMinuteToRadian(toMinute);\n\n    ctx.arc(canvasSize / 2, canvasSize / 2, clockRadius, startAngle, endAngle);\n    ctx.stroke();\n  }\n\n  function UTCToClockTime(epoch: number): number {\n    const date = new Date(0);\n    date.setUTCMilliseconds(epoch);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  function capLimitMin(currentTime: number, limitTime: number, minHourRange: number) {\n    return Math.max(limitTime, currentTime - minHourRange * 60 * 60 * 1000);\n  }\n\n  function capLimitMax(currentTime: number, limitTime: number, maxHourRange: number) {\n    return Math.min(limitTime, currentTime + maxHourRange * 60 * 60 * 1000);\n  }\n\n  function drawCurrentTime(ctx: any) {\n    const minutes = UTCToClockTime(props.time);\n    // Draw circle background\n    drawCircleStroke(ctx, minutes + 1, minutes, \"#000\", 200, 22);\n    \n    // Draw available slots for whole day\n    drawCircleStroke(ctx, minutes - 60, minutes - 120, greenColor, 203, 5);\n    \n    // Draw busy slots for given allocations\n    // [TODO] The busy slots drawing should have min and max value so it shouldn't exceed 11 hours threshold\n    props.allocations\n    .map((a: any) => ({from: capLimitMin(props.time, a.from, 1), to: capLimitMax(props.time, a.to, 10)}))\n    .map((a: any) => ({from: UTCToClockTime(a.from), to: UTCToClockTime(a.to)}))\n    .forEach((e: any) => drawCircleStroke(ctx, e.from, e.to, redColor, 200, 12));\n    \n    // Draw current time\n    drawCircleStroke(ctx, minutes - 2, minutes + 3, \"#FFF\", 170, 30);\n    drawCircleStroke(ctx, minutes, minutes + 1, \"#000\", 196, 20);\n\n    // draw 30 min slots\n    for (let i = 0; i < 24; i++) {\n      // long line on each full hour and short on not full hour\n      if (i % 2) {\n        drawCircleStroke(ctx, i * 30, i * 30 + 1, \"#FFF\", 200, 12);\n      } else {\n        drawCircleStroke(ctx, i * 30, i * 30 + 1, \"#FFF\", 196, 20);\n      }\n    }\n    \n  }\n\n  let canvas: any = React.createRef();\n  // [TODO] This component need to be smart component and this timeout then can be removed\n  setTimeout(function () {\n    if (canvas.current && canvas.current.getContext) {\n      const ctx = canvas.current.getContext(\"2d\");\n\n      canvas.current.width = canvasSize;\n      canvas.current.height = canvasSize;\n      drawCurrentTime(ctx);\n    }\n  }, 10)\n\n  return (\n    <div className=\"TimeView\">\n      <span>{formatTimeStamp(props.time)}</span>\n      <canvas className=\"TimeViewCanvas\" id=\"canvas\" ref={canvas}></canvas>\n    </div>\n  );\n};\n\nexport default timeView;\n","import React from \"react\";\nimport AllocationsView from \"../../Allocation/AllocationsView/AllocationsView\";\nimport TimeView from \"../TimeView/TimeView\";\nimport \"./RoomViewContent.scss\";\n\nconst RoomViewContent = (props: any) => {\n  return (\n    <div className=\"RoomViewContent\">\n      <TimeView time={props.time} allocations={props.clockAllocations} />\n      <div className=\"RoomViewContentSeparator\" />\n      <AllocationsView {...props} />\n    </div>\n  );\n};\n\nexport default RoomViewContent;\n","import React from \"react\";\nimport \"./StatusBar.scss\";\nimport Button from \"../../UI/Button/Button\";\nimport SignInButton from \"../../Google/SignInButton\";\n\nconst StatusBar = (props: any) => {\n  return (\n    <div className=\"StatusBar\">\n      <Button onClick={props.onAdminClicked} iconId=\"icon-settings\" label=\"Admin\" />\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport \"./Footer.scss\";\nimport RoomStatusBorder from \"../Room/RoomStatusBorder/RoomStatusBorder\";\nimport StatusBar from \"./StatusBar/StatusBar\";\n\nconst Footer = (props: any) => {\n  return (\n    <div className=\"Footer\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <StatusBar room={props.room} onAdminClicked={props.onAdminClick}/>\n      </RoomStatusBorder>\n    </div>\n  )\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport \"./Backdrop.scss\";\n\nconst Backdrop = () => {\n  return (\n    <div className=\"Backdrop\"/>\n  )\n}\n\nexport default Backdrop;\n","import React from \"react\";\nimport \"./Popup.scss\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Popup = (props: any) => {\n  const classes = [\"Popup\"];\n  if (props.open) {\n    classes.push(\"open\");\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <Backdrop/>\n      <div className=\"PopupContent\">\n        <Button\n          btnClassName=\"PopupClose\"\n          // style=\"icon-text\"\n          onClick={props.onCloseClick}\n          iconId=\"icon-close\"\n          label=\"Close\"\n        />\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import React from \"react\";\nimport Admin from \"../../../containers/Admin/Admin\";\nimport Header from \"../../Header/Header\";\nimport RoomViewContent from \"../RoomViewContent/RoomViewContent\";\nimport \"./RoomView.scss\";\nimport Footer from \"../../Footer/Footer\";\nimport Popup from \"../../UI/Popup/Popup\";\n\nconst roomView = (props: any) => {\n  // console.log(\"roomView: \", props);\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <Admin />;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <Header {...props} />\n      <RoomViewContent {...props} />\n      <Footer {...props} />\n      <Popup open={props.adminPanelOpen} onCloseClick={props.onPopupCloseClick}>\n        <Admin />\n      </Popup>\n    </div>\n  );\n};\n\nexport default roomView;\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/Room/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getDate, getAdminPanelOpen } from \"../../store/UI/UISelectors\";\nimport uiSlice from \"../../store/UI/UISlice\";\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  // console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const adminPanelOpen = getAdminPanelOpen(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n\n  // [TODO] move all magin numbers to a config const file\n  // [TODO] set proper threshold for confirmation 5 min\n  const roomStatus = selectors.getSelectedRoomStatus(5 * 60 * 1000)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocation(state);\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  // get allocations for next 10 hours\n  const clockMaxTime = time + 10 * 60 * 60 * 1000;\n  const clockMinTime = time - 1 * 60 * 60 * 1000;\n  const clockAllocations = selectors.getSelectedRoomAllocationsFromTo(clockMinTime, clockMaxTime)(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n    adminPanelOpen,\n    clockAllocations,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAdminClick: () => {\n      dispatch(uiSlice.actions.showAdminPanel());\n    },\n    onPopupCloseClick: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onAddMeetingClick: (roomId: string, time: number) => {\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", roomId, time, time + 60 * 1000 * 30), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id, time}));\n    },\n    onExtendMeetingClick: (id: string, time: number, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, time, amount}));\n    },\n    onFinishEarlyClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.finishEarly({id, time}));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Allocation from \"../models/Allocation\";\nimport Room from \"../models/Room\";\nimport store from \"./store\";\n\nimport { Equipment } from \"../models/Equipment\";\nimport { EquipmentStatus } from \"../models/EquipmentStatus\";\nimport { EquipmentType } from \"../models/EquipmentType\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport {\n  getSelectedRoomAllocations, getSelectedRoomCurrentAllocations,\n  getSelectedRoomEquipment, getSelectedRoomNextAllocation, isSelectedRoomOccupied\n} from \"./selectors\";\nimport { getSelectedRoomId } from \"./UI/UISelectors\";\nimport uiSlice from \"./UI/UISlice\";\nimport { loadState, saveState } from \"./crossSliceReducer\";\nimport { roundEpochToMinutes } from \"../shared/utility\";\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  const startState = store.getState();\n  console.log(\"[Start] startState:\", startState);\n  store.dispatch(loadState());\n\n  // [TODO] once a day clean old entries\n  setInterval(() => {\n    console.log(\"[Start] Interval\");\n    // Set time to be alway 1 milliesecond after full minute\n    store.dispatch(uiSlice.actions.setTime(roundEpochToMinutes(Date.now()) + 1));\n    store.dispatch(saveState());\n  }, 60 * 1000);\n\n\n  // store.subscribe(() => {\n  //   console.log(store.getState());\n  // });\n\n  const initData = () => {\n    console.log('[Start] init data');\n    // const usedRoom = new Room(\"Supernova\");\n    // store.dispatch(roomSlice.actions.addRoom({...usedRoom}));\n    // store.dispatch(roomSlice.actions.addRoom({...new Room(\"Room 2\")}));\n\n    // store.dispatch(uiSlice.actions.setSelectedRoomId(usedRoom.id));\n\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1a\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1b\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Current 1c\", usedRoom.id, Date.now() - 120000 , Date.now() + 50000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Next 1d\", usedRoom.id, Date.now() + 110000, Date.now() + 480000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1e\", usedRoom.id, Date.now() + 1000000, Date.now() + 1200000)}));\n\n    // store.dispatch(allocationSlice.actions.addAllocation(\n    //   {...new Allocation(\"Test allocation 2a\", \"Room 2\", Date.now() - 1200000, Date.now() - 1200000)}));\n\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Projector, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Skype, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // // store.dispatch(equipmentSlice.actions.changeStatus(\n    // //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // const roomName1 = getSelectedRoomId(store.getState());\n    // const roomAllocations = getSelectedRoomAllocations(store.getState());\n    // const roomEquipment = getSelectedRoomEquipment(store.getState());\n\n    // const roomOccupied = isSelectedRoomOccupied(store.getState());\n    // const currentAllocation = getSelectedRoomCurrentAllocations(store.getState())[0];\n    // const nextAllocation = getSelectedRoomNextAllocation(store.getState());\n\n    // // const timeInterval = selectDateTime();\n    // // console.log('Time: ', selectDateTime(store.getState()));\n    // // console.log('Occupied2: ', roomOccupied2);\n    // // const roomOccupied2 = isSelectedRoomOccupied2(store.getState());\n    // console.log(\"Name: \", roomName1);\n    // console.log(\"Allocations: \", roomAllocations);\n    // console.log(\"Occupied: \", roomOccupied);\n    // console.log(\"Equipment: \", roomEquipment);\n    // console.log(\"Current allocation: \", currentAllocation);\n    // console.log(\"Next allocation: \", nextAllocation);\n  }\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App/App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}