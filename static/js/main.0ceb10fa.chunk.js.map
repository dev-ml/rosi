{"version":3,"sources":["assets/symbol-defs.svg","models/RoomStatus.ts","store/Allocation/AllocationSelectors.ts","store/selectors.ts","models/EquipmentType.ts","store/UI/UISelectors.ts","shared/consts.ts","shared/utility.ts","models/Room.ts","store/Room/RoomSlice.ts","store/CrossSlice/CrossSliceActions.ts","shared/cacheManager.ts","store/UI/UISlice.ts","components/UI/Button/Button.tsx","components/UI/Input/Input.tsx","models/EquipmentStatus.ts","components/Admin/EquipmentAdmin/EquipmentAdmin.tsx","components/Admin/AdminPanel/AdminPanel.tsx","models/Equipment.ts","store/Equipment/EquipmentSlice.ts","store/SyncProvider/SyncProviderSelectors.ts","store/SyncProvider/SyncProviderSlice.ts","models/Allocation.ts","providers/GoogleSyncProvider.ts","store/Allocation/AllocationSlice.ts","store/store.ts","store/CrossSlice/CrossSliceReducer.ts","providers/SyncProvider.ts","store/SyncProvider/SyncProviderActions.ts","containers/Admin/Admin.tsx","components/Header/EquipmentBar/EquipmentBar.tsx","components/Room/RoomStatusBorder/RoomStatusBorder.tsx","components/Header/Header.tsx","components/Allocation/AllocationInfo/AllocationInfo.tsx","components/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","components/Allocation/AllocationMenu/AllocationMenu.tsx","components/Allocation/AllocationsView/AllocationsView.tsx","components/Room/RoomClock/RoomClock.tsx","components/Room/RoomViewContent/RoomViewContent.tsx","components/Footer/StatusBar/StatusBar.tsx","components/Footer/Footer.tsx","components/UI/Backdrop/Backdrop.tsx","components/UI/Popup/Popup.tsx","components/Room/RoomView/RoomView.tsx","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","store/start.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RoomStatus","n","EquipmentType","getDate","createSelector","getSelectedRoomId","getAdminPanelOpen","getSelectedRoom","roomId","rooms","entity","getSelectedRoomAllocations","allocation","Object","values","filter","a","getSelectedRoomCurrentAllocations","date","allocations","from","to","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getRoomClockAllocations","clockHoursBackwards","clockHoursForward","getSelectedRoomNextAllocation","slice","getSelectedRoomCurrentAllocation","time","getSelectedRoomEquipment","length","equipment","e","formatTimeStamp","timeStamp","Date","toLocaleTimeString","hour","minute","hour12","millisecondsToMinutes","milliseconds","Math","ceil","roundEpochToMinutes","epoch","updateObject","oldObject","updatedProperties","objectSpread","dayMinuteToRadian","minuteRadian","PI","formatHoursMinutes","timeInMinutes","hours","floor","concat","minutes","checkValidity","value","rules","isValid","required","trim","minLength","maxLength","isEmail","test","isNumeric","uuidv4","replace","c","r","random","toString","Room","name","classCallCheck","this","id","capacity","location","roomSlice","createSlice","initialState","defaultRoom","ids","push","createInitialState","reducers","addRoom","state","action","payload","changeRoomName","saveStateStarted","createAction","saveStateSucceeded","saveStateFailed","loadStateStarted","loadStateSucceeded","loadStateFailed","removeStateStarted","removeStateSucceeded","removeStateFailed","saveState","dispatch","getState","key","data","localforage","setItem","then","error","loadState","getItem","removeState","removeItem","uiSlice","selectedRoomId","now","adminPanelOpen","stateSyncInProgress","stateSyncError","setSelectedRoomId","setTime","showAdminPanel","hideAdminPanel","Button","props","getButtonType","btnType","buttonElement","react_default","createElement","type","className","btnClassName","onClick","aria-label","iconId","label","style","xlinkHref","icons","Input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","assign","join","elementConfig","onChange","changed","options","map","option","displayValue","EquipmentStatus","EquipmentAdmin","onEquipmentToggleClick","AdminPanel","_this","possibleConstructorReturn","getPrototypeOf","call","formData","roomName","placeholder","validation","valid","clientId","apiKey","calendarId","formIsValid","selectedRoom","roomEquipment","syncSettings","inputChangedHandler","event","inputIdentifier","updatedFormElement","target","updatedFormData","defineProperty","inputId","setSyncSettings","setState","newSettings","room","onSettingsSaved","console","log","onCancel","onConnect","_this2","formElementsArray","config","form","formElement","UI_Input_Input","Admin_EquipmentAdmin_EquipmentAdmin","connect","UI_Button_Button","cancel","Component","Equipment","status","equipmentSlice","addEquipment","deleteEquipment","toggleEquipment","equipmentFound","eq","newEquipment","Available","setStatus","changeStatus","newStatus","Broken","NotAvailable","hasAutoSync","getSyncSettings","syncProviderSlice","connecting","connected","connectionMessage","errorLog","autoSync","syncing","lastSynced","syncMessage","connectionStarted","connectionSucceeded","connectionFailed","message","toConsumableArray","syncStarted","syncSucceeded","syncFailed","Allocation","title","confirmed","by","attendees","agenda","extId","extStatus","GoogleSyncProvider","DISCOVERY_DOCS","SCOPES","CONFIG","discoveryDocs","scope","handleClientLoad","createClass","get","window","gapi","client","initClient","Promise","reject","Error","calendar","fetchEvents","today","tomorrow","setDate","events","list","orderBy","maxResults","showDeleted","singleEvents","timeMin","toISOString","timeMax","response","result","items","syncEvents","catch","script","document","src","body","appendChild","onload","load","_this3","init","auth2","getAuthInstance","signIn","user","mappedEvents","summary","start","dateTime","getTime","end","organizer","displayName","allocationSlice","addAllocation","deleteAllocation","finishEarly","extendMeeting","amount","confirmMeeting","syncExternalAllocations","newAllocations","expiredAllocations","sa","find","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","foundAllocation","_iterator2","combinedReducers","combineReducers","ui","reducer","syncProvider","rootReducer","reduceReducers","newState","actions","store","configureStore","sync","getAllocations","Admin","selectors","settings","onSettingsClear","syncConnect","EquipmentBar","onChangeStatusClick","toLowerCase","mapEquipmentToButton","RoomStatusBorder","classNames","roomStatus","children","Header","Room_RoomStatusBorder_RoomStatusBorder","toLocaleDateString","Header_EquipmentBar_EquipmentBar","AllocationInfo","startsIn","AllocationInfoBig","timeTillEnd","Fragment","AllocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","currentAllocation","awaiting","onConfirmMeetingClick","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","AllocationsView","currentAllocationTag","Allocation_AllocationInfoBig_AllocationInfoBig","nextAllocationTag","Allocation_AllocationInfo_AllocationInfo","Allocation_AllocationMenu_AllocationMenu","Admin_Admin","RoomClock","colorRed","drawCircleStroke","ctx","fromMinute","toMinute","color","radius","lineWidth","lineCap","clockRadius","beginPath","strokeStyle","startAngle","endAngle","arc","canvasSize","stroke","UTCToClockTime","setUTCMilliseconds","getHours","getMinutes","capLimitMax","currentTime","limitTime","maxHourRange","min","minutesInHour","canvas","React","createRef","setTimeout","current","getContext","width","height","mappedAllocations","minHourRange","max","forEach","mainRadius","tickWidth","i","drawCurrentTime","ref","RoomViewContent","Room_RoomClock_RoomClock","clockAllocations","Allocation_AllocationsView_AllocationsView","StatusBar","onAdminClick","Footer","Footer_StatusBar_StatusBar","Backdrop","Popup","classes","open","UI_Backdrop_Backdrop","onCloseClick","RoomView","components_Header_Header","Room_RoomViewContent_RoomViewContent","components_Footer_Footer","UI_Popup_Popup","onPopupCloseClick","SelectedRoom","threshold","occupied","free","App","SelectedRoom_SelectedRoom","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","startState","setInterval","ReactDOM","render","es","containers_App_App","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0ceb10fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symbol-defs.119ddbe0.svg\";","export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\n\nexport const getRoomAllocations = (id: string) => createSelector(\n  [\"allocation\"],\n  (allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === id);\n  },\n);\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport { RoomStatus } from \"../models/RoomStatus\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\nimport { clockMinTime, clockMaxTime, oneMinute } from \"../shared/consts\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.entity[roomId],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\n// [TODO] not only future meeting should be given but also meetings date - 60 min\nexport const getSelectedRoomFutureAllocationsForNextNMinutes = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted, getDate],\n  (allocations: Allocation[], time: number) => allocations.filter((a: Allocation) => a.to < time + n * oneMinute),\n);\n\n// Gives allocations that end after from, but also end before to\nexport const getSelectedRoomAllocationsFromTo = (from: number, to: number) => createSelector(\n  [getSelectedRoomAllocations],\n  (allocations: Allocation[]) => allocations.filter((a: Allocation) => a.to > from && a.from < to),\n);\n\nexport const getRoomClockAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date: number, allocations: Allocation[]) =>\n    allocations.filter((a: Allocation) => a.to > date - clockMinTime && a.from < date + clockMaxTime),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomNextAllocationTimeToBegin = createSelector(\n  [getSelectedRoomNextAllocation, getDate],\n  (allocation: Allocation, time: number) => allocation.from - time,\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocationLength = createSelector(\n  [getSelectedRoomCurrentAllocation],\n  (allocation: Allocation) => allocation.to - allocation.from,\n);\n\nexport const getSelectedRoomCurrentAllocationTimeToEnd = createSelector(\n  [getSelectedRoomCurrentAllocations, getDate],\n  (allocation: Allocation, time: number) => allocation.to - time,\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => {\n    // [TODO] Bug on the production\n    if (!equipment.entity) {\n      return [];\n    }\n\n    const equipmentArray: Equipment[] = Object.values(equipment.entity) || [];\n    return equipmentArray.filter((e: Equipment) => e.roomId === roomId);\n  }\n);\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n\nexport const getAdminPanelOpen = createSelector(\n  [\"ui.adminPanelOpen\"],\n);\n","export const minutesInHour = 60;\nexport const minutesInDay = 24 * minutesInHour;\nexport const hoursInDay = 24;\n\nexport const oneSecond = 1000;\nexport const oneMinute = 60 * oneSecond;\nexport const oneHour = minutesInHour * oneMinute;\nexport const oneDay = hoursInDay * oneHour;\n\nexport const defaultExtendDuration = 15 * oneMinute;\nexport const defaultMeetingDuration = 30 * oneMinute;\nexport const defaultConfirmationThreshold = 5 * oneMinute;\n\nexport const clockHoursForward = 10;\nexport const clockHoursBackwards = 1;\nexport const clockMaxTime = clockHoursForward * oneHour;\nexport const clockMinTime = clockHoursBackwards * oneHour;\n\nexport const maxSyncResults = 1000;\n","import { minutesInDay, oneMinute, minutesInHour } from \"./consts\";\n\nexport const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\nexport const millisecondsToMinutes = (milliseconds: number): number => {\n  return Math.ceil(milliseconds / oneMinute);\n};\n\nexport const roundEpochToMinutes = (epoch: number): number => {\n  return epoch - (epoch % oneMinute);\n};\n\nexport const updateObject = (oldObject: any, updatedProperties: any) => {\n  return {\n      ...oldObject,\n      ...updatedProperties,\n  };\n};\n\nexport const dayMinuteToRadian = (minute: number) => {\n  const minuteRadian = 2 * Math.PI / (minutesInDay / 2);\n  const startingRadian = -0.5 * Math.PI;\n  return startingRadian + minute * minuteRadian;\n};\n\nexport const formatHoursMinutes = (timeInMinutes: number) => {\n  const hours = Math.floor(timeInMinutes / minutesInHour) ? `${Math.floor(timeInMinutes / minutesInHour)} h` : \"\";\n  const minutes = `${timeInMinutes % minutesInHour} min`;\n  return `${hours} ${minutes}`;\n};\n\nexport const checkValidity = ( value: any, rules: any ) => {\n  let isValid = true;\n  if ( !rules ) {\n      return true;\n  }\n\n  if ( rules.required ) {\n      isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if ( rules.minLength ) {\n      isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if ( rules.maxLength ) {\n      isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if ( rules.isEmail ) {\n      // tslint:disable-next-line: max-line-length\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test( value ) && isValid;\n  }\n\n  if ( rules.isNumeric ) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test( value ) && isValid;\n  }\n\n  return isValid;\n};\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Room {\n  public id: string;\n\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Room from \"../../models/Room\";\n\nconst createInitialState = () => {\n  const defaultRoom = new Room(\"Conference Room 1\");\n  const initialState = {\n    entity: {} as {[id: string]: Room },\n    ids: [] as string[],\n  };\n\n  initialState.entity[defaultRoom.id] = { ...defaultRoom};\n  initialState.ids.push(defaultRoom.id);\n\n  return initialState;\n};\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: createInitialState(),\n  reducers: {\n    addRoom: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    changeRoomName: (state, action) => {\n      // [TODO] Temporary create room when it does not exists\n      if (!state.entity[action.payload.id]) {\n        state.entity[action.payload.id] = action.payload;\n        state.ids.push(action.payload.id);\n      } else {\n        state.entity[action.payload.id].name = action.payload.name;\n      }\n    }\n  },\n});\n\nexport default roomSlice;\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../../shared/cacheManager\";\n\nexport const saveStateStarted = createAction(\"crossslice/savestate/started\")\nexport const saveStateSucceeded = createAction(\"crossslice/savestate/succeeded\")\nexport const saveStateFailed = createAction(\"crossslice/savestate/failed\")\n\nexport const loadStateStarted = createAction(\"crossslice/loadstate/started\")\nexport const loadStateSucceeded = createAction(\"crossslice/loadstate/succeeded\")\nexport const loadStateFailed = createAction(\"crossslice/loadstate/failed\")\n\nexport const removeStateStarted = createAction(\"crossslice/removestate/started\")\nexport const removeStateSucceeded = createAction(\"crossslice/removestate/succeeded\")\nexport const removeStateFailed = createAction(\"crossslice/removestate/failed\")\n\nexport const saveState = () => (dispatch: any, getState: any) => {\n  dispatch(saveStateStarted());\n  return cacheManager.writeData(\"state\", getState()).then(\n    () => dispatch(saveStateSucceeded()),\n    (error) => dispatch(saveStateFailed(error))\n  );\n};\n\nexport const loadState = () => (dispatch: any) => {\n  dispatch(loadStateStarted());\n  return cacheManager.readData(\"state\").then(\n    (state) => dispatch(loadStateSucceeded(state)),\n    (error) => dispatch(loadStateFailed(error))\n  );\n};\n\nexport const removeState = () => (dispatch: any) => {\n  dispatch(removeStateStarted());\n  return cacheManager.removeData(\"state\").then(\n    (state) => {\n      dispatch(removeStateSucceeded(state));\n      dispatch(loadState());\n    },\n    (error) => dispatch(removeStateFailed(error))\n  );\n};","import localforage from \"localforage\";\n\nexport const writeData = (key: any, data: any) => localforage.setItem(key, data);\nexport const readData = (key: any) => localforage.getItem(key);\nexport const removeData = (key: any) => localforage.removeItem(key);\nexport const clear = () => localforage.clear();\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n    adminPanelOpen: false,\n    stateSyncInProgress: false,\n    stateSyncError: \"\",\n\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n    showAdminPanel: (state) => {\n      state.adminPanelOpen = true;\n      return state;\n    },\n    hideAdminPanel: (state) => {\n      state.adminPanelOpen = false;\n      return state;\n    }\n  },\n});\n\nexport default uiSlice;\n","import React from \"react\";\nimport \"./Button.scss\";\nimport icons from \"../../../assets/symbol-defs.svg\";\n\ninterface IProps {\n  label?: string;\n  onClick?: () => void;\n  btnType?: string;\n  btnClassName?: string;\n  iconId?: string;\n  style?: string;\n}\n\nexport const Button: React.FC<IProps> = (props: IProps) => {\n\n  const getButtonType = () => props.btnType || \"button\";\n\n  let buttonElement =\n  <button\n    type={getButtonType()}\n    className={props.btnClassName}\n    onClick={props.onClick}\n    aria-label={props.iconId}\n  >\n    {props.label}\n  </button>;\n\n  switch (props.style) {\n    case \"icon\":\n      buttonElement = (\n        // tslint:disable-next-line: max-line-length\n        <button type={getButtonType()} className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.iconId}>\n          <svg className={`icon`}>\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n        </button>\n      );\n      break;\n    case \"icon-text\":\n      buttonElement = (\n        <button type={getButtonType()} className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"icon-text-large\":\n      buttonElement = (\n        <button type={getButtonType()} className={`btn btn_flat ${props.btnClassName}`} onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"text\":\n      buttonElement = (\n        <button type={getButtonType()} className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.label}>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n  }\n\n  return buttonElement;\n};\n\nexport default Button;\n","import React from \"react\";\n\nimport \"./Input.scss\";\n\ninterface IProps {\n  invalid: boolean;\n  shouldValidate: boolean;\n  touched: boolean;\n  elementType: string;\n  elementConfig: any;\n  label: string;\n  value: any;\n  changed: (event: any) => void;\n}\n\nexport const Input: React.FC<IProps> = (props: IProps) => {\n  let inputElement = null;\n  const inputClasses = [\"InputElement\"];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(\"Invalid\");\n  }\n\n  switch (props.elementType) {\n    case (\"input\"):\n      inputElement = <input\n        className={inputClasses.join(\" \")}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}\n      />;\n      break;\n    case (\"textarea\"):\n      inputElement = <textarea\n        className={inputClasses.join(\" \")}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}\n      />;\n      break;\n    case (\"select\"):\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {\n            // tslint:disable-next-line: jsx-no-multiline-js\n            props.elementConfig.options.map((option: any) => (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input\n        className={inputClasses.join(\" \")}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}\n      />;\n  }\n\n  return (\n    <div className={\"Input\"}>\n      <label className={\"Label\"}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n\n};\n\nexport default Input;\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\nimport \"./EquipmentAdmin.scss\";\n\ninterface IProps {\n  roomId: string;\n  onEquipmentToggleClick: (roomId: string, type: EquipmentType) => void;\n}\n\nexport const EquipmentAdmin: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"EquipmentAdmin\">\n      <label>Room Equipment</label>\n      {Object.values(EquipmentType).map((type: any) => {\n        // tslint:disable-next-line: jsx-no-multiline-js\n        // tslint:disable-next-line: max-line-length\n        return <div key={type}><button type=\"button\" onClick={() => props.onEquipmentToggleClick(props.roomId, type)}>{type}</button></div>;\n      })}\n    </div>\n  );\n};\n\nexport default EquipmentAdmin;\n","import React, { ChangeEvent, Component } from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport Room from \"../../../models/Room\";\nimport { checkValidity, updateObject } from \"../../../shared/utility\";\nimport Button from \"../../UI/Button/Button\";\nimport Input from \"../../UI/Input/Input\";\nimport EquipmentAdmin from \"../EquipmentAdmin/EquipmentAdmin\";\nimport \"./AdminPanel.scss\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\n\ninterface IAdminPanelProps {\n  onSettingsSaved: (settings: any) => void;\n  onEquipmentToggleClick: (roomId: string, type: EquipmentType) => void;\n  onCancel: () => void;\n  onConnect: () => void;\n}\n\ninterface IAdminPanelState {\n  formIsValid: boolean;\n  formData: any;\n}\n\nclass AdminPanel extends Component<IAdminPanelProps, IAdminPanelState> {\n  static getDerivedStateFromProps(props: any, state: any) {\n    return {\n      formData: {\n        ...state.formData,\n        clientId: { ...state.formData.clientId, value: props.syncSettings.clientId },\n        apiKey: { ...state.formData.apiKey, value: props.syncSettings.apiKey },\n        calendarId: { ...state.formData.calendarId, value: props.syncSettings.calendarId },\n      },\n    };\n  }\n\n  state: IAdminPanelState = {\n    formData: {\n      roomName: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Conference room 1\",\n        },\n        label: \"Room name\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      clientId: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Client ID from google calendar API\",\n        },\n        label: \"Client ID\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      apiKey: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"API key from google calendar API\",\n        },\n        label: \"API key\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      calendarId: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Calendar ID can be found in google calendar settings\",\n        },\n        label: \"Calendar ID\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    formIsValid: false,\n  };\n\n  private selectedRoom: Room;\n  private roomEquipment: Equipment[];\n  private syncSettings: any;\n\n  constructor(props: any) {\n    super(props);\n\n    this.selectedRoom = { ...props.selectedRoom };\n    this.roomEquipment = { ...props.roomEquipment };\n    this.syncSettings = { ...props.syncSettings };\n\n    if (!this.selectedRoom.id) {\n      this.selectedRoom = { ... new Room(\"Conference Room 1\") };\n    }\n\n    this.state.formData.roomName.value = this.selectedRoom.name;\n    this.state.formData.clientId.value = this.syncSettings.clientId;\n    this.state.formData.apiKey.value = this.syncSettings.apiKey;\n    this.state.formData.calendarId.value = this.syncSettings.calendarId;\n  }\n\n  inputChangedHandler = (event: ChangeEvent<HTMLInputElement>, inputIdentifier: any) => {\n    const updatedFormElement = updateObject(this.state.formData[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.formData[inputIdentifier].validation),\n      touched: true,\n    });\n    const updatedFormData = updateObject(this.state.formData, {\n      [inputIdentifier]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    // tslint:disable-next-line: forin\n    for (const inputId in updatedFormData) {\n      formIsValid = updatedFormData[inputId].valid && formIsValid;\n    }\n\n    this.setSyncSettings(updatedFormData);\n    this.setState({ formData: updatedFormData, formIsValid });\n\n    this.selectedRoom.name = updatedFormData.roomName.value;\n    const newSettings = {\n      syncSettings: this.syncSettings,\n      room: this.selectedRoom,\n    };\n\n    this.props.onSettingsSaved(newSettings);\n  }\n\n  setSyncSettings(data: any) {\n    this.syncSettings = {\n      clientId: data.clientId.value,\n      apiKey: data.apiKey.value,\n      calendarId: data.calendarId.value,\n    };\n\n    console.log(\"[AdminPanel] setSyncSettings: \", this.syncSettings);\n  }\n\n  cancel() {\n    this.props.onCancel();\n  }\n\n  connect() {\n    console.log(`[AdminPanel] connect with clientId ${this.syncSettings.clientId} apiKey: ${this.syncSettings.apiKey}`);\n    this.props.onConnect();\n  }\n\n  render() {\n    const formElementsArray = [];\n    // tslint:disable-next-line: forin\n    for (const key in this.state.formData) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.formData[key],\n      });\n    }\n    const form = (\n      <form>\n        {// tslint:disable-next-line: jsx-no-multiline-js\n          formElementsArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            label={formElement.config.label}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event: any) => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <div>\n          <EquipmentAdmin\n            roomId={this.selectedRoom.id}\n            onEquipmentToggleClick={this.props.onEquipmentToggleClick}\n          />\n        </div>\n        <div>\n          <button type=\"button\" onClick={() => this.connect()}>Connect</button>\n        </div>\n        <div className=\"AdminPanelButtons\">\n          <Button\n            style=\"icon-text-large\"\n            btnClassName=\"btn_dark\"\n            label=\"Close\"\n            // [TODO] change icon\n            iconId=\"icon-exit\"\n            onClick={() => this.cancel()}\n          />\n        </div>\n\n      </form>\n\n    );\n    return (\n      <div className=\"AdminPanel\">\n        <h3>Admin Panel</h3>\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default AdminPanel;\n","import { EquipmentStatus } from \"./EquipmentStatus\";\nimport { EquipmentType } from \"./EquipmentType\";\nimport { uuidv4 } from \"../shared/utility\";\n\nexport class Equipment {\n  public id: string;\n\n  constructor(public roomId: string, public type: EquipmentType, public status: EquipmentStatus) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: {\n    entity: {} as {[id: string]: Equipment },\n  },\n  reducers: {\n    addEquipment: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n    },\n    deleteEquipment: (state, action) => {\n      delete state.entity[action.payload.id];\n    },\n    toggleEquipment: (state, action) => {\n      console.log('toggle equipment: ', action);\n      const roomId = action.payload.roomId;\n      const type = action.payload.type;\n      const equipmentFound = Object.values(state.entity).filter((eq: Equipment) => eq.roomId === roomId && eq.type === type)[0];\n      if (equipmentFound) {\n        delete state.entity[equipmentFound.id];\n      } else {\n        const newEquipment = new Equipment(roomId, type, EquipmentStatus.Available);\n        state.entity[newEquipment.id] = {...newEquipment};\n      }\n    },\n    setStatus: (state, action) => {\n      state.entity[action.payload.id].status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment = state.entity[action.payload.id];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const isConnected = createSelector(\n  [\"syncProvider.connected\"],\n);\n\nexport const isConnecting = createSelector(\n  [\"syncProvider.connecting\"],\n);\n\nexport const hasAutoSync = createSelector(\n  [\"syncProvider.autoSync\"],\n);\n\nexport const getSyncSettings = createSelector(\n  [\"syncProvider.syncSettings\"],\n);\n","import { createSlice } from \"redux-starter-kit\";\n\nconst syncProviderSlice = createSlice({\n  slice: \"syncProvider\",\n  initialState: {\n    connecting: false,\n    connected: false,\n    connectionMessage: \"\",\n    errorLog: [] as string[],\n    autoSync: false,\n    syncSettings: {},\n    syncing: false,\n    lastSynced: 0 as number,\n    syncMessage: \"\"\n  },\n  reducers: {\n    connectionStarted: (state, action) => {\n      state.connecting = true\n    },\n    connectionSucceeded: (state, action) => {\n      state.connecting = false;\n      state.connected = true;\n      state.autoSync = true;\n      state.connectionMessage = \"Connection established.\";\n    },\n    connectionFailed: (state, action) => {\n      state.connecting = false;\n      state.connected = false;\n      state.autoSync = false;\n      state.connectionMessage = action.payload.message;\n      state.errorLog = [ ...state.errorLog, action.payload.error];\n    },\n    syncStarted: (state, action) => {\n      state.syncing = true\n    },\n    syncSucceeded: (state, action) => {\n      state.syncing = false;\n      state.lastSynced = Date.now();\n      state.syncMessage = \"Sync succeeded.\";\n\n    },\n    syncFailed: (state, action) => {\n      state.syncing = false;\n      state.syncMessage = action.payload.message;\n      state.errorLog = [ ...state.errorLog, action.payload.error];\n    },\n\n    setSyncSettings: (state, action) => {\n      state.syncSettings = action.payload;\n      return state;\n    }\n  }\n});\n\nexport default syncProviderSlice","import { uuidv4, roundEpochToMinutes } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n  public extId?: string;\n  public extStatus?: string;\n\n  // From and to are epochs rounded to minutes\n  constructor(public title: string, public roomId: string, public from: number, public to: number) {\n    this.id = uuidv4();\n    this.from = roundEpochToMinutes(this.from);\n    this.to = roundEpochToMinutes(this.to);\n  }\n}\n","import Allocation from \"../models/Allocation\";\nimport ISyncProvider from \"./ISyncProvider\";\nimport { maxSyncResults } from \"../shared/consts\";\n\nexport class GoogleSyncProvider implements ISyncProvider {\n\n  private get gapi(): any {\n    return (window as any).gapi;\n  }\n\n  // Array of API discovery doc URLs for APIs used by the quickstart\n  private readonly DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n  // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n  private readonly SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n\n  private readonly CONFIG = {\n    apiKey: \"[googleApi] apiKey not provided!!\",\n    clientId: \"[googleApi] clientId not provided!!\",\n    discoveryDocs: this.DISCOVERY_DOCS,\n    scope: this.SCOPES,\n  };\n\n  constructor() {\n    this.handleClientLoad();\n  }\n\n  public connect(clientId: string, apiKey: string): Promise<string> {\n    try {\n      if (!clientId || !apiKey) {\n        console.log(\"[GoogleSyncProvider] Connect error. Both clientId and apiKey need to be provided.\");\n        return Promise.reject(new Error(`[GoogleSyncProvider] Connect error. Both clientId and apiKey need to be provided.`));\n      }\n\n      this.CONFIG.clientId = clientId;\n      this.CONFIG.apiKey = apiKey;\n\n      if (this.gapi && this.gapi.client) {\n        console.log(\"[GoogleSyncProvider] Begin initClient, Config: \", this.CONFIG);\n\n        return this.initClient(this.CONFIG);\n      } else {\n        return Promise.reject(new Error(`[GoogleSyncProvider] Connect gapi client not loaded error`));\n      }\n    } catch (error) {\n      return Promise.reject(new Error(`[GoogleSyncProvider] Connect unknown error: ${error}`));\n    }\n\n  };\n\n  // Get allocations for next 24 hours\n  getAllocations(roomId: string, calendarId: string): Promise<Allocation[]> {\n    console.log(\"[GoogleSyncProvider] getAllocations\");\n    try {\n      if (!roomId || !calendarId) {\n        console.log(\"[GoogleSyncProvider] getAllocations error. Both roomId and calendarId need to be provided.\");\n        return Promise.reject(new Error(`[GoogleSyncProvider] Connect error. Both roomId and calendarId need to be provided.`));\n      };\n\n      if (this.gapi) {\n        console.log(\"[GoogleSyncProvider] gapi.client.calendar.events.list for calendarId: \", calendarId);\n        if (this.gapi.client && this.gapi.client.calendar) {\n          return this.fetchEvents(roomId, calendarId);\n        } else {\n          console.log(\"[GoogleSyncProvider] Error: gapi.client or gapi.client.calendar not loaded\");\n          // This mostly means not connected\n          return Promise.reject(new Error(`[GoogleSyncProvider] gapi.client or gapi.client.calendar not loaded`));\n        }\n      } else {\n        console.log(\"[GoogleSyncProvider] Error: gapi not loaded\");\n        return Promise.reject(new Error(`[GoogleSyncProvider] this.gapi not loaded`));\n      }\n    } catch (error) {\n      console.log(\"[GoogleSyncProvider] Error: unknown error\", error);\n      return Promise.reject(new Error(`[GoogleSyncProvider] Connect unknown error: ${error}`));\n    }\n  }\n\n  fetchEvents(roomId: string, calendarId: string): Promise<Allocation[]> {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n\n    return this.gapi.client.calendar.events.list({\n      calendarId,\n      orderBy: \"startTime\",\n      maxResults: maxSyncResults,\n      showDeleted: true,\n      singleEvents: true,\n      timeMin: today.toISOString(),\n      timeMax: tomorrow.toISOString(),\n    }).then((response: any) => {\n      console.log(\"[GoogleSyncProvider] succesful events retrieved: \", response.result.items);\n      return this.syncEvents(roomId, response.result.items);\n    }).catch((error: any) => {\n      console.log(\"[GoogleSyncProvider] error while events retrievel: \", error);\n      return Promise.reject(new Error(`[GoogleSyncProvider] error while events retrievel:\", ${error}`));\n    });\n  }\n\n  private handleClientLoad() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    script.onload = () => {\n      // [TODO] can we also have error callback?\n      this.gapi.load(\"client:auth2\", () => console.log(\"[Google Api] gapi loaded\"));\n    };\n  }\n\n  private initClient(config: any): Promise<any> {\n    return this.gapi.client.init(config)\n      .then(() => {\n        console.log(\"[GoogleSyncProvider] Client init success\");\n\n        // Why is sometimes getauthinstance null?\n        return this.gapi.auth2.getAuthInstance().signIn()\n          .then((user: any) => {\n            console.log(`[GoogleSyncProvider] Authorization successfull`, user);\n          })\n          .catch((error: any) => {\n            console.log(`[GoogleSyncProvider] Authorization error`, error);\n          });\n      })\n      .catch((error: any) => {\n        console.log(\"[GoogleSyncProvider] Client init error:\", error);\n        return Promise.reject(new Error(`[GoogleSyncProvider] Client init error:\", ${error}`));\n      });\n  }\n\n  private syncEvents(roomId: string, events: any): Allocation[] {\n    console.log(\"[GoogleSyncProvider] SyncEvents: \", events);\n    const mappedEvents = events.map((event: any) => {\n      const a = new Allocation(\n        event.summary,\n        roomId,\n        new Date(event.start.dateTime).getTime(),\n        new Date(event.end.dateTime).getTime());\n      if (event.attendees) {\n        a.attendees = event.attendees.length;\n      }\n      if (event.organizer && event.organizer.displayName) {\n        a.by = event.organizer.displayName;\n      }\n      a.extId = event.id;\n      a.extStatus = event.status;\n      return { ...a };\n    });\n\n    console.log(\"[GoogleSyncProvider] mappedEvents: \", mappedEvents);\n    return mappedEvents;\n  }\n\n}\n\nexport default GoogleSyncProvider;\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\nimport { roundEpochToMinutes } from \"../../shared/utility\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    deleteAllocation: (state, action) => {\n      delete state.entity[action.payload.id];\n      // this operation can be costly\n      state.ids = state.ids.filter((id: string) => id !== action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload.id].to = roundEpochToMinutes(action.payload.time);\n      state.entity[action.payload.id].confirmed = true;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = roundEpochToMinutes(action.payload.time);\n    },\n    // [TODO] sync adhoc meetings to external source\n    syncExternalAllocations: (state, action) => {\n      console.log(\"[AllocationSlice:syncExternalAllocations] : \", action);\n      // [TODO] Delete objects with extId && !confirmed && not in newAllocations\n      const newAllocations: Allocation[] = action.payload;\n      const expiredAllocations = Object.values(state.entity).filter((sa: Allocation) => !!sa.extId && !sa.confirmed && !newAllocations.find((a: Allocation) => a.extId === sa.extId));\n      for (const deleteAllocation of expiredAllocations) {\n        delete state.entity[deleteAllocation.id];\n        // this operation can be costly\n        state.ids = state.ids.filter((id: string) => id !== deleteAllocation.id);\n      };\n\n      // For each allocation in payload\n      for (const allocation of newAllocations) {\n        // check if exist entry with extId = id\n        const foundAllocation = Object.values(state.entity).find((sa: Allocation) => sa.extId === allocation.extId);\n        if (foundAllocation) {\n          // if exists entry then check the status !== confirmed, if yes delete, else update \n          if (allocation.extStatus !== \"confirmed\") {\n            delete state.entity[foundAllocation.id];\n            // this operation can be costly\n            state.ids = state.ids.filter((id: string) => id !== foundAllocation.id);\n          } else {\n            // update if meeting isn't yet confirmed \n            if (!foundAllocation.confirmed) {\n              foundAllocation.from = allocation.from;\n              foundAllocation.to = allocation.to;\n              foundAllocation.title = allocation.title;\n            }\n          }\n        } else {\n          // if no entry check status === confirmed, if yes add\n          if (allocation.extStatus === \"confirmed\") {\n            state.entity[allocation.id] = allocation;\n            state.ids.push(allocation.id);\n          }\n        }\n      }\n    }\n  },\n});\n\nexport default allocationSlice;\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\nimport reduceReducers from \"reduce-reducers\";\nimport { crossSliceReducer } from \"./CrossSlice/CrossSliceReducer\";\nimport syncProviderSlice from \"./SyncProvider/SyncProviderSlice\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst combinedReducers = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n  syncProvider: syncProviderSlice.reducer,\n});\n\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer);\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../../shared/cacheManager\";\nimport * as actions from \"./CrossSliceActions\";\n\nexport const crossSliceReducer = (state: any, action: any) => {\n  let newState: any = {...state};\n  newState.ui = {...newState.ui};\n\n  switch (action.type) {\n    case \"@@INIT\":\n      newState.ui.selectedRoomId = newState.room.ids[0];\n      return newState;\n    case actions.removeStateStarted.toString():\n      newState.ui.stateSyncInProgress = true;\n      return newState;\n    case actions.removeStateSucceeded.toString():\n      newState.ui.stateSyncInProgress = false;\n      return newState;\n    case actions.removeStateFailed.toString():\n      newState.ui.stateSyncInProgress = false;\n      newState.ui.stateSyncError = action.payload;\n      return newState;\n    case actions.saveStateStarted.toString():\n      newState.ui.stateSyncInProgress = true;\n      return newState;\n    case actions.saveStateSucceeded.toString():\n      newState.ui.stateSyncInProgress = false;\n      return newState;\n    case actions.saveStateFailed.toString():\n      newState.ui.stateSyncInProgress = false;\n      newState.ui.stateSyncError = action.payload;\n      return newState;\n    case actions.loadStateStarted.toString():\n      newState.ui.stateSyncInProgress = true;\n      return newState;\n    case actions.loadStateSucceeded.toString():\n      // [TODO] if new version arrive, state shuold be cleaned, or retrofitted.\n      newState = {...newState, ...action.payload};\n      newState.ui.time = Date.now();\n      newState.ui.stateSyncInProgress = false;\n\n      return newState;\n    case actions.loadStateFailed.toString():\n      newState.ui.stateSyncInProgress = false;\n      newState.ui.stateSyncError = action.payload;\n      return newState;\n    default:\n      return state;\n  }\n}\n","import ISyncProvider from \"./ISyncProvider\";\nimport GoogleSyncProvider from \"./GoogleSyncProvider\";\nimport Allocation from \"../models/Allocation\";\nimport { getSelectedRoomId } from \"../store/UI/UISelectors\";\nimport store from \"../store/store\";\nimport allocationSlice from \"../store/Allocation/AllocationSlice\";\nimport { getSyncSettings } from \"../store/SyncProvider/SyncProviderSelectors\";\n\nconst syncProvider: ISyncProvider = new GoogleSyncProvider();\n\nexport const Connect = (clientId: string, apiKey: string): Promise<string> => {\n  return syncProvider.connect(clientId, apiKey);\n};\n\nexport const Sync = (roomId: string, calendarId: string): Promise<Allocation[]> => {\n  return syncProvider.getAllocations(roomId, calendarId)\n    .then((allocations: Allocation[]) => {\n      store.dispatch(allocationSlice.actions.syncExternalAllocations(allocations));\n      return allocations;\n    });;\n};","import syncProviderSlice from \"./SyncProviderSlice\";\nimport * as syncProvider from \"../../providers/SyncProvider\";\nimport { getSelectedRoomId } from \"../UI/UISelectors\";\nimport { getSyncSettings } from \"./SyncProviderSelectors\";\n\nexport const connect = () => (dispatch: any, getState: any) => {\n  dispatch(syncProviderSlice.actions.connectionStarted());\n\n  const syncSettings = getSyncSettings(getState());\n\n  return syncProvider.Connect(syncSettings.clientId, syncSettings.apiKey).then(\n    () => dispatch(syncProviderSlice.actions.connectionSucceeded()),\n    (error) => dispatch(syncProviderSlice.actions.connectionFailed({ message: error.message, error: error.message })),\n  );\n};\n\nexport const disconnect = () => (dispatch: any) => {\n  // [TODO];\n};\n\nexport const sync = () => (dispatch: any, getState: any) => {\n  dispatch(syncProviderSlice.actions.syncStarted());\n\n  const roomId = getSelectedRoomId(getState());\n  const syncSettings = getSyncSettings(getState());\n\n  return syncProvider.Sync(roomId, syncSettings.calendarId).then(\n    () => dispatch(syncProviderSlice.actions.syncSucceeded()),\n    (error) => dispatch(syncProviderSlice.actions.syncFailed({ message: error.message, error: error.message })),\n  );\n};","import { connect } from \"react-redux\";\nimport * as selectors from \"../../store/selectors\";\nimport roomSlice from \"../../store/Room/RoomSlice\";\nimport Room from \"../../models/Room\";\nimport {saveState, removeState} from \"../../store/CrossSlice/CrossSliceActions\";\nimport uiSlice from \"../../store/UI/UISlice\";\nimport AdminPanel from \"../../components/Admin/AdminPanel/AdminPanel\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport { getSyncSettings } from \"../../store/SyncProvider/SyncProviderSelectors\";\nimport syncProviderSlice from \"../../store/SyncProvider/SyncProviderSlice\";\nimport { connect as syncConnect } from \"../../store/SyncProvider/SyncProviderActions\";\n\nconst mapStateToProps = (state: any) => {\n  const selectedRoom = selectors.getSelectedRoom(state);\n  const roomEquipment = selectors.getSelectedRoomEquipment(state);\n  const syncSettings = getSyncSettings(state);\n\n  return {\n    selectedRoom,\n    roomEquipment,\n    syncSettings,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSettingsSaved: (settings: any) => {\n      dispatch(roomSlice.actions.changeRoomName({...settings.room}));\n      // [TODO] temporary solution, need to be changed when multiple room management will be added\n      dispatch(uiSlice.actions.setSelectedRoomId(settings.room.id));\n      dispatch(syncProviderSlice.actions.setSyncSettings(settings.syncSettings));\n      // dispatch(uiSlice.actions.hideAdminPanel());\n      dispatch(saveState());\n    },\n    onEquipmentToggleClick: (roomId: string, type: string) => {\n      console.log(\"onEquipmentToggleClick\");\n      dispatch(equipmentSlice.actions.toggleEquipment({roomId, type}));\n    },\n    onSettingsClear: () => {\n      dispatch(removeState());\n    },\n    onCancel: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onConnect: () => {\n      dispatch(syncConnect());\n    }\n  };\n};\n\nconst Admin = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AdminPanel);\n\nexport default Admin;\n","import React from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\nimport Button from \"../../UI/Button/Button\";\n\ninterface IProps {\n  equipment: Equipment[];\n  onChangeStatusClick: (e: Equipment) => void;\n}\n\nexport const EquipmentBar: React.FC<IProps> = (props: IProps) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return <Button\n      key={e.type}\n      style=\"icon\"\n      onClick={() => props.onChangeStatusClick(e)}\n      iconId={`icon-${e.type.toLowerCase()}`}\n      btnClassName={`btn_${e.status.toLowerCase()}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default EquipmentBar;\n","import React, { ReactNode } from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\n\ninterface IProps {\n  roomStatus: RoomStatus;\n  children: ReactNode;\n}\n\nexport const RoomStatusBorder: React.FC<IProps> = (props: IProps) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default RoomStatusBorder;\n","import React from \"react\";\nimport EquipmentBar from \"./EquipmentBar/EquipmentBar\";\nimport \"./Header.scss\";\nimport RoomStatusBorder from \"../Room/RoomStatusBorder/RoomStatusBorder\";\nimport { RoomStatus } from \"../../models/RoomStatus\";\nimport Room from \"../../models/Room\";\nimport { Equipment } from \"../../models/Equipment\";\n\ninterface IProps {\n  room: Room;\n  roomStatus: RoomStatus;\n  equipment: Equipment[];\n  onChangeStatusClick: (e: Equipment) => void;\n}\n\nexport const Header: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"Header\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <div className=\"HeaderContent\">\n          <div><h1>{props.room.name}</h1></div>\n          <div>{new Date().toLocaleDateString()}</div>\n          <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick} />\n        </div>\n      </RoomStatusBorder>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes, formatHoursMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\ninterface IProps {\n  title: string;\n  from: number;\n  to: number;\n  time: number;\n}\n\nexport const AllocationInfo: React.FC<IProps> = (props: IProps) => {\n  const startsIn = millisecondsToMinutes(props.from - props.time);\n\n  return (\n    <div className=\"AllocationInfo\">\n      <div className=\"text-very-small text-gray\">Next Meeting</div>\n      <div><h4>{props.title}</h4></div>\n      <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      <div>Starts In: {formatHoursMinutes(startsIn)}</div>\n    </div>\n  );\n};\n\nexport default AllocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes, formatHoursMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\ninterface IProps {\n  title: string;\n  from: number;\n  to: number;\n  time: number;\n  attendees?: number;\n}\n\nexport const AllocationInfoBig: React.FC<IProps> = (props: IProps) => {\n  const timeTillEnd = millisecondsToMinutes(props.to - props.time);\n  const duration = millisecondsToMinutes(props.to - props.from);\n  const timeInMeeting = duration - timeTillEnd;\n\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">\n        <div className=\"text-small text-gray\">In Progress</div>\n        <div><h2>{props.title}</h2></div>\n        <div><span>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</span></div>\n        <div>Ends In: {formatHoursMinutes(timeTillEnd)}</div>\n        {props.attendees ? <div>{props.attendees} attendees</div> : null}\n      </div>\n    </>\n  );\n};\n\nexport default AllocationInfoBig;\n","import React from \"react\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport \"./AllocationMenu.scss\";\nimport Button from \"../../UI/Button/Button\";\nimport Allocation from \"../../../models/Allocation\";\nimport { defaultExtendDuration } from \"../../../shared/consts\";\n\ninterface IProps {\n  roomId: string;\n  time: number;\n  roomStatus: RoomStatus;\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const AllocationMenu: React.FC<IProps> = (props: IProps) => {\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, props.time, defaultExtendDuration)}\n          iconId=\"icon-calendar-plus-o\"\n          label=\"Extend\"\n        />\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onFinishEarlyClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-times-o\"\n          label=\"Finish\"\n        />\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id, props.time)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onAddMeetingClick(props.roomId, props.time)}\n          iconId=\"icon-calendar-o\"\n          label=\"Book now\"\n        />\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default AllocationMenu;\n","import React from \"react\";\nimport Admin from \"../../../containers/Admin/Admin\";\nimport AllocationInfo from \"../../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../../Allocation/AllocationMenu/AllocationMenu\";\nimport \"./AllocationsView.scss\";\nimport Room from \"../../../models/Room\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport Allocation from \"../../../models/Allocation\";\n\ninterface IProps {\n  room: Room;\n  time: number;\n  roomStatus: RoomStatus;\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const AllocationsView: React.FC<IProps> = (props: IProps) => {\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <Admin />;\n  }\n\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  // [TODO] Overlapping events, if current event is overlapping next\n  if (props.currentAllocation) {\n    currentAllocationTag =\n      <AllocationInfoBig\n        time={props.time}\n        {...props.currentAllocation}\n      />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo time={props.time} {...props.nextAllocation} />;\n  }\n\n  return (\n    <div className=\"AllocationsView\">\n      <div className=\"Allocations\">\n        {currentAllocationTag}\n        {nextAllocationTag}\n      </div>\n      <AllocationMenu\n        roomId={props.room.id}\n        time={props.time}\n        currentAllocation={props.currentAllocation}\n        nextAllocation={props.nextAllocation}\n        roomStatus={props.roomStatus}\n        onFinishEarlyClick={props.onFinishEarlyClick}\n        onExtendMeetingClick={props.onExtendMeetingClick}\n        onConfirmMeetingClick={props.onConfirmMeetingClick}\n        onAddMeetingClick={props.onAddMeetingClick}\n      />\n    </div>\n\n  );\n};\n\nexport default AllocationsView;\n","import React from \"react\";\nimport { formatTimeStamp, dayMinuteToRadian } from \"../../../shared/utility\";\nimport \"./RoomClock.scss\";\nimport { minutesInDay, minutesInHour, oneHour, clockHoursBackwards, clockHoursForward } from \"../../../shared/consts\";\nimport Allocation from \"../../../models/Allocation\";\n\ninterface IProps {\n  time: number;\n  allocations: Allocation[];\n}\n\n// [TODO] show overlapping events with different color,\n// in general overlapping events should be tested if they work correctly\nexport const RoomClock: React.FC<IProps> = (props: IProps) => {\n  const defaultLineWidth = 10;\n  const mainRadius = 200;\n\n  const tickWidth = 6;\n  const tickRadius = 170;\n  const tickLength = 25;\n  const canvasSize = 500;\n  const colorWhite = \"#FFF\";\n  const colorBlack = \"#000\";\n  const colorGreen = \"#4CAF50\"; // \"rgb(139, 195, 74)\";\n  const colorRed = \"rgba(244, 67, 54, 0.5)\"; // \"rgba(255, 87, 34, 0.5)\" // \"#F44336\"; // ;\n\n  const drawCircleStroke = (ctx: any, fromMinute: number, toMinute: number, color: string,\n                            radius?: number, lineWidth?: number, lineCap?: string) => {\n    const clockRadius = radius || mainRadius;\n\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth || defaultLineWidth;\n    ctx.strokeStyle = color;\n    ctx.lineCap = lineCap || \"butt\";\n\n    const startAngle = dayMinuteToRadian(fromMinute);\n    const endAngle = dayMinuteToRadian(toMinute);\n\n    ctx.arc(canvasSize / 2, canvasSize / 2, clockRadius, startAngle, endAngle);\n    ctx.stroke();\n  };\n\n  const UTCToClockTime = (epoch: number): number => {\n    const date = new Date(0);\n    date.setUTCMilliseconds(epoch);\n    return date.getHours() * minutesInHour + date.getMinutes();\n  };\n\n  const capLimitMin = (currentTime: number, limitTime: number, minHourRange: number): number => {\n    return Math.max(limitTime, currentTime - minHourRange * oneHour);\n  };\n\n  const capLimitMax = (currentTime: number, limitTime: number, maxHourRange: number): number => {\n    return Math.min(limitTime, currentTime + maxHourRange * oneHour);\n  };\n\n  const drawCurrentTime = (ctx: any) => {\n    const minutes = UTCToClockTime(props.time);\n\n    // Draw available slots for whole day\n    drawCircleStroke(ctx,\n      minutes - clockHoursBackwards * minutesInHour,\n      minutes + clockHoursForward * minutesInHour,\n      colorGreen, mainRadius, defaultLineWidth, \"round\");\n\n    // Draw busy slots for given allocations\n    const mappedAllocations = props.allocations\n    .map((a: Allocation) => ({from: UTCToClockTime(capLimitMin(props.time, a.from, clockHoursBackwards)),\n                       to: UTCToClockTime(capLimitMax(props.time, a.to, clockHoursForward))}));\n\n    mappedAllocations\n    .forEach((e: {from: number, to: number}) => {\n      drawCircleStroke(ctx, e.from, e.to, colorBlack, mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n    });\n\n    mappedAllocations\n    .forEach((e: {from: number, to: number}) => {\n      drawCircleStroke(ctx, e.from, e.from + 1, colorRed, mainRadius - defaultLineWidth, 3 * defaultLineWidth);\n      drawCircleStroke(ctx, e.from, e.to, colorRed, mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n      drawCircleStroke(ctx, e.to, e.to + 1, colorRed, mainRadius - defaultLineWidth , 3 * defaultLineWidth);\n    });\n\n    // Draw current time\n    drawCircleStroke(ctx, minutes - (tickWidth / 2 - 1), minutes + tickWidth / 2, colorWhite, tickRadius, tickLength);\n    drawCircleStroke(ctx, minutes, minutes + 1, colorBlack, mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n\n    // draw 30 min slots\n    for (let i = 0; i < 24; i++) {\n      const minutesInHalfHour = minutesInHour / 2;\n      // long line on each full hour and short on not full hour\n      if (i % 2) {\n        drawCircleStroke(ctx, i * minutesInHalfHour, i * minutesInHalfHour + 1, colorWhite, 198, 12);\n      } else {\n        drawCircleStroke(ctx, i * minutesInHalfHour, i * minutesInHalfHour + 1, colorWhite,\n          mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n      }\n    }\n  };\n\n  const canvas: any = React.createRef();\n  // [TODO] This component need to be smart component and this timeout then can be removed\n  setTimeout(() => {\n    if (canvas.current && canvas.current.getContext) {\n      const ctx = canvas.current.getContext(\"2d\");\n\n      canvas.current.width = canvasSize;\n      canvas.current.height = canvasSize;\n      drawCurrentTime(ctx);\n    }\n  }, 10);\n\n  return (\n    <div className=\"RoomClock\">\n      <span>{formatTimeStamp(props.time)}</span>\n      <canvas className=\"RoomClockCanvas\" id=\"canvas\" ref={canvas} />\n    </div>\n  );\n};\n\nexport default RoomClock;\n","import React from \"react\";\nimport AllocationsView from \"../../Allocation/AllocationsView/AllocationsView\";\nimport RoomClock from \"../RoomClock/RoomClock\";\nimport \"./RoomViewContent.scss\";\nimport Allocation from \"../../../models/Allocation\";\nimport Room from \"../../../models/Room\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\n\ninterface IProps {\n  clockAllocations: Allocation[];\n  room: Room;\n  time: number;\n  roomStatus: RoomStatus;\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const RoomViewContent: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"RoomViewContent\">\n      <RoomClock time={props.time} allocations={props.clockAllocations} />\n      <div className=\"RoomViewContentSeparator\" />\n      <AllocationsView {...props} />\n    </div>\n  );\n};\n\nexport default RoomViewContent;\n","import React from \"react\";\nimport \"./StatusBar.scss\";\nimport Button from \"../../UI/Button/Button\";\nimport SignInButton from \"../../Google/SignInButton\";\n\ninterface IProps {\n  onAdminClick: () => void;\n}\n\nexport const StatusBar: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"StatusBar\">\n      <Button style=\"icon-text\" btnClassName=\"btn_dark\" onClick={props.onAdminClick} iconId=\"icon-settings\" label=\"Admin\" />\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport { RoomStatus } from \"../../models/RoomStatus\";\nimport RoomStatusBorder from \"../Room/RoomStatusBorder/RoomStatusBorder\";\nimport \"./Footer.scss\";\nimport StatusBar from \"./StatusBar/StatusBar\";\n\ninterface IProps {\n  roomStatus: RoomStatus;\n  onAdminClick: () => void;\n}\n\nexport const Footer: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"Footer\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <StatusBar onAdminClick={props.onAdminClick}/>\n      </RoomStatusBorder>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport \"./Backdrop.scss\";\n\nexport const Backdrop: React.FC = () => {\n  return (\n    <div className=\"Backdrop\"/>\n  );\n};\n\nexport default Backdrop;\n","import React from \"react\";\nimport \"./Popup.scss\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Popup = (props: any) => {\n  const classes = [\"Popup\"];\n  if (props.open) {\n    classes.push(\"open\");\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <Backdrop/>\n      <div className=\"PopupContent\">\n        <Button\n          btnClassName=\"PopupClose btn_dark\"\n          style=\"text\"\n          onClick={props.onCloseClick}\n          label=\"x\"\n        />\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import React from \"react\";\nimport Admin from \"../../../containers/Admin/Admin\";\nimport Header from \"../../Header/Header\";\nimport RoomViewContent from \"../RoomViewContent/RoomViewContent\";\nimport \"./RoomView.scss\";\nimport Footer from \"../../Footer/Footer\";\nimport Popup from \"../../UI/Popup/Popup\";\nimport Room from \"../../../models/Room\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport Allocation from \"../../../models/Allocation\";\n\ninterface IProps {\n  time: number;\n  room: Room;\n  roomStatus: RoomStatus;\n  equipment: Equipment[];\n  adminPanelOpen: boolean;\n  clockAllocations: Allocation[];\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  onChangeStatusClick: (e: Equipment) => void;\n  onAdminClick: () => void;\n  onPopupCloseClick: () => void;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const RoomView: React.FC<IProps> = (props: IProps) => {\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <span>No room provided</span>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <Header {...props} />\n      <RoomViewContent {...props} />\n      <Footer {...props} />\n      <Popup open={props.adminPanelOpen} onCloseClick={props.onPopupCloseClick}>\n        <Admin />\n      </Popup>\n    </div>\n  );\n};\n\nexport default RoomView;\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/Room/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { defaultConfirmationThreshold, defaultMeetingDuration } from \"../../shared/consts\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getAdminPanelOpen, getDate } from \"../../store/UI/UISelectors\";\nimport uiSlice from \"../../store/UI/UISlice\";\n\nconst mapStateToProps = (state: any) => {\n  // console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const adminPanelOpen = getAdminPanelOpen(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n\n  // [TODO] move all magin numbers to a config const file\n  // [TODO] set proper threshold for confirmation 5 min\n  const roomStatus = selectors.getSelectedRoomStatus(defaultConfirmationThreshold)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocation(state);\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  // get allocations for clock\n  const clockAllocations = selectors.getRoomClockAllocations(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n    adminPanelOpen,\n    clockAllocations,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAdminClick: () => {\n      dispatch(uiSlice.actions.showAdminPanel());\n    },\n    onPopupCloseClick: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onAddMeetingClick: (roomId: string, time: number) => {\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", roomId, time, time + defaultMeetingDuration), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id, time}));\n    },\n    onExtendMeetingClick: (id: string, time: number, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, time, amount}));\n    },\n    onFinishEarlyClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.finishEarly({id, time}));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { roundEpochToMinutes } from \"../shared/utility\";\nimport { loadState, saveState } from \"./CrossSlice/CrossSliceActions\";\nimport store from \"./store\";\nimport { sync, connect } from \"./SyncProvider/SyncProviderActions\";\nimport { hasAutoSync } from \"./SyncProvider/SyncProviderSelectors\";\nimport uiSlice from \"./UI/UISlice\";\nimport { oneMinute } from \"../shared/consts\";\n\n// 1 minute refresh interval for timer\nconst refreshInterval = oneMinute;\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  const startState = store.getState();\n  console.log(\"[Start] startState:\", startState);\n  store.dispatch(loadState());\n  store.dispatch(connect());\n\n  // [TODO] once a day clean old entries\n  setInterval(() => {\n    console.log(\"[Start] Interval\");\n    // Set time to be alway 1 milliesecond after full minute\n    store.dispatch(uiSlice.actions.setTime(roundEpochToMinutes(Date.now()) + 1));\n\n    // [TODO] save state interval\n    store.dispatch(saveState());\n\n    // [TODO] sync interval\n    // [TODO] check if connected, can also be done in syncdefault\n\n\n    if (hasAutoSync(store.getState())) {\n      store.dispatch(sync());\n    }\n\n  }, refreshInterval);\n\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App/App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}