{"version":3,"sources":["models/RoomStatus.ts","shared/utility.ts","components/Room/Allocation/AllocationInfo/AllocationInfo.tsx","components/Room/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","store/selectors.ts","models/EquipmentStatus.ts","components/UI/Button/Button.tsx","components/Room/Allocation/AllocationMenu/AllocationMenu.tsx","components/Room/RoomStatusBorder/RoomStatusBorder.tsx","components/StatusBar/StatusBar.tsx","components/Room/TimeView/TimeView.tsx","components/Header/EquipmentBar/EquipmentBar.tsx","components/Header/Header.tsx","components/UI/Backdrop/Backdrop.tsx","components/UI/Popup/Popup.tsx","store/UI/UISelectors.ts","store/Room/RoomSlice.ts","models/Room.ts","store/crossSliceReducer.ts","shared/cacheManager.ts","store/UI/UISlice.ts","containers/AdminPanel/AdminPanel.tsx","components/Room/RoomView/RoomView.tsx","models/Allocation.ts","store/Allocation/AllocationSlice.ts","store/Equipment/EquipmentSlice.ts","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","store/store.ts","store/start.ts","index.tsx"],"names":["RoomStatus","formatTimeStamp","timeStamp","Date","toLocaleTimeString","hour","minute","hour12","uuidv4","replace","c","r","Math","random","toString","allocationInfo","props","console","log","react_default","a","createElement","className","from","to","by","title","Fragment","attendees","agenda","n","EquipmentStatus","Button","buttonElement","type","concat","btnClassName","onClick","aria-label","iconId","xlinkHref","label","allocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","id","currentAllocation","roomStatus","awaiting","UI_Button_Button","onConfirmMeetingClick","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","roomId","roomStatusBorder","classNames","push","join","children","StatusBar","onAdminClicked","timeView","time","equipmentBar","equipment","map","e","key","onChangeStatusClick","toLowerCase","status","mapEquipmentToButton","Header","room","name","EquipmentBar_EquipmentBar","Backdrop","Popup","classes","open","UI_Backdrop_Backdrop","onCloseClick","getDate","createSelector","getSelectedRoomId","getAdminPanelOpen","getSelectedRoom","rooms","entity","getSelectedRoomAllocations","allocation","Object","values","filter","getSelectedRoomCurrentAllocations","date","allocations","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getSelectedRoomNextAllocation","slice","getSelectedRoomCurrentAllocation","getSelectedRoomEquipment","length","roomSlice","createSlice","initialState","ids","reducers","addRoom","state","action","payload","changeRoomName","Room","classCallCheck","this","capacity","location","saveStateStarted","createAction","saveStateSucceeded","saveStateFailed","loadStateStarted","loadStateSucceeded","loadStateFailed","saveState","dispatch","getState","data","localforage","setItem","then","error","loadState","getItem","uiSlice","selectedRoomId","now","adminPanelOpen","syncInProgress","syncError","setSelectedRoomId","setTime","showAdminPanel","hideAdminPanel","AdminPanel","_this","possibleConstructorReturn","getPrototypeOf","call","selectedRoom","objectSpread","event","preventDefault","onSettingsSaved","newState","target","value","setState","_this2","onSubmit","submitSettings","placeholder","onChange","inputChangedHandler","Component","connect","selectors","actions","roomView","currentAllocationTag","AllocationInfoBig_AllocationInfoBig","nextAllocationTag","AllocationInfo_AllocationInfo","components_Header_Header","assign","RoomStatusBorder_RoomStatusBorder","TimeView_TimeView","AllocationMenu_AllocationMenu","components_StatusBar_StatusBar","onAdminClick","UI_Popup_Popup","onPopupCloseClick","containers_AdminPanel_AdminPanel","Allocation","confirmed","allocationSlice","addAllocation","finishEarly","extendMeeting","amount","confirmMeeting","equipmentSlice","addEquipment","toConsumableArray","setStatus","eq","changeStatus","newStatus","Available","Broken","NotAvailable","SelectedRoom","ownProps","threshold","occupied","free","RoomView","App","SelectedRoom_SelectedRoom","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","combinedReducers","combineReducers","ui","reducer","rootReducer","reduceReducers","store","configureStore","startState","setInterval","start","ReactDOM","render","es","containers_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cd5cdc48.chunk.js","sourcesContent":["export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}","export const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\nconst allocationInfo = (props: any) => {\n  console.log(\"allocationInfo: \", props);\n\n  return (\n    <div className=\"AllocationInfo\">Next Meeting:\n      <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      <div>{props.by}</div>\n      <div>{props.title}</div>\n    </div>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\nconst allocationInfo = (props: any) => {\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">Current Meeting:\n        <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n        <div>{props.by}</div>\n        <div>{props.title}</div>\n        {props.attendees ? <div>Attendees: {props.attendees}</div> : null}\n        {props.agenda ? <div>Agenda: {props.agenda}</div> : null}\n      </div>\n    </>\n  );\n};\n\nexport default allocationInfo;\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport Room from \"../models/Room\";\nimport { RoomStatus } from \"../models/RoomStatus\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.entity[roomId],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => equipment.filter((e: Equipment) => e.roomId === roomId),\n);\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\n\nconst Button = (props: any) => {\n  let buttonElement = <button>Not configured button</button>;\n\n  switch (props.type) {\n    case \"icon\":\n      buttonElement = (\n        <button className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.iconId}>\n          <svg className={`icon`}>\n            <use xlinkHref={`symbol-defs.svg#${props.iconId}`} />\n          </svg>\n        </button>\n      );\n      break;\n      case \"icon-text\":\n      buttonElement = (\n        <button className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`symbol-defs.svg#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n  }\n  \n  return buttonElement;\n};\n\nexport default Button;\n","import React from \"react\";\nimport { RoomStatus } from \"../../../../models/RoomStatus\";\nimport \"./AllocationMenu.scss\";\nimport Button from \"../../../UI/Button/Button\";\n\nconst allocationMenu = (props: any) => {\n  console.log(\"Allocation menu:\", props.id);\n  console.log(\"Props: \", props);\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, 60000)}\n          iconId=\"icon-calendar-plus-o\"\n          label=\"Extend\"\n        />\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onFinishEarlyClick(props.currentAllocation.id)}\n          iconId=\"icon-calendar-times-o\"\n          label=\"Finish\"\n        />\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onAddMeetingClick(props.roomId)}\n          iconId=\"icon-calendar-o\"\n          label=\"Book now\"\n        />\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default allocationMenu;\n","import React from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\n\nconst roomStatusBorder = (props: any) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default roomStatusBorder;\n","import React from \"react\";\nimport \"./StatusBar.scss\";\nimport Button from \"../UI/Button/Button\";\n\nconst StatusBar = (props: any) => {\n  return (\n    <div className=\"StatusBar\">\n      <div>This is StatusBar</div>\n      <Button type=\"icon-text\" onClick={props.onAdminClicked} iconId=\"icon-settings\" label=\"Admin\" />\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./TimeView.scss\";\n\nconst timeView = (props: any) => {\n  return (\n    <div className=\"TimeView\">{formatTimeStamp(props.time)}</div>\n  );\n};\n\nexport default timeView;\n","import React from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst equipmentBar = (props: { equipment: Equipment[], onChangeStatusClick: (e: Equipment) => void }) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return <Button\n      key={e.type}\n      type=\"icon\"\n      onClick={() => props.onChangeStatusClick(e)}\n      iconId={`icon-${e.type.toLowerCase()}`}\n      btnClassName={`btn_${e.status.toLowerCase()}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default equipmentBar;\n","import React from \"react\";\nimport EquipmentBar from \"./EquipmentBar/EquipmentBar\";\nimport \"./Header.scss\";\n\nconst Header = (props: any) => {\n  return (\n    <div className=\"Header\">\n      <div>{props.room.name}</div>\n      <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick}/>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport \"./Backdrop.scss\";\n\nconst Backdrop = () => {\n  return (\n    <div className=\"Backdrop\"/>\n  )\n}\n\nexport default Backdrop;\n","import React from \"react\";\nimport \"./Popup.scss\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Popup = (props: any) => {\n  const classes = [\"Popup\"];\n  if (props.open) {\n    classes.push(\"open\");\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <Backdrop/>\n      <div className=\"content\">\n        <Button\n          type=\"icon-text\"\n          onClick={props.onCloseClick}\n          iconId=\"icon-close\"\n          label=\"Close\"\n        />\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n\nexport const getAdminPanelOpen = createSelector(\n  [\"ui.adminPanelOpen\"],\n);\n","import { createSlice } from \"redux-starter-kit\";\nimport Room from \"../../models/Room\";\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: {\n    entity: {} as {[id: string]: Room },\n    ids: [] as string[],\n  },\n  reducers: {\n    addRoom: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    changeRoomName: (state, action) => {\n      // [TODO] Temporary create room when it does not exists\n      if (!state.entity[action.payload.id]) {\n        state.entity[action.payload.id] = action.payload;\n        state.ids.push(action.payload.id);\n      } else {\n        state.entity[action.payload.id].name = action.payload.name;\n      }\n    }\n  },\n});\n\nexport default roomSlice;\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Room {\n  public id: string;\n\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n    this.id = uuidv4();\n  }\n}\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../shared/cacheManager\";\nimport { IRosiState } from \"./RosiState\";\n\n// const saveState = createAction(\"crossslice/savestate\")\n// const loadState = createAction(\"crossslice/loadstate\")\n\nconst saveStateStarted = createAction(\"crossslice/savestate/started\")\nconst saveStateSucceeded = createAction(\"crossslice/savestate/succeeded\")\nconst saveStateFailed = createAction(\"crossslice/savestate/failed\")\n\nconst loadStateStarted = createAction(\"crossslice/loadstate/started\")\nconst loadStateSucceeded = createAction(\"crossslice/loadstate/succeeded\")\nconst loadStateFailed = createAction(\"crossslice/loadstate/failed\")\n\nexport const saveState = () => (dispatch: any, getState: any) => {\n  dispatch(saveStateStarted());\n  return cacheManager.writeData(\"state\", getState()).then(\n    () => dispatch(saveStateSucceeded()),\n    (error) => dispatch(saveStateFailed(error))\n  )\n}\n\nexport const loadState = () => (dispatch: any) => {\n  dispatch(loadStateStarted());\n  return cacheManager.readData(\"state\").then(\n    (state) => dispatch(loadStateSucceeded(state)),\n    (error) => dispatch(loadStateFailed(error))\n  )\n}\n\nexport const crossSliceReducer = (state: any, action: any) => {\n  let newState: any = {...state};\n  newState.ui = {...newState.ui};\n\n  switch (action.type) {\n    case saveStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case saveStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case saveStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case loadStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case loadStateSucceeded.toString():\n      newState = {...newState, ...action.payload};\n      newState.ui.syncInProgress = false;\n      return newState;\n    case loadStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    default:\n      return state;\n  }\n};","import localforage from \"localforage\";\n\nexport const writeData = (key: any, data: any) => localforage.setItem(key, data);\nexport const readData = (key: any) => localforage.getItem(key);\nexport const removeData = (key: any) => localforage.removeItem(key);\nexport const clear = () => localforage.clear();\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n    adminPanelOpen: false,\n    syncInProgress: false,\n    syncError: \"\"\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n    showAdminPanel: (state) => {\n      state.adminPanelOpen = true;\n      return state;\n    },\n    hideAdminPanel: (state) => {\n      state.adminPanelOpen = false;\n      return state;\n    },\n  },\n});\n\nexport default uiSlice;\n","import React, { Component, FormEvent, ChangeEvent } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as selectors from \"../../store/selectors\";\nimport roomSlice from \"../../store/Room/RoomSlice\";\nimport Room from \"../../models/Room\";\nimport Button from \"../../components/UI/Button/Button\";\nimport {saveState} from \"../../store/crossSliceReducer\";\nimport uiSlice from \"../../store/UI/UISlice\";\n\ninterface IAdminPanelProps {\n  onSettingsSaved: (room: Room) => void;\n}\n\ninterface IAdminPanelState {\n  room: Room;\n}\n\nclass AdminPanel extends Component<IAdminPanelProps, IAdminPanelState> {\n  private selectedRoom: Room;\n\n  constructor(props: any) {\n    super(props)\n    console.log(\"!!props\", props);\n    this.selectedRoom = props.selectedRoom;\n\n    if (!this.selectedRoom) {\n      this.selectedRoom = {... new Room(\"Conference Room 1\")};\n    }\n\n    this.state = {\n      room: {... this.selectedRoom},\n    };\n}\n\n  submitSettings(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    console.log(event);\n\n    this.props.onSettingsSaved(this.state.room);\n  };\n\n  inputChangedHandler(event: ChangeEvent<HTMLInputElement>) {\n    console.log(event);\n    const newState = {...this.state};\n    newState.room.name = event.target.value;\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>This is admin panel</h3>\n        <form onSubmit={(e) => this.submitSettings(e)}>\n          <div>\n            <label>Room name</label>\n            <input\n              type=\"text\"\n              placeholder=\"Room Name\" \n              value={this.state.room.name}\n              onChange={(e) => this.inputChangedHandler(e)}\n            />\n          </div>\n          <Button\n            type=\"icon-text\"\n            iconId=\"icon-save\"\n            label=\"Save Settings\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  const selectedRoom = selectors.getSelectedRoom(state);\n\n  return {\n    selectedRoom,\n  }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSettingsSaved: (room: Room) => {\n      dispatch(roomSlice.actions.changeRoomName(room));\n      // [TODO] temporary solution, need to be changed when multiple room management will be added\n      dispatch(uiSlice.actions.setSelectedRoomId(room.id));\n      dispatch(saveState());\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AdminPanel);\n","import React from \"react\";\nimport AllocationInfo from \"../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../Allocation/AllocationMenu/AllocationMenu\";\nimport RoomStatusBorder from \"../RoomStatusBorder/RoomStatusBorder\";\nimport StatusBar from \"../../StatusBar/StatusBar\";\nimport TimeView from \"../TimeView/TimeView\";\nimport \"./RoomView.scss\";\nimport Header from \"../../Header/Header\";\nimport Popup from \"../../UI/Popup/Popup\";\nimport AdminPanel from \"../../../containers/AdminPanel/AdminPanel\";\n\nconst roomView = (props: any) => {\n  console.log(\"roomView: \", props);\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <AdminPanel/>;\n  }\n\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  if (props.currentAllocation) {\n    currentAllocationTag =\n    <AllocationInfoBig\n      {...props.currentAllocation}\n    />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo {...props.nextAllocation}/>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <Header time={props.time} {...props}/>\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <TimeView time={props.time} />\n        <div className=\"Separator\"/>\n        <div className=\"RightSection\">\n          <div className=\"Allocations\">\n            {currentAllocationTag}\n            {nextAllocationTag}\n          </div>\n          <AllocationMenu\n            currentAllocation={props.currentAllocation}\n            nextAllocation={props.nextAllocation}\n            roomStatus={props.roomStatus}\n            roomId={props.room.id}\n            onFinishEarlyClick={props.onFinishEarlyClick}\n            onExtendMeetingClick={props.onExtendMeetingClick}\n            onConfirmMeetingClick={props.onConfirmMeetingClick}\n            onAddMeetingClick={props.onAddMeetingClick}\n          />\n        </div>\n      </RoomStatusBorder>\n      <StatusBar onAdminClicked={props.onAdminClick}/>\n      <Popup open={props.adminPanelOpen} onCloseClick={props.onPopupCloseClick}>\n        <AdminPanel></AdminPanel>\n      </Popup>\n    </div>\n  );\n};\n\nexport default roomView;\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n\n  constructor(public title: string, public roomId: string, public from: number, public to: number) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload].to = Date.now() - 60000;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = Date.now() - 60000;\n    },\n  },\n});\n\nexport default allocationSlice;\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\n// [TODO] add ids\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: [],\n  reducers: {\n    addEquipment: (state, action) => [...state, action.payload] as never[],\n    setStatus: (state, action) => {\n      const equipment: Equipment =\n        state.filter((eq: Equipment) => eq.roomId === action.payload.roomId && eq.type === action.payload.type)[0];\n      equipment.status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment =\n        state.filter((eq: Equipment) => eq.roomId === action.payload.roomId && eq.type === action.payload.type)[0];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/Room/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getDate, getAdminPanelOpen } from \"../../store/UI/UISelectors\";\nimport uiSlice from \"../../store/UI/UISlice\";\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const adminPanelOpen = getAdminPanelOpen(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n\n  // 2 min\n  const roomStatus = selectors.getSelectedRoomStatus(120000)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocations(state)[0];\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n    adminPanelOpen,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAdminClick: () => {\n      dispatch(uiSlice.actions.showAdminPanel());\n    },\n    onPopupCloseClick: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onAddMeetingClick: (roomId: string) => {\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", roomId, Date.now() - 60000, Date.now() + 50000), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id}));\n    },\n    onExtendMeetingClick: (id: string, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, amount}));\n    },\n    onFinishEarlyClick: (id: string) => {\n      dispatch(allocationSlice.actions.finishEarly(id));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    console.log(\"hello world\", \"test\");\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\nimport reduceReducers from \"reduce-reducers\";\nimport { crossSliceReducer } from \"./crossSliceReducer\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst combinedReducers = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n});\n\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer);\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import Allocation from \"../models/Allocation\";\nimport Room from \"../models/Room\";\nimport store from \"./store\";\n\nimport { Equipment } from \"../models/Equipment\";\nimport { EquipmentStatus } from \"../models/EquipmentStatus\";\nimport { EquipmentType } from \"../models/EquipmentType\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport { getSelectedRoomAllocations, getSelectedRoomCurrentAllocations,\n   getSelectedRoomEquipment, getSelectedRoomNextAllocation, isSelectedRoomOccupied } from \"./selectors\";\nimport { getSelectedRoomId } from \"./UI/UISelectors\";\nimport uiSlice from \"./UI/UISlice\";\nimport { loadState, saveState } from \"./crossSliceReducer\";\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  const startState = store.getState();\n  console.log(\"[Start] startState:\", startState);\n  store.dispatch(loadState());\n\n  setInterval(() => {\n    console.log(\"[Start] Interval\");\n    store.dispatch(uiSlice.actions.setTime(Date.now()));\n    store.dispatch(saveState());\n  }, 1000 * 60);\n\n  \n  // store.subscribe(() => {\n  //   console.log(store.getState());\n  // });\n  const initData = () => {\n    console.log('[Start] init data');\n    // const usedRoom = new Room(\"Supernova\");\n    // store.dispatch(roomSlice.actions.addRoom({...usedRoom}));\n    // store.dispatch(roomSlice.actions.addRoom({...new Room(\"Room 2\")}));\n\n    // store.dispatch(uiSlice.actions.setSelectedRoomId(usedRoom.id));\n\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1a\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1b\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Current 1c\", usedRoom.id, Date.now() - 120000 , Date.now() + 50000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Next 1d\", usedRoom.id, Date.now() + 110000, Date.now() + 480000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1e\", usedRoom.id, Date.now() + 1000000, Date.now() + 1200000)}));\n\n    // store.dispatch(allocationSlice.actions.addAllocation(\n    //   {...new Allocation(\"Test allocation 2a\", \"Room 2\", Date.now() - 1200000, Date.now() - 1200000)}));\n\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Projector, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Skype, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // // store.dispatch(equipmentSlice.actions.changeStatus(\n    // //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // const roomName1 = getSelectedRoomId(store.getState());\n    // const roomAllocations = getSelectedRoomAllocations(store.getState());\n    // const roomEquipment = getSelectedRoomEquipment(store.getState());\n\n    // const roomOccupied = isSelectedRoomOccupied(store.getState());\n    // const currentAllocation = getSelectedRoomCurrentAllocations(store.getState())[0];\n    // const nextAllocation = getSelectedRoomNextAllocation(store.getState());\n\n    // // const timeInterval = selectDateTime();\n    // // console.log('Time: ', selectDateTime(store.getState()));\n    // // console.log('Occupied2: ', roomOccupied2);\n    // // const roomOccupied2 = isSelectedRoomOccupied2(store.getState());\n    // console.log(\"Name: \", roomName1);\n    // console.log(\"Allocations: \", roomAllocations);\n    // console.log(\"Occupied: \", roomOccupied);\n    // console.log(\"Equipment: \", roomEquipment);\n    // console.log(\"Current allocation: \", currentAllocation);\n    // console.log(\"Next allocation: \", nextAllocation);\n  }\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./Assets/symbol-defs.svg\";\nimport App from \"./containers/App/App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}