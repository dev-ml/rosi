{"version":3,"sources":["assets/symbol-defs.svg","models/RoomStatus.ts","store/Allocation/AllocationSelectors.ts","store/selectors.ts","models/EquipmentType.ts","store/UI/UISelectors.ts","shared/consts.ts","shared/utility.ts","models/Room.ts","store/Room/RoomSlice.ts","store/CrossSlice/CrossSliceActions.ts","shared/cacheManager.ts","store/UI/UISlice.ts","components/UI/Button/Button.tsx","components/UI/Input/Input.tsx","models/EquipmentStatus.ts","components/Admin/EquipmentAdmin/EquipmentAdmin.tsx","components/Admin/SyncProviderAdmin/SyncProviderAdmin.tsx","components/Admin/AdminPanel/AdminPanel.tsx","models/Equipment.ts","store/Equipment/EquipmentSlice.ts","store/SyncProvider/SyncProviderSelectors.ts","store/SyncProvider/SyncProviderSlice.ts","models/Allocation.ts","providers/GoogleSyncProvider.ts","store/Allocation/AllocationSlice.ts","store/store.ts","store/CrossSlice/CrossSliceReducer.ts","providers/SyncProvider.ts","store/SyncProvider/SyncProviderActions.ts","containers/Admin/Admin.tsx","components/Header/EquipmentBar/EquipmentBar.tsx","components/Room/RoomStatusBorder/RoomStatusBorder.tsx","components/Header/Header.tsx","components/Allocation/AllocationInfo/AllocationInfo.tsx","components/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","components/Allocation/AllocationMenu/AllocationMenu.tsx","components/Allocation/AllocationsView/AllocationsView.tsx","components/Room/RoomClock/RoomClock.tsx","components/Room/RoomViewContent/RoomViewContent.tsx","components/Footer/SyncStatusBar/SyncStatusBar.tsx","components/Footer/Footer.tsx","components/UI/Backdrop/Backdrop.tsx","components/UI/Popup/Popup.tsx","components/Room/RoomView/RoomView.tsx","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","store/start.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RoomStatus","n","EquipmentType","getDate","createSelector","getSelectedRoomId","getAdminPanelOpen","getSelectedRoom","roomId","rooms","entity","getSelectedRoomAllocations","allocation","Object","values","filter","a","getSelectedRoomCurrentAllocations","date","allocations","from","to","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getRoomClockAllocations","clockHoursBackwards","clockHoursForward","getSelectedRoomNextAllocation","slice","getSelectedRoomCurrentAllocation","time","getSelectedRoomEquipment","length","equipment","e","formatTimeStamp","timeStamp","Date","toLocaleTimeString","hour","minute","hour12","millisecondsToMinutes","milliseconds","Math","ceil","roundEpochToMinutes","epoch","updateObject","oldObject","updatedProperties","objectSpread","dayMinuteToRadian","minuteRadian","PI","formatHoursMinutes","timeInMinutes","hours","floor","concat","minutes","checkValidity","value","rules","isValid","required","trim","minLength","maxLength","isEmail","test","isNumeric","uuidv4","replace","c","r","random","toString","Room","name","classCallCheck","this","id","capacity","location","roomSlice","createSlice","initialState","defaultRoom","ids","push","createInitialState","reducers","addRoom","state","action","payload","changeRoomName","saveStateStarted","createAction","saveStateSucceeded","saveStateFailed","loadStateStarted","loadStateSucceeded","loadStateFailed","removeStateStarted","removeStateSucceeded","removeStateFailed","saveState","dispatch","getState","key","data","cachedState","syncProvider","syncSettings","errorLog","prepareCacheState","localforage","setItem","then","error","loadState","getItem","removeState","removeItem","uiSlice","selectedRoomId","now","adminPanelOpen","stateSyncInProgress","stateSyncError","setSelectedRoomId","setTime","showAdminPanel","hideAdminPanel","Button","props","getButtonType","btnType","buttonElement","react_default","createElement","type","className","btnClassName","onClick","aria-label","iconId","disabled","label","style","xlinkHref","icons","Input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","assign","join","elementConfig","onChange","changed","options","map","option","displayValue","EquipmentStatus","EquipmentAdmin","console","log","btnSelected","find","UI_Button_Button","onEquipmentToggleClick","toLowerCase","mapEquipmentToButton","SyncProviderAdmin","button","connecting","connected","onConnect","connectionMessage","AdminPanel","_this","possibleConstructorReturn","getPrototypeOf","call","formData","roomName","placeholder","validation","valid","clientId","apiKey","calendarId","formIsValid","inputChangedHandler","event","inputIdentifier","updatedFormElement","target","updatedFormData","defineProperty","inputId","setState","newSelectedRoom","selectedRoom","newSettings","room","onSettingsSaved","onCancel","_this2","formElementsArray","config","form","formElement","UI_Input_Input","Admin_EquipmentAdmin_EquipmentAdmin","roomEquipment","Admin_SyncProviderAdmin_SyncProviderAdmin","cancel","Component","Equipment","status","equipmentSlice","addEquipment","deleteEquipment","toggleEquipment","equipmentFound","eq","newEquipment","Available","setStatus","changeStatus","newStatus","Broken","NotAvailable","hasAutoSync","getSyncSettings","syncProviderSlice","autoSync","syncing","lastSynced","syncMessage","connectionStarted","connectionSucceeded","connectionFailed","message","toConsumableArray","syncStarted","syncSucceeded","syncFailed","setSyncSettings","Allocation","title","confirmed","by","attendees","agenda","extId","extStatus","GoogleSyncProvider","DISCOVERY_DOCS","SCOPES","CONFIG","client_id","discoveryDocs","scope","handleClientLoad","createClass","get","window","gapi","client","JSON","stringify","initClient","Promise","reject","Error","calendar","fetchEvents","today","tomorrow","setDate","events","list","orderBy","maxResults","showDeleted","singleEvents","timeMin","toISOString","timeMax","response","result","items","syncEvents","catch","script","document","src","body","appendChild","onload","load","_this3","init","auth2","getAuthInstance","signIn","user","mappedEvents","summary","start","dateTime","getTime","end","organizer","displayName","allocationSlice","addAllocation","deleteAllocation","finishEarly","extendMeeting","amount","confirmMeeting","syncExternalAllocations","newAllocations","expiredAllocations","sa","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","foundAllocation","_iterator2","combinedReducers","combineReducers","ui","reducer","rootReducer","reduceReducers","newState","actions","store","configureStore","connect","sync","getAllocations","Admin","selectors","settings","onSettingsClear","syncConnect","EquipmentBar","onChangeStatusClick","RoomStatusBorder","classNames","roomStatus","children","Header","Room_RoomStatusBorder_RoomStatusBorder","toLocaleDateString","Header_EquipmentBar_EquipmentBar","AllocationInfo","startsIn","AllocationInfoBig","timeTillEnd","Fragment","AllocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","currentAllocation","awaiting","onConfirmMeetingClick","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","AllocationsView","currentAllocationTag","Allocation_AllocationInfoBig_AllocationInfoBig","nextAllocationTag","Allocation_AllocationInfo_AllocationInfo","Allocation_AllocationMenu_AllocationMenu","Admin_Admin","RoomClock","colorRed","drawCircleStroke","ctx","fromMinute","toMinute","color","radius","lineWidth","lineCap","clockRadius","beginPath","strokeStyle","startAngle","endAngle","arc","canvasSize","stroke","UTCToClockTime","setUTCMilliseconds","getHours","getMinutes","capLimitMax","currentTime","limitTime","maxHourRange","min","minutesInHour","canvas","React","createRef","setTimeout","current","getContext","width","height","mappedAllocations","minHourRange","max","forEach","mainRadius","tickWidth","i","drawCurrentTime","ref","RoomViewContent","Room_RoomClock_RoomClock","clockAllocations","Allocation_AllocationsView_AllocationsView","SyncStatusBar","syncInformation","Footer","Footer_SyncStatusBar_SyncStatusBar","onAdminClick","Backdrop","Popup","classes","open","UI_Backdrop_Backdrop","onCloseClick","RoomView","components_Header_Header","Room_RoomViewContent_RoomViewContent","components_Footer_Footer","UI_Popup_Popup","onPopupCloseClick","SelectedRoom","threshold","occupied","free","App","SelectedRoom_SelectedRoom","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","startState","setInterval","ReactDOM","render","es","containers_App_App","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4fd45700.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symbol-defs.119ddbe0.svg\";","export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\n\nexport const getRoomAllocations = (id: string) => createSelector(\n  [\"allocation\"],\n  (allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === id);\n  },\n);\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport { RoomStatus } from \"../models/RoomStatus\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\nimport { clockMinTime, clockMaxTime, oneMinute } from \"../shared/consts\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.entity[roomId],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\n// [TODO] not only future meeting should be given but also meetings date - 60 min\nexport const getSelectedRoomFutureAllocationsForNextNMinutes = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted, getDate],\n  (allocations: Allocation[], time: number) => allocations.filter((a: Allocation) => a.to < time + n * oneMinute),\n);\n\n// Gives allocations that end after from, but also end before to\nexport const getSelectedRoomAllocationsFromTo = (from: number, to: number) => createSelector(\n  [getSelectedRoomAllocations],\n  (allocations: Allocation[]) => allocations.filter((a: Allocation) => a.to > from && a.from < to),\n);\n\nexport const getRoomClockAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date: number, allocations: Allocation[]) =>\n    allocations.filter((a: Allocation) => a.to > date - clockMinTime && a.from < date + clockMaxTime),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomNextAllocationTimeToBegin = createSelector(\n  [getSelectedRoomNextAllocation, getDate],\n  (allocation: Allocation, time: number) => allocation.from - time,\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocationLength = createSelector(\n  [getSelectedRoomCurrentAllocation],\n  (allocation: Allocation) => allocation.to - allocation.from,\n);\n\nexport const getSelectedRoomCurrentAllocationTimeToEnd = createSelector(\n  [getSelectedRoomCurrentAllocations, getDate],\n  (allocation: Allocation, time: number) => allocation.to - time,\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => {\n    // [TODO] Bug on the production\n    if (!equipment.entity) {\n      return [];\n    }\n\n    const equipmentArray: Equipment[] = Object.values(equipment.entity) || [];\n    return equipmentArray.filter((e: Equipment) => e.roomId === roomId);\n  }\n);\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n\nexport const getAdminPanelOpen = createSelector(\n  [\"ui.adminPanelOpen\"],\n);\n","export const minutesInHour = 60;\nexport const minutesInDay = 24 * minutesInHour;\nexport const hoursInDay = 24;\n\nexport const oneSecond = 1000;\nexport const oneMinute = 60 * oneSecond;\nexport const oneHour = minutesInHour * oneMinute;\nexport const oneDay = hoursInDay * oneHour;\n\nexport const defaultExtendDuration = 15 * oneMinute;\nexport const defaultMeetingDuration = 30 * oneMinute;\nexport const defaultConfirmationThreshold = 5 * oneMinute;\n\nexport const clockHoursForward = 10;\nexport const clockHoursBackwards = 1;\nexport const clockMaxTime = clockHoursForward * oneHour;\nexport const clockMinTime = clockHoursBackwards * oneHour;\n\nexport const maxSyncResults = 1000;\nexport const syncInterval = 5 * oneMinute;\nexport const uiTimeOffset = 1;","import { minutesInDay, oneMinute, minutesInHour } from \"./consts\";\n\nexport const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\nexport const millisecondsToMinutes = (milliseconds: number): number => {\n  return Math.ceil(milliseconds / oneMinute);\n};\n\nexport const roundEpochToMinutes = (epoch: number): number => {\n  return epoch - (epoch % oneMinute);\n};\n\nexport const updateObject = (oldObject: any, updatedProperties: any) => {\n  return {\n      ...oldObject,\n      ...updatedProperties,\n  };\n};\n\nexport const dayMinuteToRadian = (minute: number) => {\n  const minuteRadian = 2 * Math.PI / (minutesInDay / 2);\n  const startingRadian = -0.5 * Math.PI;\n  return startingRadian + minute * minuteRadian;\n};\n\nexport const formatHoursMinutes = (timeInMinutes: number) => {\n  const hours = Math.floor(timeInMinutes / minutesInHour) ? `${Math.floor(timeInMinutes / minutesInHour)} h` : \"\";\n  const minutes = `${timeInMinutes % minutesInHour} min`;\n  return `${hours} ${minutes}`;\n};\n\nexport const checkValidity = ( value: any, rules: any ) => {\n  let isValid = true;\n  if ( !rules ) {\n      return true;\n  }\n\n  if ( rules.required ) {\n      isValid = value.trim() !== \"\" && isValid;\n  }\n\n  if ( rules.minLength ) {\n      isValid = value.length >= rules.minLength && isValid;\n  }\n\n  if ( rules.maxLength ) {\n      isValid = value.length <= rules.maxLength && isValid;\n  }\n\n  if ( rules.isEmail ) {\n      // tslint:disable-next-line: max-line-length\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test( value ) && isValid;\n  }\n\n  if ( rules.isNumeric ) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test( value ) && isValid;\n  }\n\n  return isValid;\n};\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Room {\n  public id: string;\n\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Room from \"../../models/Room\";\n\nconst createInitialState = () => {\n  const defaultRoom = new Room(\"Conference Room 1\");\n  const initialState = {\n    entity: {} as {[id: string]: Room },\n    ids: [] as string[],\n  };\n\n  initialState.entity[defaultRoom.id] = { ...defaultRoom};\n  initialState.ids.push(defaultRoom.id);\n\n  return initialState;\n};\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: createInitialState(),\n  reducers: {\n    addRoom: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    changeRoomName: (state, action) => {\n      // [TODO] Temporary create room when it does not exists\n      if (!state.entity[action.payload.id]) {\n        state.entity[action.payload.id] = action.payload;\n        state.ids.push(action.payload.id);\n      } else {\n        state.entity[action.payload.id].name = action.payload.name;\n      }\n    }\n  },\n});\n\nexport default roomSlice;\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../../shared/cacheManager\";\nimport { connect } from \"../SyncProvider/SyncProviderActions\";\nimport { isSyncSettingsConfigured } from \"../SyncProvider/SyncProviderSelectors\";\n\nexport const saveStateStarted = createAction(\"crossslice/savestate/started\")\nexport const saveStateSucceeded = createAction(\"crossslice/savestate/succeeded\")\nexport const saveStateFailed = createAction(\"crossslice/savestate/failed\")\n\nexport const loadStateStarted = createAction(\"crossslice/loadstate/started\")\nexport const loadStateSucceeded = createAction(\"crossslice/loadstate/succeeded\")\nexport const loadStateFailed = createAction(\"crossslice/loadstate/failed\")\n\nexport const removeStateStarted = createAction(\"crossslice/removestate/started\")\nexport const removeStateSucceeded = createAction(\"crossslice/removestate/succeeded\")\nexport const removeStateFailed = createAction(\"crossslice/removestate/failed\")\n\nconst prepareCacheState = (state: any): any =>\n{\n  let cachedState = {...state};\n  cachedState.syncProvider = {\n    syncSettings: state.syncProvider.syncSettings,\n    errorLog: state.syncProvider.errorLog || []\n  };\n  return cachedState;\n};\n\nexport const saveState = () => (dispatch: any, getState: any) => {\n  dispatch(saveStateStarted());\n  return cacheManager.writeData(\"state\", prepareCacheState(getState())).then(\n    () => dispatch(saveStateSucceeded()),\n    (error) => dispatch(saveStateFailed(error))\n  );\n};\n\nexport const loadState = () => (dispatch: any) => {\n  dispatch(loadStateStarted());\n  return cacheManager.readData(\"state\").then(\n    (state) => dispatch(loadStateSucceeded(state)),\n    // [TODO]\n    // .then((state: any) => {\n    //   if (isSyncSettingsConfigured(state)) {\n    //       dispatch(connect());\n    //     }\n    // }),\n    (error) => dispatch(loadStateFailed(error)),\n  );\n};\n\nexport const removeState = () => (dispatch: any) => {\n  dispatch(removeStateStarted());\n  return cacheManager.removeData(\"state\").then(\n    (state) => {\n      dispatch(removeStateSucceeded(state));\n      dispatch(loadState());\n    },\n    (error) => dispatch(removeStateFailed(error))\n  );\n};","import localforage from \"localforage\";\n\nexport const writeData = (key: any, data: any) => localforage.setItem(key, data);\nexport const readData = (key: any) => localforage.getItem(key);\nexport const removeData = (key: any) => localforage.removeItem(key);\nexport const clear = () => localforage.clear();\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n    adminPanelOpen: false,\n    stateSyncInProgress: false,\n    stateSyncError: \"\",\n\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n    showAdminPanel: (state) => {\n      state.adminPanelOpen = true;\n      return state;\n    },\n    hideAdminPanel: (state) => {\n      state.adminPanelOpen = false;\n      return state;\n    }\n  },\n});\n\nexport default uiSlice;\n","import React from \"react\";\nimport \"./Button.scss\";\nimport icons from \"../../../assets/symbol-defs.svg\";\n\ninterface IProps {\n  label?: string;\n  onClick?: () => void;\n  btnType?: string;\n  btnClassName?: string;\n  iconId?: string;\n  style?: string;\n  disabled?: boolean\n}\n\nexport const Button: React.FC<IProps> = (props: IProps) => {\n\n  const getButtonType = () => props.btnType || \"button\";\n\n  let buttonElement =\n  <button\n    type={getButtonType()}\n    className={props.btnClassName}\n    onClick={props.onClick}\n    aria-label={props.iconId}\n    disabled={props.disabled}\n  >\n    {props.label}\n  </button>;\n\n  switch (props.style) {\n    case \"icon\":\n      buttonElement = (\n        // tslint:disable-next-line: max-line-length\n        <button type={getButtonType()} className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.iconId}>\n          <svg className={`icon`}>\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n        </button>\n      );\n      break;\n    case \"icon-text\":\n      buttonElement = (\n        <button type={getButtonType()} className={`btn btn_icon-text ${props.btnClassName}`} onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"icon-text-large\":\n      buttonElement = (\n        <button type={getButtonType()} className={`btn btn_icon-text btn_flat ${props.btnClassName || \"\"}`} onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"text\":\n      buttonElement = (\n        <button type={getButtonType()} className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.label}>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n  }\n\n  return buttonElement;\n};\n\nexport default Button;\n","import React from \"react\";\n\nimport \"./Input.scss\";\n\ninterface IProps {\n  invalid: boolean;\n  shouldValidate: boolean;\n  touched: boolean;\n  elementType: string;\n  elementConfig: any;\n  label: string;\n  value: any;\n  changed: (event: any) => void;\n}\n\nexport const Input: React.FC<IProps> = (props: IProps) => {\n  let inputElement = null;\n  const inputClasses = [\"InputElement\"];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(\"Invalid\");\n  }\n\n  switch (props.elementType) {\n    case (\"input\"):\n      inputElement = <input\n        className={inputClasses.join(\" \")}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}\n      />;\n      break;\n    case (\"textarea\"):\n      inputElement = <textarea\n        className={inputClasses.join(\" \")}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}\n      />;\n      break;\n    case (\"select\"):\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {\n            // tslint:disable-next-line: jsx-no-multiline-js\n            props.elementConfig.options.map((option: any) => (\n              <option key={option.value} value={option.value}>\n                {option.displayValue}\n              </option>\n            ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input\n        className={inputClasses.join(\" \")}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}\n      />;\n  }\n\n  return (\n    <div className={\"Input\"}>\n      <label className={\"Label\"}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n\n};\n\nexport default Input;\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\nimport \"./EquipmentAdmin.scss\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport Button from \"../../UI/Button/Button\";\n\ninterface IProps {\n  roomId: string;\n  equipment: Equipment[];\n  onEquipmentToggleClick: (roomId: string, type: EquipmentType) => void;\n}\n\nexport const EquipmentAdmin: React.FC<IProps> = (props: IProps) => {\n  console.log(\"[EquipmentAdmin] selected room id: \", props.roomId);\n  const mapEquipmentToButton = (type: EquipmentType) => {\n    let btnSelected = false;\n\n    if (props.equipment) {\n      btnSelected = props.equipment.find((e: Equipment) => e.type === type) ? true : false;\n    }\n\n    return <Button\n      key={type}\n      style=\"icon\"\n      onClick={() => props.onEquipmentToggleClick(props.roomId, type)}\n      iconId={`icon-${type.toLowerCase()}`}\n      btnClassName={`btn_dark btn_flat ${btnSelected ? \"btn_selected\" : \"\"}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentAdmin\">\n      <label className=\"Label\">Room Equipment</label>\n      <div className=\"EquipmentAdminIcons\">\n        {Object.values(EquipmentType).map((type: EquipmentType) => mapEquipmentToButton(type))}\n      </div>\n    </div>\n  );\n};\n\nexport default EquipmentAdmin;\n","import React from \"react\";\nimport \"./SyncProviderAdmin.scss\";\nimport { dataURLToBlob } from \"blob-util\";\nimport Button from \"../../UI/Button/Button\";\n\ninterface IProps {\n  onConnect: () => void;\n  data: any;\n}\n\nconst SyncProviderAdmin = (props: IProps) => {\n  let button;\n  if (props.data.connecting) {\n    button = <Button\n      style=\"text\"\n      label=\"Connecting\"\n      disabled={true}\n      btnClassName={`btn_dark btn_flat btn_yellow`}\n    />;\n  } else {\n    if (props.data.connected) {\n      button = <Button\n        style=\"text\"\n        label=\"Disconnect\"\n        onClick={() => console.log(\"[SyncProviderAdmin][TODO] Disconnect\")}\n        btnClassName={`btn_dark btn_flat btn_red`}\n      />\n    } else {\n      button = <Button\n        style=\"text\"\n        label=\"Connect\"\n        onClick={() => props.onConnect()}\n        btnClassName={`btn_dark btn_flat btn_green`}\n      />\n    }\n  }\n  return (\n    <div className=\"SyncProviderAdmin\">\n      <label className=\"Label\">Sync</label>\n      {button}\n      <span>{props.data.connectionMessage}</span>\n      {/* <button type=\"button\" onClick={() => props.onConnect()}>{button}</button> */}\n    </div>\n  )\n}\n\nexport default SyncProviderAdmin;\n","import React, { ChangeEvent, Component } from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport Room from \"../../../models/Room\";\nimport { checkValidity, updateObject } from \"../../../shared/utility\";\nimport Button from \"../../UI/Button/Button\";\nimport Input from \"../../UI/Input/Input\";\nimport EquipmentAdmin from \"../EquipmentAdmin/EquipmentAdmin\";\nimport \"./AdminPanel.scss\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\nimport SyncProviderAdmin from \"../SyncProviderAdmin/SyncProviderAdmin\";\n\n\ninterface IAdminPanelProps {\n  syncProvider: any;\n  syncSettings: any;\n  roomEquipment: Equipment[];\n  selectedRoom: Room;\n  onSettingsSaved: (settings: any) => void;\n  onEquipmentToggleClick: (roomId: string, type: EquipmentType) => void;\n  onCancel: () => void;\n  onConnect: () => void;\n}\n\ninterface IAdminPanelState {\n  formIsValid: boolean;\n  formData: any;\n}\n\nclass AdminPanel extends Component<IAdminPanelProps, IAdminPanelState> {\n  static getDerivedStateFromProps(props: IAdminPanelProps, state: any) {\n    // selected room\n    return {\n      formData: {\n        ...state.formData,\n        roomName: { ...state.formData.roomName, value: props.selectedRoom.name },\n        clientId: { ...state.formData.clientId, value: props.syncSettings.clientId },\n        apiKey: { ...state.formData.apiKey, value: props.syncSettings.apiKey },\n        calendarId: { ...state.formData.calendarId, value: props.syncSettings.calendarId },\n      },\n      selectedRoom: props.selectedRoom,\n      syncSettings: props.syncSettings,\n      syncProvider: props.syncProvider,\n    };\n  }\n\n  state: IAdminPanelState = {\n    formData: {\n      roomName: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Conference room 1\",\n        },\n        label: \"Room name\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      clientId: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Client ID from google calendar API\",\n        },\n        label: \"Client ID\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      apiKey: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"API key from google calendar API\",\n        },\n        label: \"API key\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      calendarId: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Calendar ID can be found in google calendar settings\",\n        },\n        label: \"Calendar ID\",\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    formIsValid: false,\n    // [TODO] this initialization should be removed\n  };\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  inputChangedHandler = (event: ChangeEvent<HTMLInputElement>, inputIdentifier: any) => {\n    const updatedFormElement = updateObject(this.state.formData[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.formData[inputIdentifier].validation),\n      touched: true,\n    });\n    const updatedFormData = updateObject(this.state.formData, {\n      [inputIdentifier]: updatedFormElement,\n    });\n\n    let formIsValid = true;\n    // tslint:disable-next-line: forin\n    for (const inputId in updatedFormData) {\n      formIsValid = updatedFormData[inputId].valid && formIsValid;\n    }\n\n    this.setState({ formData: updatedFormData, formIsValid });\n\n    const newSelectedRoom = { ...this.props.selectedRoom, name: updatedFormData.roomName.value};\n    const newSettings = {\n      syncSettings: {\n        clientId: updatedFormData.clientId.value,\n        apiKey: updatedFormData.apiKey.value,\n        calendarId: updatedFormData.calendarId.value,\n      },\n      room: newSelectedRoom,\n    };\n\n    this.props.onSettingsSaved(newSettings);\n  }\n\n  cancel() {\n    this.props.onCancel();\n  }\n\n  // connect() {\n  //   console.log(`[AdminPanel] connect with clientId ${this.state.syncSettings.clientId} apiKey: ${this.state.syncSettings.apiKey}`);\n  //   this.props.onConnect();\n  // }\n\n  render() {\n    const formElementsArray = [];\n    // tslint:disable-next-line: forin\n    for (const key in this.state.formData) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.formData[key],\n      });\n    }\n    const form = (\n      <form>\n        {// tslint:disable-next-line: jsx-no-multiline-js\n          formElementsArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            label={formElement.config.label}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event: any) => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <div>\n          <EquipmentAdmin\n            roomId={this.props.selectedRoom.id}\n            equipment={this.props.roomEquipment}\n            onEquipmentToggleClick={this.props.onEquipmentToggleClick}\n          />\n        </div>\n        <div>\n          <SyncProviderAdmin\n            onConnect={this.props.onConnect}\n            data={this.props.syncProvider}\n          />\n        </div>\n        <div className=\"AdminPanelButtons\">\n          <Button\n            style=\"icon-text-large\"\n            btnClassName=\"btn_dark\"\n            label=\"Close\"\n            // [TODO] change icon\n            iconId=\"icon-exit\"\n            onClick={() => this.cancel()}\n          />\n        </div>\n\n      </form>\n\n    );\n    return (\n      <div className=\"AdminPanel\">\n        <h3>Admin Panel</h3>\n        {form}\n      </div>\n    );\n  }\n}\n\nexport default AdminPanel;\n","import { EquipmentStatus } from \"./EquipmentStatus\";\nimport { EquipmentType } from \"./EquipmentType\";\nimport { uuidv4 } from \"../shared/utility\";\n\nexport class Equipment {\n  public id: string;\n\n  constructor(public roomId: string, public type: EquipmentType, public status: EquipmentStatus) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: {\n    entity: {} as {[id: string]: Equipment },\n  },\n  reducers: {\n    addEquipment: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n    },\n    deleteEquipment: (state, action) => {\n      delete state.entity[action.payload.id];\n    },\n    toggleEquipment: (state, action) => {\n      console.log('toggle equipment: ', action);\n      const roomId = action.payload.roomId;\n      const type = action.payload.type;\n      const equipmentFound = Object.values(state.entity).filter((eq: Equipment) => eq.roomId === roomId && eq.type === type)[0];\n      if (equipmentFound) {\n        delete state.entity[equipmentFound.id];\n      } else {\n        const newEquipment = new Equipment(roomId, type, EquipmentStatus.Available);\n        state.entity[newEquipment.id] = {...newEquipment};\n      }\n    },\n    setStatus: (state, action) => {\n      state.entity[action.payload.id].status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment = state.entity[action.payload.id];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const isConnected = createSelector(\n  [\"syncProvider.connected\"],\n);\n\nexport const isConnecting = createSelector(\n  [\"syncProvider.connecting\"],\n);\n\nexport const hasAutoSync = createSelector(\n  [\"syncProvider.autoSync\"],\n);\n\nexport const getSyncSettings = createSelector(\n  [\"syncProvider.syncSettings\"],\n);\n\nexport const isSyncSettingsConfigured = createSelector(\n  [\"syncProvider.syncSettings\"],\n  (syncSettings: any) => {\n    return syncSettings.clientId && syncSettings.apiKey && syncSettings.calendarId\n  }\n);\n","import { createSlice } from \"redux-starter-kit\";\n\nconst syncProviderSlice = createSlice({\n  slice: \"syncProvider\",\n  initialState: {\n    connecting: false,\n    connected: false,\n    connectionMessage: \"\",\n    errorLog: [] as string[],\n    autoSync: false,\n    syncSettings: {},\n    syncing: false,\n    lastSynced: 0,\n    syncMessage: \"\"\n  },\n  reducers: {\n    connectionStarted: (state, action) => {\n      state.connecting = true\n    },\n    connectionSucceeded: (state, action) => {\n      state.connecting = false;\n      state.connected = true;\n      state.autoSync = true;\n      state.connectionMessage = \"Connection established.\";\n    },\n    connectionFailed: (state, action) => {\n      state.connecting = false;\n      state.connected = false;\n      state.autoSync = false;\n      state.connectionMessage = action.payload.message;\n      state.errorLog = [ ...state.errorLog, action.payload.error];\n    },\n    syncStarted: (state, action) => {\n      state.syncing = true\n    },\n    syncSucceeded: (state, action) => {\n      state.syncing = false;\n      state.lastSynced = Date.now();\n      state.syncMessage = \"Sync succeeded.\";\n\n    },\n    syncFailed: (state, action) => {\n      state.syncing = false;\n      state.syncMessage = action.payload.message;\n      state.errorLog = [ ...state.errorLog, action.payload.error];\n    },\n\n    setSyncSettings: (state, action) => {\n      state.syncSettings = action.payload;\n      return state;\n    }\n  }\n});\n\nexport default syncProviderSlice","import { uuidv4, roundEpochToMinutes } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n  public extId?: string;\n  public extStatus?: string;\n\n  // From and to are epochs rounded to minutes\n  constructor(public title: string, public roomId: string, public from: number, public to: number) {\n    this.id = uuidv4();\n    this.from = roundEpochToMinutes(this.from);\n    this.to = roundEpochToMinutes(this.to);\n  }\n}\n","import Allocation from \"../models/Allocation\";\nimport ISyncProvider from \"./ISyncProvider\";\nimport { maxSyncResults } from \"../shared/consts\";\n\nexport class GoogleSyncProvider implements ISyncProvider {\n\n  private get gapi(): any {\n    return (window as any).gapi;\n  }\n\n  // Array of API discovery doc URLs for APIs used by the quickstart\n  private readonly DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n  // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n  private readonly SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n\n  private readonly CONFIG = {\n    apiKey: \"[googleApi] apiKey not provided!!\",\n    clientId: \"[googleApi] clientId not provided!!\",\n    client_id: \"[googleApi] clientId not provided!!\",\n    discoveryDocs: this.DISCOVERY_DOCS,\n    scope: this.SCOPES,\n  };\n\n  constructor() {\n    this.handleClientLoad();\n  }\n\n  public connect(clientId: string, apiKey: string): Promise<string> {\n    try {\n      if (!clientId || !apiKey) {\n        console.log(\"[GoogleSyncProvider] Connect error. Both clientId and apiKey need to be provided.\");\n        return Promise.reject(new Error(`[GoogleSyncProvider] Connect error. Both clientId and apiKey need to be provided.`));\n      }\n\n      this.CONFIG.clientId = clientId;\n      this.CONFIG.client_id = clientId;\n      this.CONFIG.apiKey = apiKey;\n\n      if (this.gapi && this.gapi.client) {\n        console.log(\"[GoogleSyncProvider] Begin initClient, Config: \", JSON.stringify(this.CONFIG));\n\n        // Creating copy as gapi client was adding fields to config like client_id instead of clientId\n        return this.initClient(this.CONFIG);\n      } else {\n        return Promise.reject(new Error(`[GoogleSyncProvider] Connect gapi client not loaded error`));\n      }\n    } catch (error) {\n      return Promise.reject(new Error(`[GoogleSyncProvider] Connect unknown error: ${JSON.stringify(error)}`));\n    }\n\n  };\n\n  // Get allocations for next 24 hours\n  getAllocations(roomId: string, calendarId: string): Promise<Allocation[]> {\n    console.log(\"[GoogleSyncProvider] getAllocations\");\n    try {\n      if (!roomId || !calendarId) {\n        console.log(\"[GoogleSyncProvider] getAllocations error. Both roomId and calendarId need to be provided.\");\n        return Promise.reject(new Error(`[GoogleSyncProvider] Connect error. Both roomId and calendarId need to be provided.`));\n      };\n\n      if (this.gapi) {\n        console.log(\"[GoogleSyncProvider] gapi.client.calendar.events.list for calendarId: \", calendarId);\n        if (this.gapi.client && this.gapi.client.calendar) {\n          return this.fetchEvents(roomId, calendarId);\n        } else {\n          console.log(\"[GoogleSyncProvider] Error: gapi.client or gapi.client.calendar not loaded\");\n          // This mostly means not connected\n          return Promise.reject(new Error(`[GoogleSyncProvider] gapi.client or gapi.client.calendar not loaded`));\n        }\n      } else {\n        console.log(\"[GoogleSyncProvider] Error: gapi not loaded\");\n        return Promise.reject(new Error(`[GoogleSyncProvider] this.gapi not loaded`));\n      }\n    } catch (error) {\n      console.log(\"[GoogleSyncProvider] Error: unknown error\", error);\n      return Promise.reject(new Error(`[GoogleSyncProvider] Connect unknown error: ${JSON.stringify(error)}`));\n    }\n  }\n\n  fetchEvents(roomId: string, calendarId: string): Promise<Allocation[]> {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n\n    return this.gapi.client.calendar.events.list({\n      calendarId,\n      orderBy: \"startTime\",\n      maxResults: maxSyncResults,\n      showDeleted: true,\n      singleEvents: true,\n      timeMin: today.toISOString(),\n      timeMax: tomorrow.toISOString(),\n    }).then((response: any) => {\n      console.log(\"[GoogleSyncProvider] succesful events retrieved: \", response.result.items);\n      return this.syncEvents(roomId, response.result.items);\n    }).catch((error: any) => {\n      console.log(\"[GoogleSyncProvider] error while events retrievel: \", error);\n      return Promise.reject(new Error(`[GoogleSyncProvider] error while events retrievel:\", ${JSON.stringify(error)}`));\n    });\n  }\n\n  private handleClientLoad() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    script.onload = () => {\n      // [TODO] can we also have error callback?\n      this.gapi.load(\"client:auth2\", () => console.log(\"[Google Api] gapi loaded\"));\n    };\n  }\n\n  private initClient(config: any): Promise<any> {\n    return this.gapi.client.init(config)\n      .then(() => {\n        console.log(\"[GoogleSyncProvider] Client init success\");\n\n        // Why is sometimes getauthinstance null?\n        return this.gapi.auth2.getAuthInstance().signIn()\n          .then((user: any) => {\n            console.log(`[GoogleSyncProvider] Authorization successfull`, user);\n          })\n          .catch((error: any) => {\n            console.log(`[GoogleSyncProvider] Authorization error`, error);\n            return Promise.reject(new Error(`[GoogleSyncProvider] Authorization error:\", ${JSON.stringify(error)}`));\n          });\n      })\n      .catch((error: any) => {\n        console.log(\"[GoogleSyncProvider] Client init error:\", error);\n        return Promise.reject(new Error(`[GoogleSyncProvider] Client init error:\", ${JSON.stringify(error)}`));\n      });\n  }\n\n  private syncEvents(roomId: string, events: any): Allocation[] {\n    console.log(\"[GoogleSyncProvider] SyncEvents: \", events);\n    const mappedEvents = events.map((event: any) => {\n      const a = new Allocation(\n        event.summary,\n        roomId,\n        new Date(event.start.dateTime).getTime(),\n        new Date(event.end.dateTime).getTime());\n      if (event.attendees) {\n        a.attendees = event.attendees.length;\n      }\n      if (event.organizer && event.organizer.displayName) {\n        a.by = event.organizer.displayName;\n      }\n      a.extId = event.id;\n      a.extStatus = event.status;\n      return { ...a };\n    });\n\n    console.log(\"[GoogleSyncProvider] mappedEvents: \", mappedEvents);\n    return mappedEvents;\n  }\n\n}\n\nexport default GoogleSyncProvider;\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\nimport { roundEpochToMinutes } from \"../../shared/utility\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    deleteAllocation: (state, action) => {\n      delete state.entity[action.payload.id];\n      // this operation can be costly\n      state.ids = state.ids.filter((id: string) => id !== action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload.id].to = roundEpochToMinutes(action.payload.time);\n      state.entity[action.payload.id].confirmed = true;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = roundEpochToMinutes(action.payload.time);\n    },\n    // [TODO] sync adhoc meetings to external source\n    syncExternalAllocations: (state, action) => {\n      console.log(\"[AllocationSlice:syncExternalAllocations] : \", action);\n      // [TODO] Delete objects with extId && !confirmed && not in newAllocations\n      const newAllocations: Allocation[] = action.payload;\n      const expiredAllocations = Object.values(state.entity).filter((sa: Allocation) => !!sa.extId && !sa.confirmed && !newAllocations.find((a: Allocation) => a.extId === sa.extId));\n      for (const deleteAllocation of expiredAllocations) {\n        delete state.entity[deleteAllocation.id];\n        // this operation can be costly\n        state.ids = state.ids.filter((id: string) => id !== deleteAllocation.id);\n      };\n\n      // For each allocation in payload\n      for (const allocation of newAllocations) {\n        // check if exist entry with extId = id\n        const foundAllocation = Object.values(state.entity).find((sa: Allocation) => sa.extId === allocation.extId);\n        if (foundAllocation) {\n          // if exists entry then check the status !== confirmed, if yes delete, else update \n          if (allocation.extStatus !== \"confirmed\") {\n            delete state.entity[foundAllocation.id];\n            // this operation can be costly\n            state.ids = state.ids.filter((id: string) => id !== foundAllocation.id);\n          } else {\n            // update if meeting isn't yet confirmed \n            if (!foundAllocation.confirmed) {\n              foundAllocation.from = allocation.from;\n              foundAllocation.to = allocation.to;\n              foundAllocation.title = allocation.title;\n            }\n          }\n        } else {\n          // if no entry check status === confirmed, if yes add\n          if (allocation.extStatus === \"confirmed\") {\n            state.entity[allocation.id] = allocation;\n            state.ids.push(allocation.id);\n          }\n        }\n      }\n    }\n  },\n});\n\nexport default allocationSlice;\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\nimport reduceReducers from \"reduce-reducers\";\nimport { crossSliceReducer } from \"./CrossSlice/CrossSliceReducer\";\nimport syncProviderSlice from \"./SyncProvider/SyncProviderSlice\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst combinedReducers = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n  syncProvider: syncProviderSlice.reducer,\n});\n\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer);\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../../shared/cacheManager\";\nimport * as actions from \"./CrossSliceActions\";\n\nexport const crossSliceReducer = (state: any, action: any) => {\n  let newState: any = {...state};\n  newState.ui = {...newState.ui};\n\n  switch (action.type) {\n    case \"@@INIT\":\n      newState.ui.selectedRoomId = newState.room.ids[0];\n      return newState;\n    case actions.removeStateStarted.toString():\n      newState.ui.stateSyncInProgress = true;\n      return newState;\n    case actions.removeStateSucceeded.toString():\n      newState.ui.stateSyncInProgress = false;\n      return newState;\n    case actions.removeStateFailed.toString():\n      newState.ui.stateSyncInProgress = false;\n      newState.ui.stateSyncError = action.payload;\n      return newState;\n    case actions.saveStateStarted.toString():\n      newState.ui.stateSyncInProgress = true;\n      return newState;\n    case actions.saveStateSucceeded.toString():\n      newState.ui.stateSyncInProgress = false;\n      return newState;\n    case actions.saveStateFailed.toString():\n      newState.ui.stateSyncInProgress = false;\n      newState.ui.stateSyncError = action.payload;\n      return newState;\n    case actions.loadStateStarted.toString():\n      newState.ui.stateSyncInProgress = true;\n      return newState;\n    case actions.loadStateSucceeded.toString():\n      // [TODO] if new version arrive, state shuold be cleaned, or retrofitted.\n      newState = {...newState, ...action.payload};\n      newState.ui.time = Date.now();\n      newState.ui.stateSyncInProgress = false;\n\n      return newState;\n    case actions.loadStateFailed.toString():\n      newState.ui.stateSyncInProgress = false;\n      newState.ui.stateSyncError = action.payload;\n      return newState;\n    default:\n      return state;\n  }\n}\n","import ISyncProvider from \"./ISyncProvider\";\nimport GoogleSyncProvider from \"./GoogleSyncProvider\";\nimport Allocation from \"../models/Allocation\";\nimport { getSelectedRoomId } from \"../store/UI/UISelectors\";\nimport store from \"../store/store\";\nimport allocationSlice from \"../store/Allocation/AllocationSlice\";\nimport { getSyncSettings } from \"../store/SyncProvider/SyncProviderSelectors\";\n\nconst syncProvider: ISyncProvider = new GoogleSyncProvider();\n\nexport const Connect = (clientId: string, apiKey: string): Promise<string> => {\n  return syncProvider.connect(clientId, apiKey);\n};\n\nexport const Sync = (roomId: string, calendarId: string): Promise<Allocation[]> => {\n  return syncProvider.getAllocations(roomId, calendarId)\n    .then((allocations: Allocation[]) => {\n      store.dispatch(allocationSlice.actions.syncExternalAllocations(allocations));\n      return allocations;\n    });;\n};","import syncProviderSlice from \"./SyncProviderSlice\";\nimport * as syncProvider from \"../../providers/SyncProvider\";\nimport { getSelectedRoomId } from \"../UI/UISelectors\";\nimport { getSyncSettings } from \"./SyncProviderSelectors\";\n\nexport const connect = () => (dispatch: any, getState: any) => {\n  dispatch(syncProviderSlice.actions.connectionStarted());\n\n  const syncSettings = getSyncSettings(getState());\n  console.log(`[SyncProviderActions] connect with clientId ${syncSettings.clientId} apiKey: ${syncSettings.apiKey}`);\n\n  return syncProvider.Connect(syncSettings.clientId, syncSettings.apiKey).then(\n    () => dispatch(syncProviderSlice.actions.connectionSucceeded()),\n    (error) => dispatch(syncProviderSlice.actions.connectionFailed({ message: error.message, error: error.message })),\n  );\n};\n\nexport const disconnect = () => (dispatch: any) => {\n  // [TODO];\n};\n\nexport const sync = () => (dispatch: any, getState: any) => {\n  dispatch(syncProviderSlice.actions.syncStarted());\n\n  const roomId = getSelectedRoomId(getState());\n  const syncSettings = getSyncSettings(getState());\n\n  return syncProvider.Sync(roomId, syncSettings.calendarId).then(\n    () => dispatch(syncProviderSlice.actions.syncSucceeded()),\n    (error) => dispatch(syncProviderSlice.actions.syncFailed({ message: error.message, error: error.message })),\n  );\n};","import { connect } from \"react-redux\";\nimport * as selectors from \"../../store/selectors\";\nimport roomSlice from \"../../store/Room/RoomSlice\";\nimport Room from \"../../models/Room\";\nimport {saveState, removeState} from \"../../store/CrossSlice/CrossSliceActions\";\nimport uiSlice from \"../../store/UI/UISlice\";\nimport AdminPanel from \"../../components/Admin/AdminPanel/AdminPanel\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport { getSyncSettings } from \"../../store/SyncProvider/SyncProviderSelectors\";\nimport syncProviderSlice from \"../../store/SyncProvider/SyncProviderSlice\";\nimport { connect as syncConnect } from \"../../store/SyncProvider/SyncProviderActions\";\n\nconst mapStateToProps = (state: any) => {\n  const selectedRoom = selectors.getSelectedRoom(state);\n  const roomEquipment = selectors.getSelectedRoomEquipment(state);\n  const syncSettings = getSyncSettings(state);\n  const syncProvider = state.syncProvider;\n\n  return {\n    selectedRoom,\n    roomEquipment,\n    syncSettings,\n    syncProvider,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSettingsSaved: (settings: any) => {\n      console.log(\"[Admin] onSettingsSaved\");\n      dispatch(roomSlice.actions.changeRoomName({...settings.room}));\n      // [TODO] temporary solution, need to be changed when multiple room management will be added\n      dispatch(uiSlice.actions.setSelectedRoomId(settings.room.id));\n      dispatch(syncProviderSlice.actions.setSyncSettings(settings.syncSettings));\n      // dispatch(uiSlice.actions.hideAdminPanel());\n      // dispatch(saveState());\n    },\n    onEquipmentToggleClick: (roomId: string, type: string) => {\n      console.log(\"onEquipmentToggleClick\");\n      dispatch(equipmentSlice.actions.toggleEquipment({roomId, type}));\n    },\n    onSettingsClear: () => {\n      dispatch(removeState());\n    },\n    onCancel: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onConnect: () => {\n      dispatch(syncConnect());\n    }\n  };\n};\n\nconst Admin = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AdminPanel);\n\nexport default Admin;\n","import React from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\nimport Button from \"../../UI/Button/Button\";\n\ninterface IProps {\n  equipment: Equipment[];\n  onChangeStatusClick: (e: Equipment) => void;\n}\n\nexport const EquipmentBar: React.FC<IProps> = (props: IProps) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return <Button\n      key={e.type}\n      style=\"icon\"\n      onClick={() => props.onChangeStatusClick(e)}\n      iconId={`icon-${e.type.toLowerCase()}`}\n      btnClassName={`btn_${e.status.toLowerCase()}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default EquipmentBar;\n","import React, { ReactNode } from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\n\ninterface IProps {\n  roomStatus: RoomStatus;\n  children: ReactNode;\n}\n\nexport const RoomStatusBorder: React.FC<IProps> = (props: IProps) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default RoomStatusBorder;\n","import React from \"react\";\nimport EquipmentBar from \"./EquipmentBar/EquipmentBar\";\nimport \"./Header.scss\";\nimport RoomStatusBorder from \"../Room/RoomStatusBorder/RoomStatusBorder\";\nimport { RoomStatus } from \"../../models/RoomStatus\";\nimport Room from \"../../models/Room\";\nimport { Equipment } from \"../../models/Equipment\";\n\ninterface IProps {\n  room: Room;\n  roomStatus: RoomStatus;\n  equipment: Equipment[];\n  onChangeStatusClick: (e: Equipment) => void;\n}\n\nexport const Header: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"Header\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <div className=\"HeaderContent\">\n          <div><h1>{props.room.name}</h1></div>\n          <div>{new Date().toLocaleDateString()}</div>\n          <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick} />\n        </div>\n      </RoomStatusBorder>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes, formatHoursMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\ninterface IProps {\n  title: string;\n  from: number;\n  to: number;\n  time: number;\n}\n\nexport const AllocationInfo: React.FC<IProps> = (props: IProps) => {\n  const startsIn = millisecondsToMinutes(props.from - props.time);\n\n  return (\n    <div className=\"AllocationInfo\">\n      <div className=\"text-very-small text-gray\">Next Meeting</div>\n      <div><h4>{props.title}</h4></div>\n      <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      <div>Starts In: {formatHoursMinutes(startsIn)}</div>\n    </div>\n  );\n};\n\nexport default AllocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes, formatHoursMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\ninterface IProps {\n  title: string;\n  from: number;\n  to: number;\n  time: number;\n  attendees?: number;\n}\n\nexport const AllocationInfoBig: React.FC<IProps> = (props: IProps) => {\n  const timeTillEnd = millisecondsToMinutes(props.to - props.time);\n  const duration = millisecondsToMinutes(props.to - props.from);\n  const timeInMeeting = duration - timeTillEnd;\n\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">\n        <div className=\"text-small text-gray\">In Progress</div>\n        <div><h2>{props.title}</h2></div>\n        <div><span>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</span></div>\n        <div>Ends In: {formatHoursMinutes(timeTillEnd)}</div>\n        {props.attendees ? <div>{props.attendees} attendees</div> : null}\n      </div>\n    </>\n  );\n};\n\nexport default AllocationInfoBig;\n","import React from \"react\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport \"./AllocationMenu.scss\";\nimport Button from \"../../UI/Button/Button\";\nimport Allocation from \"../../../models/Allocation\";\nimport { defaultExtendDuration } from \"../../../shared/consts\";\n\ninterface IProps {\n  roomId: string;\n  time: number;\n  roomStatus: RoomStatus;\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const AllocationMenu: React.FC<IProps> = (props: IProps) => {\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, props.time, defaultExtendDuration)}\n          iconId=\"icon-calendar-plus-o\"\n          label=\"Extend\"\n        />\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onFinishEarlyClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-times-o\"\n          label=\"Finish\"\n        />\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id, props.time)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          style=\"icon-text-large\"\n          onClick={() => props.onAddMeetingClick(props.roomId, props.time)}\n          iconId=\"icon-calendar-o\"\n          label=\"Book now\"\n        />\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default AllocationMenu;\n","import React from \"react\";\nimport Admin from \"../../../containers/Admin/Admin\";\nimport AllocationInfo from \"../../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../../Allocation/AllocationMenu/AllocationMenu\";\nimport \"./AllocationsView.scss\";\nimport Room from \"../../../models/Room\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport Allocation from \"../../../models/Allocation\";\n\ninterface IProps {\n  room: Room;\n  time: number;\n  roomStatus: RoomStatus;\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const AllocationsView: React.FC<IProps> = (props: IProps) => {\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <Admin />;\n  }\n\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  // [TODO] Overlapping events, if current event is overlapping next\n  if (props.currentAllocation) {\n    currentAllocationTag =\n      <AllocationInfoBig\n        time={props.time}\n        {...props.currentAllocation}\n      />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo time={props.time} {...props.nextAllocation} />;\n  }\n\n  return (\n    <div className=\"AllocationsView\">\n      <div className=\"Allocations\">\n        {currentAllocationTag}\n        {nextAllocationTag}\n      </div>\n      <AllocationMenu\n        roomId={props.room.id}\n        time={props.time}\n        currentAllocation={props.currentAllocation}\n        nextAllocation={props.nextAllocation}\n        roomStatus={props.roomStatus}\n        onFinishEarlyClick={props.onFinishEarlyClick}\n        onExtendMeetingClick={props.onExtendMeetingClick}\n        onConfirmMeetingClick={props.onConfirmMeetingClick}\n        onAddMeetingClick={props.onAddMeetingClick}\n      />\n    </div>\n\n  );\n};\n\nexport default AllocationsView;\n","import React from \"react\";\nimport { formatTimeStamp, dayMinuteToRadian } from \"../../../shared/utility\";\nimport \"./RoomClock.scss\";\nimport { minutesInDay, minutesInHour, oneHour, clockHoursBackwards, clockHoursForward } from \"../../../shared/consts\";\nimport Allocation from \"../../../models/Allocation\";\n\ninterface IProps {\n  time: number;\n  allocations: Allocation[];\n}\n\n// [TODO] show overlapping events with different color,\n// in general overlapping events should be tested if they work correctly\nexport const RoomClock: React.FC<IProps> = (props: IProps) => {\n  const defaultLineWidth = 10;\n  const mainRadius = 200;\n\n  const tickWidth = 6;\n  const tickRadius = 170;\n  const tickLength = 25;\n  const canvasSize = 500;\n  const colorWhite = \"#FFF\";\n  const colorBlack = \"#000\";\n  const colorGreen = \"#4CAF50\"; // \"rgb(139, 195, 74)\";\n  const colorRed = \"rgba(244, 67, 54, 0.5)\"; // \"rgba(255, 87, 34, 0.5)\" // \"#F44336\"; // ;\n\n  const drawCircleStroke = (ctx: any, fromMinute: number, toMinute: number, color: string,\n                            radius?: number, lineWidth?: number, lineCap?: string) => {\n    const clockRadius = radius || mainRadius;\n\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth || defaultLineWidth;\n    ctx.strokeStyle = color;\n    ctx.lineCap = lineCap || \"butt\";\n\n    const startAngle = dayMinuteToRadian(fromMinute);\n    const endAngle = dayMinuteToRadian(toMinute);\n\n    ctx.arc(canvasSize / 2, canvasSize / 2, clockRadius, startAngle, endAngle);\n    ctx.stroke();\n  };\n\n  const UTCToClockTime = (epoch: number): number => {\n    const date = new Date(0);\n    date.setUTCMilliseconds(epoch);\n    return date.getHours() * minutesInHour + date.getMinutes();\n  };\n\n  const capLimitMin = (currentTime: number, limitTime: number, minHourRange: number): number => {\n    return Math.max(limitTime, currentTime - minHourRange * oneHour);\n  };\n\n  const capLimitMax = (currentTime: number, limitTime: number, maxHourRange: number): number => {\n    return Math.min(limitTime, currentTime + maxHourRange * oneHour);\n  };\n\n  const drawCurrentTime = (ctx: any) => {\n    const minutes = UTCToClockTime(props.time);\n\n    // Draw available slots for whole day\n    drawCircleStroke(ctx,\n      minutes - clockHoursBackwards * minutesInHour,\n      minutes + clockHoursForward * minutesInHour,\n      colorGreen, mainRadius, defaultLineWidth, \"round\");\n\n    // Draw busy slots for given allocations\n    const mappedAllocations = props.allocations\n    .map((a: Allocation) => ({from: UTCToClockTime(capLimitMin(props.time, a.from, clockHoursBackwards)),\n                       to: UTCToClockTime(capLimitMax(props.time, a.to, clockHoursForward))}));\n\n    mappedAllocations\n    .forEach((e: {from: number, to: number}) => {\n      drawCircleStroke(ctx, e.from, e.to, colorBlack, mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n    });\n\n    mappedAllocations\n    .forEach((e: {from: number, to: number}) => {\n      drawCircleStroke(ctx, e.from, e.from + 1, colorRed, mainRadius - defaultLineWidth, 3 * defaultLineWidth);\n      drawCircleStroke(ctx, e.from, e.to, colorRed, mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n      drawCircleStroke(ctx, e.to, e.to + 1, colorRed, mainRadius - defaultLineWidth , 3 * defaultLineWidth);\n    });\n\n    // Draw current time\n    drawCircleStroke(ctx, minutes - (tickWidth / 2 - 1), minutes + tickWidth / 2, colorWhite, tickRadius, tickLength);\n    drawCircleStroke(ctx, minutes, minutes + 1, colorBlack, mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n\n    // draw 30 min slots\n    for (let i = 0; i < 24; i++) {\n      const minutesInHalfHour = minutesInHour / 2;\n      // long line on each full hour and short on not full hour\n      if (i % 2) {\n        drawCircleStroke(ctx, i * minutesInHalfHour, i * minutesInHalfHour + 1, colorWhite, 198, 12);\n      } else {\n        drawCircleStroke(ctx, i * minutesInHalfHour, i * minutesInHalfHour + 1, colorWhite,\n          mainRadius - defaultLineWidth / 2, 2 * defaultLineWidth);\n      }\n    }\n  };\n\n  const canvas: any = React.createRef();\n  // [TODO] This component need to be smart component and this timeout then can be removed\n  setTimeout(() => {\n    if (canvas.current && canvas.current.getContext) {\n      const ctx = canvas.current.getContext(\"2d\");\n\n      canvas.current.width = canvasSize;\n      canvas.current.height = canvasSize;\n      drawCurrentTime(ctx);\n    }\n  }, 10);\n\n  return (\n    <div className=\"RoomClock\">\n      <span>{formatTimeStamp(props.time)}</span>\n      <canvas className=\"RoomClockCanvas\" id=\"canvas\" ref={canvas} />\n    </div>\n  );\n};\n\nexport default RoomClock;\n","import React from \"react\";\nimport AllocationsView from \"../../Allocation/AllocationsView/AllocationsView\";\nimport RoomClock from \"../RoomClock/RoomClock\";\nimport \"./RoomViewContent.scss\";\nimport Allocation from \"../../../models/Allocation\";\nimport Room from \"../../../models/Room\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\n\ninterface IProps {\n  clockAllocations: Allocation[];\n  room: Room;\n  time: number;\n  roomStatus: RoomStatus;\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const RoomViewContent: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"RoomViewContent\">\n      <RoomClock time={props.time} allocations={props.clockAllocations} />\n      <div className=\"RoomViewContentSeparator\" />\n      <AllocationsView {...props} />\n    </div>\n  );\n};\n\nexport default RoomViewContent;\n","import React from \"react\";\nimport \"./SyncStatusBar.scss\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\n\ninterface IProps {\n  syncInformation: any;\n}\n\nexport const SyncStatusBar: React.FC<IProps> = (props: IProps) => {\n  console.log(\"[SyncStatusBar] syncInfo: \", props.syncInformation);\n  return (\n    <div className=\"SyncStatusBar\">\n      <span>{`${props.syncInformation.connecting ? \"Connecting...\" : props.syncInformation.connected ? \"Connected\" : \"Not Connected\"}`}</span>\n      {/* // [TODO] check if connection message should be used */}\n      <span>{`Auto sync: ${props.syncInformation.autoSync ? \"on\" : \"off\"}`}</span>\n      <span>{`${props.syncInformation.syncing ? \"Syncing...\" : props.syncInformation.syncMessage || \"\" }`}</span>\n      <span>{props.syncInformation.lastSynced > 0 ? `Last synced: ${formatTimeStamp(props.syncInformation.lastSynced)} ${new Date(props.syncInformation.lastSynced).toLocaleDateString()}` : \"\"}</span>\n    </div>\n  );\n};\n\nexport default SyncStatusBar;\n","import React from \"react\";\nimport { RoomStatus } from \"../../models/RoomStatus\";\nimport RoomStatusBorder from \"../Room/RoomStatusBorder/RoomStatusBorder\";\nimport \"./Footer.scss\";\nimport SyncStatusBar from \"./SyncStatusBar/SyncStatusBar\";\nimport Button from \"../UI/Button/Button\";\n\ninterface IProps {\n  roomStatus: RoomStatus;\n  syncInformation: any;\n  onAdminClick: () => void;\n}\n\nexport const Footer: React.FC<IProps> = (props: IProps) => {\n  return (\n    <div className=\"Footer\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <div className=\"FooterContent\">\n          <SyncStatusBar syncInformation={props.syncInformation}/>\n          <Button\n            style=\"icon-text\"\n            btnClassName=\"btn_dark\"\n            onClick={props.onAdminClick}\n            iconId=\"icon-settings\"\n            label=\"Admin\"\n          />\n        </div>\n      </RoomStatusBorder>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nimport \"./Backdrop.scss\";\n\nexport const Backdrop: React.FC = () => {\n  return (\n    <div className=\"Backdrop\"/>\n  );\n};\n\nexport default Backdrop;\n","import React from \"react\";\nimport \"./Popup.scss\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Popup = (props: any) => {\n  const classes = [\"Popup\"];\n  if (props.open) {\n    classes.push(\"open\");\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <Backdrop/>\n      <div className=\"PopupContent\">\n        <Button\n          btnClassName=\"PopupClose btn_dark\"\n          style=\"text\"\n          onClick={props.onCloseClick}\n          label=\"x\"\n        />\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import React from \"react\";\nimport Admin from \"../../../containers/Admin/Admin\";\nimport Header from \"../../Header/Header\";\nimport RoomViewContent from \"../RoomViewContent/RoomViewContent\";\nimport \"./RoomView.scss\";\nimport Footer from \"../../Footer/Footer\";\nimport Popup from \"../../UI/Popup/Popup\";\nimport Room from \"../../../models/Room\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport Allocation from \"../../../models/Allocation\";\n\ninterface IProps {\n  time: number;\n  room: Room;\n  roomStatus: RoomStatus;\n  equipment: Equipment[];\n  adminPanelOpen: boolean;\n  clockAllocations: Allocation[];\n  currentAllocation: Allocation;\n  nextAllocation: Allocation;\n  syncInformation: any;\n  onChangeStatusClick: (e: Equipment) => void;\n  onAdminClick: () => void;\n  onPopupCloseClick: () => void;\n  onAddMeetingClick: (id: string, time: number) => void;\n  onConfirmMeetingClick: (id: string, time: number) => void;\n  onExtendMeetingClick: (id: string, time: number, duration: number) => void;\n  onFinishEarlyClick: (id: string, time: number) => void;\n}\n\nexport const RoomView: React.FC<IProps> = (props: IProps) => {\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <span>No room provided</span>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <Header {...props} />\n      <RoomViewContent {...props} />\n      <Footer {...props} />\n      <Popup open={props.adminPanelOpen} onCloseClick={props.onPopupCloseClick}>\n        <Admin />\n      </Popup>\n    </div>\n  );\n};\n\nexport default RoomView;\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/Room/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { defaultConfirmationThreshold, defaultMeetingDuration } from \"../../shared/consts\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getAdminPanelOpen, getDate } from \"../../store/UI/UISelectors\";\nimport uiSlice from \"../../store/UI/UISlice\";\nimport { Dispatch } from \"react\";\nimport { Action } from \"redux\";\n\n// [TODO] state is any\nconst mapStateToProps = (state: any) => {\n  const time = getDate(state);\n  const adminPanelOpen = getAdminPanelOpen(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n\n  const roomStatus = selectors.getSelectedRoomStatus(defaultConfirmationThreshold)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocation(state);\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  // get allocations for clock\n  const clockAllocations = selectors.getRoomClockAllocations(state);\n\n  const syncInformation = state.syncProvider;\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n    adminPanelOpen,\n    clockAllocations,\n    syncInformation,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => {\n  return {\n    onAdminClick: () => {\n      dispatch(uiSlice.actions.showAdminPanel());\n    },\n    onPopupCloseClick: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onAddMeetingClick: (roomId: string, time: number) => {\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", roomId, time, time + defaultMeetingDuration), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id, time}));\n    },\n    onExtendMeetingClick: (id: string, time: number, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, time, amount}));\n    },\n    onFinishEarlyClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.finishEarly({id, time}));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { roundEpochToMinutes } from \"../shared/utility\";\nimport { loadState, saveState } from \"./CrossSlice/CrossSliceActions\";\nimport store from \"./store\";\nimport { sync, connect } from \"./SyncProvider/SyncProviderActions\";\nimport { hasAutoSync } from \"./SyncProvider/SyncProviderSelectors\";\nimport uiSlice from \"./UI/UISlice\";\nimport { oneMinute, syncInterval, uiTimeOffset } from \"../shared/consts\";\n\n// 1 minute refresh interval for timer\nconst refreshInterval = oneMinute;\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  const startState = store.getState();\n  console.log(\"[Start] startState:\", startState);\n  store.dispatch(loadState());\n  // [TODO] after state is loaded and syncsettings is set, connect can be dispatched\n  // [TODO] here some strange behavior with connect\n  // store.dispatch(connect());\n\n  // [TODO] once a day clean old entries\n  setInterval(() => {\n    console.log(\"[Start] Interval\");\n    // Set time to be alway 1 milliesecond after full minute\n    store.dispatch(uiSlice.actions.setTime(roundEpochToMinutes(Date.now()) + uiTimeOffset));\n\n    // [TODO] save state interval\n    store.dispatch(saveState());\n\n    // [TODO] sync interval\n    // [TODO] check if connected, can also be done in syncdefault\n    if (hasAutoSync(store.getState())) {\n      // [TODO] check if syncInterval works\n      // 1 is time offset of clock\n      if (store.getState().ui.time % syncInterval === uiTimeOffset) {\n        store.dispatch(sync());\n      }\n    }\n\n  }, refreshInterval);\n\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App/App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}