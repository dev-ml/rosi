{"version":3,"sources":["assets/symbol-defs.svg","models/RoomStatus.ts","shared/utility.ts","components/Allocation/AllocationInfo/AllocationInfo.tsx","components/Allocation/AllocationInfoBig/AllocationInfoBig.tsx","store/selectors.ts","models/EquipmentType.ts","components/UI/Button/Button.tsx","components/Allocation/AllocationMenu/AllocationMenu.tsx","components/Room/RoomStatusBorder/RoomStatusBorder.tsx","components/StatusBar/StatusBar.tsx","components/Room/TimeView/TimeView.tsx","components/Header/EquipmentBar/EquipmentBar.tsx","components/Header/Header.tsx","components/UI/Backdrop/Backdrop.tsx","components/UI/Popup/Popup.tsx","store/UI/UISelectors.ts","store/Room/RoomSlice.ts","store/crossSliceReducer.ts","shared/cacheManager.ts","store/UI/UISlice.ts","models/Room.ts","components/Equipment/EquipmentAdmin/EquipmentAdmin.tsx","models/EquipmentStatus.ts","components/UI/Input/Input.tsx","components/Google/SignInButton.tsx","models/Allocation.ts","store/Allocation/AllocationSlice.ts","models/Equipment.ts","store/Equipment/EquipmentSlice.ts","store/store.ts","providers/googleApi.ts","components/Admin/AdminPanel/AdminPanel.tsx","containers/Admin/Admin.tsx","components/Room/RoomView/RoomView.tsx","containers/SelectedRoom/SelectedRoom.tsx","containers/App/App.tsx","serviceWorker.js","store/start.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RoomStatus","formatTimeStamp","timeStamp","Date","toLocaleTimeString","hour","minute","hour12","millisecondsToMinutes","milliseconds","Math","ceil","roundEpochToMinutes","epoch","updateObject","oldObject","updatedProperties","Object","objectSpread","checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","uuidv4","replace","c","r","random","toString","allocationInfo","props","startsIn","from","time","react_default","a","createElement","className","title","to","floor","allocationInfoBig","timeTillEnd","duration","timeInMeeting","round","Fragment","attendees","agenda","n","EquipmentType","Button","buttonElement","type","concat","btnClassName","onClick","aria-label","iconId","xlinkHref","icons","label","allocationMenu","meetingButtons","confirmCurrentAllocationTag","confirmNextAllocationTag","currentAllocation","roomStatus","awaiting","UI_Button_Button","onConfirmMeetingClick","id","onExtendMeetingClick","onFinishEarlyClick","nextAllocation","onAddMeetingClick","roomId","roomStatusBorder","classNames","push","join","children","StatusBar","onAdminClicked","timeView","mainRadius","canvasSize","greenColor","redColor","drawCircleStroke","ctx","fromMinute","toMinute","color","radius","lineWidth","clockRadius","dayMinuteToRadian","minuteRadian","PI","beginPath","strokeStyle","startAngle","endAngle","arc","stroke","UTCToClockTime","date","setUTCMilliseconds","getHours","getMinutes","canvas","React","createRef","setTimeout","current","getContext","width","height","minutes","allocations","map","forEach","e","i","drawCurrentTime","ref","equipmentBar","equipment","key","onChangeStatusClick","toLowerCase","status","mapEquipmentToButton","Header","room","name","toLocaleDateString","EquipmentBar_EquipmentBar","Backdrop","Popup","classes","open","UI_Backdrop_Backdrop","onCloseClick","getDate","createSelector","getSelectedRoomId","getAdminPanelOpen","getSyncSettings","getSelectedRoom","rooms","entity","getSelectedRoomAllocations","allocation","values","filter","getSelectedRoomCurrentAllocations","getSelectedRoomFutureAllocations","getSelectedRoomFutureAllocationsSorted","sort","b","getSelectedRoomNextAllocation","slice","getSelectedRoomCurrentAllocation","getSelectedRoomEquipment","roomSlice","createSlice","initialState","ids","reducers","addRoom","state","action","payload","changeRoomName","saveStateStarted","createAction","saveStateSucceeded","saveStateFailed","loadStateStarted","loadStateSucceeded","loadStateFailed","removeStateStarted","removeStateSucceeded","removeStateFailed","saveState","dispatch","getState","data","localforage","setItem","then","error","loadState","getItem","removeState","removeItem","uiSlice","selectedRoomId","now","adminPanelOpen","syncSettings","syncInProgress","syncError","setSelectedRoomId","setTime","showAdminPanel","hideAdminPanel","setSyncSettings","Room","classCallCheck","this","capacity","location","EquipmentStatus","EquipmentAdmin","onEquipmentToggleClick","Input","inputElement","inputClasses","invalid","shouldValidate","touched","elementType","assign","elementConfig","onChange","changed","options","option","displayValue","SignInButton","_this","console","log","possibleConstructorReturn","getPrototypeOf","call","apiCalendar","googleApi","signedIn","sign","handleItemClick","bind","assertThisInitialized","onLoadCallback","setState","listenSign","event","handleAuthClick","handleSignoutClick","_this2","setInterval","listUpcomingEvents","initClient","_this3","signButton","sync","Component","Allocation","confirmed","by","extId","extStatus","allocationSlice","addAllocation","deleteAllocation","finishEarly","extendMeeting","amount","confirmMeeting","syncExternalAllocations","newAllocations","expiredAllocations","sa","find","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","foundAllocation","_iterator2","Equipment","equipmentSlice","addEquipment","deleteEquipment","toggleEquipment","equipmentFound","eq","newEquipment","Available","setStatus","changeStatus","newStatus","Broken","NotAvailable","combinedReducers","combineReducers","ui","reducer","rootReducer","reduceReducers","newState","store","configureStore","GoogleApi","apiKey","clientId","calendarId","events","syncToken","DISCOVERY_DOCS","SCOPES","CONFIG","discoveryDocs","scope","handleClientLoad","createClass","get","window","gapi","script","document","src","body","appendChild","onload","load","auth2","getAuthInstance","signIn","signOut","callback","isSignedIn","listen","request","constructUpcomingEventsRequestFull","constructUpcomingEventsRequestPartial","singleSync","pageToken","client","calendar","list","response","result","items","syncEvents","nextPageToken","nextSyncToken","catch","statusCode","mappedEvents","summary","start","dateTime","getTime","end","organizer","displayName","actions","_this4","maxResults","arguments","today","tomorrow","setDate","orderBy","showDeleted","singleEvents","timeMin","toISOString","timeMax","_this5","init","updateSigninStatus","AdminPanel","orderForm","roomName","placeholder","validation","valid","clientID","calendarID","formIsValid","selectedRoom","roomEquipment","submitSettings","preventDefault","formData","formElementIdentifier","newSettings","onSettingsSaved","changeConfig","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedFormData","defineProperty","onSettingsClear","formElementsArray","config","form","onSubmit","formElement","UI_Input_Input","Equipment_EquipmentAdmin_EquipmentAdmin","SignInButton_SignInButton","clearSettings","Admin","connect","selectors","settings","roomView","currentAllocationTag","AllocationInfoBig_AllocationInfoBig","nextAllocationTag","AllocationInfo_AllocationInfo","RoomStatusBorder_RoomStatusBorder","components_Header_Header","TimeView_TimeView","clockAllocations","AllocationMenu_AllocationMenu","components_StatusBar_StatusBar","onAdminClick","UI_Popup_Popup","onPopupCloseClick","Admin_Admin","SelectedRoom","ownProps","threshold","occupied","free","RoomView","App","SelectedRoom_SelectedRoom","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","startState","ReactDOM","render","es","containers_App_App","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c15d3c98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symbol-defs.119ddbe0.svg\";","export enum RoomStatus {\n  occupied = \"occupied\",\n  free = \"free\",\n  awaiting = \"awaiting\",\n}","export const formatTimeStamp = (timeStamp: number): string => {\n  return new Date(timeStamp).toLocaleTimeString(\"en-US\", {hour: \"2-digit\", minute: \"2-digit\", hour12: false});\n};\n\n\nexport const millisecondsToMinutes = (milliseconds: number): number => {\n  return Math.ceil((milliseconds / 1000) / 60);\n}\n\nexport const roundEpochToMinutes = (epoch: number): number => {\n  return epoch - (epoch % (1000 * 60));\n}\n\nexport const updateObject = (oldObject: any, updatedProperties: any) => {\n  return {\n      ...oldObject,\n      ...updatedProperties,\n  };\n};\n\nexport const checkValidity = ( value: any, rules: any ) => {\n  let isValid = true;\n  if ( !rules ) {\n      return true;\n  }\n\n  if ( rules.required ) {\n      isValid = value.trim() !== '' && isValid;\n  }\n\n  if ( rules.minLength ) {\n      isValid = value.length >= rules.minLength && isValid\n  }\n\n  if ( rules.maxLength ) {\n      isValid = value.length <= rules.maxLength && isValid\n  }\n\n  if ( rules.isEmail ) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test( value ) && isValid\n  }\n\n  if ( rules.isNumeric ) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test( value ) && isValid\n  }\n\n  return isValid;\n}\n\nexport const uuidv4 = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    // tslint:disable-next-line:no-bitwise\n    const r = Math.random() * 16 | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === \"x\" ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n};\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfo.scss\";\n\nconst allocationInfo = (props: any) => {\n  // console.log(\"allocationInfo: \", props);\n  const startsIn = millisecondsToMinutes(props.from - props.time);\n\n  return (\n    <div className=\"AllocationInfo\">\n      <div>Next Meeting</div>\n      <div><h4>{props.title}</h4></div>\n      <div>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div>\n      {/* <div>{props.by}{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</div> */}\n      <div>Starts In: {Math.floor(startsIn / 60) ? <span>{Math.floor(startsIn / 60)} h</span> : null} {startsIn % 60} min</div>\n    </div>\n  );\n};\n\nexport default allocationInfo;\n","import React from \"react\";\nimport { formatTimeStamp, millisecondsToMinutes } from \"../../../shared/utility\";\nimport \"./AllocationInfoBig.scss\";\n\nconst allocationInfoBig = (props: any) => {\n  const timeTillEnd = millisecondsToMinutes(props.to - props.time);\n  const duration = millisecondsToMinutes(props.to - props.from);\n  const timeInMeeting = duration - timeTillEnd;\n  const percentInMeeting = Math.round(timeInMeeting / duration * 100);\n\n  return (\n    <>\n      <div className=\"AllocationInfoBig\">\n        <div>In Progress</div>\n        <div><h2>{props.title}</h2></div>\n        <div><span>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</span></div>\n        {/* <div><h3>{props.by}</h3><span>{formatTimeStamp(props.from)} - {formatTimeStamp(props.to)}</span></div> */}\n        <div>Ends In: {Math.floor(timeTillEnd / 60) ? <span>{Math.floor(timeTillEnd / 60)} h</span> : null} {timeTillEnd % 60} min</div>\n        {props.attendees ? <div>{props.attendees} attendees</div> : null}\n        {props.agenda ? <div>Agenda: {props.agenda}</div> : null}\n        {/* <div>Duration: {duration} min</div> */}\n        {/* <div>% Done: {percentInMeeting}</div> */}\n      </div>\n    </>\n  );\n};\n\nexport default allocationInfoBig;\n","import { createSelector } from \"redux-starter-kit\";\nimport Allocation from \"../models/Allocation\";\nimport { Equipment } from \"../models/Equipment\";\nimport Room from \"../models/Room\";\nimport { RoomStatus } from \"../models/RoomStatus\";\nimport { getRoomAllocations } from \"./Allocation/AllocationSelectors\";\nimport { getDate, getSelectedRoomId } from \"./UI/UISelectors\";\nimport timeView from \"../components/Room/TimeView/TimeView\";\nimport { getRoomEquipment } from \"./Equipment/EquipmentSelectors\";\n\n// General\nexport const isRoomOccupied = (name: string) => createSelector(\n  [getDate, getRoomAllocations(name)],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date).length > 0,\n);\n\n// Selected Room\nexport const getSelectedRoom = createSelector(\n  [getSelectedRoomId, \"room\"],\n  (roomId, rooms) => rooms.entity[roomId],\n);\n\n// [TODO] rewrite\nexport const getSelectedRoomAllocations = createSelector(\n  [getSelectedRoomId, \"allocation\"],\n  (roomId, allocation) => {\n    const allocations: Allocation[] = Object.values(allocation.entity);\n    return allocations.filter((a: Allocation) => a.roomId === roomId);\n  },\n);\n// export const getSelectedRoomAllocations = createSelector(\n//   [getSelectedRoomId],\n//   (roomId) => getRoomAllocations(roomId)\n// );\n\nexport const getSelectedRoomCurrentAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from <= date && a.to >= date),\n);\n\nexport const getSelectedRoomFutureAllocations = createSelector(\n  [getDate, getSelectedRoomAllocations],\n  (date, allocations) => allocations.filter((a: Allocation) => a.from >= date),\n);\n\nexport const getSelectedRoomFutureAllocationsSorted = createSelector(\n  [getSelectedRoomFutureAllocations],\n  (allocations) => allocations.sort((a: Allocation, b: Allocation) => a.from - b.from),\n);\n\nexport const getSelectedRoomFutureNAllocations = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted],\n  (allocations) => allocations.slice(0, n),\n);\n\n// [TODO] not only future meeting should be given but also meetings date - 60 min\nexport const getSelectedRoomFutureAllocationsForNextNMinutes = (n: number) => createSelector(\n  [getSelectedRoomFutureAllocationsSorted, getDate],\n  (allocations: Allocation[], time: number) => allocations.filter((a: Allocation) => a.to < time + n * 60 * 1000),\n);\n\n// Gives allocations that end after from, but also end before to\nexport const getSelectedRoomAllocationsFromTo = (from: number, to: number) => createSelector(\n  [getSelectedRoomAllocations],\n  (allocations: Allocation[]) => allocations.filter((a: Allocation) => a.to > from && a.to < to),\n);\n\nexport const getSelectedRoomNextAllocation = createSelector(\n  [getSelectedRoomFutureNAllocations(1)],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomNextAllocationTimeToBegin = createSelector(\n  [getSelectedRoomNextAllocation, getDate],\n  (allocation: Allocation, time: number) => allocation.from - time,\n);\n\nexport const getSelectedRoomCurrentAllocation = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => allocations[0],\n);\n\nexport const getSelectedRoomCurrentAllocationLength = createSelector(\n  [getSelectedRoomCurrentAllocation],\n  (allocation: Allocation) => allocation.to - allocation.from,\n);\n\nexport const getSelectedRoomCurrentAllocationTimeToEnd = createSelector(\n  [getSelectedRoomCurrentAllocations, getDate],\n  (allocation: Allocation, time: number) => allocation.to - time,\n);\n\nexport const isSelectedRoomOccupied = createSelector(\n  [getSelectedRoomCurrentAllocations],\n  (allocations) => {\n    return allocations.length > 0;\n  },\n);\n\nexport const getSelectedRoomStatus = (threshold: number) => createSelector(\n  [getSelectedRoomCurrentAllocation, getSelectedRoomNextAllocation, getDate],\n  (currentAllocation: Allocation, nextAllocation: Allocation, time: number) => {\n    if (currentAllocation) {\n      if (currentAllocation.confirmed) {\n        return RoomStatus.occupied;\n      } else {\n        return RoomStatus.awaiting;\n      }\n    } else if (nextAllocation) {\n      if (nextAllocation.from - time < threshold) {\n        if (nextAllocation.confirmed) {\n          return RoomStatus.occupied;\n        } else {\n          return RoomStatus.awaiting;\n        }\n      }\n    }\n\n    return RoomStatus.free;\n  },\n);\n\nexport const getSelectedRoomEquipment = createSelector(\n  [getSelectedRoomId, \"equipment\"],\n  (roomId, equipment) => {\n    // [TODO] Bug on the production\n    if (!equipment.entity) {\n      return [];\n    }\n\n    const equipmentArray: Equipment[] = Object.values(equipment.entity) || [];\n    return equipmentArray.filter((e: Equipment) => e.roomId === roomId);\n  }\n);\n","export enum EquipmentType {\n  Projector = \"display\",\n  WhiteBoard = \"users\",\n  Skype = \"skype\",\n}\n","import React from \"react\";\nimport icons from \"../../../assets/symbol-defs.svg\";\n\nconst Button = (props: any) => {\n  let buttonElement = <button>Not configured button</button>;\n\n  switch (props.type) {\n    case \"icon\":\n      buttonElement = (\n        <button className={`btn ${props.btnClassName}`} onClick={props.onClick} aria-label={props.iconId}>\n          <svg className={`icon`}>\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n        </button>\n      );\n      break;\n    case \"icon-text\":\n      buttonElement = (\n        <button className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <svg className=\"icon\">\n            <use xlinkHref={`${icons}#${props.iconId}`} />\n          </svg>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n    case \"text\":\n      buttonElement = (\n        <button type=\"button\" className=\"btn btn_flat\" onClick={props.onClick} aria-label={props.label}>\n          <span>{props.label}</span>\n        </button>\n      );\n      break;\n  }\n  \n  return buttonElement;\n};\n\nexport default Button;\n","import React from \"react\";\nimport { RoomStatus } from \"../../../models/RoomStatus\";\nimport \"./AllocationMenu.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst allocationMenu = (props: any) => {\n  // console.log(\"Allocation menu:\", props.id);\n  // console.log(\"Props: \", props);\n  let meetingButtons;\n\n  if (props.currentAllocation) {\n    let confirmCurrentAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmCurrentAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.currentAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onExtendMeetingClick(props.currentAllocation.id, props.time, 60000 * 15)}\n          iconId=\"icon-calendar-plus-o\"\n          label=\"Extend\"\n        />\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onFinishEarlyClick(props.currentAllocation.id, props.time)}\n          iconId=\"icon-calendar-times-o\"\n          label=\"Finish\"\n        />\n        {confirmCurrentAllocationTag}\n      </>\n    );\n  } else {\n    let confirmNextAllocationTag;\n\n    if (props.roomStatus === RoomStatus.awaiting) {\n      confirmNextAllocationTag = (\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onConfirmMeetingClick(props.nextAllocation.id)}\n          iconId=\"icon-calendar-check-o\"\n          label=\"Confirm\"\n        />\n      );\n    }\n\n    meetingButtons = (\n      <>\n        <Button\n          type=\"icon-text\"\n          onClick={() => props.onAddMeetingClick(props.roomId, props.time)}\n          iconId=\"icon-calendar-o\"\n          label=\"Book now\"\n        />\n        {confirmNextAllocationTag}\n      </>\n    );\n  }\n\n  return (\n    <div className={`AllocationMenu ${props.roomStatus}`}>\n      {meetingButtons}\n    </div>\n  );\n};\n\nexport default allocationMenu;\n","import React from \"react\";\n\nimport \"./RoomStatusBorder.scss\";\n\nconst roomStatusBorder = (props: any) => {\n  const classNames = [\"RoomStatusBorder\"];\n  classNames.push(props.roomStatus);\n  return <div className={classNames.join(\" \")}>{props.children}</div>;\n};\n\nexport default roomStatusBorder;\n","import React from \"react\";\nimport \"./StatusBar.scss\";\nimport Button from \"../UI/Button/Button\";\nimport SignInButton from \"../Google/SignInButton\";\n\nconst StatusBar = (props: any) => {\n  return (\n    <div className=\"StatusBar\">\n      <Button type=\"icon-text\" onClick={props.onAdminClicked} iconId=\"icon-settings\" label=\"Admin\" />\n    </div>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport { formatTimeStamp } from \"../../../shared/utility\";\nimport \"./TimeView.scss\";\n\n// [TODO] show overlapping events with different color\nconst timeView = (props: any) => {\n\n  const mainRadius = 240;\n  const timeRadius = 225;\n  const canvasSize = 500;\n  const greenColor = \"#4CAF50\"; //\"rgb(139, 195, 74)\";\n  const redColor = \"#F44336\"; // \"rgb(255, 87, 34)\";\n\n  function drawCircleStroke(ctx: any, fromMinute: number, toMinute: number, color: string, radius?: number, lineWidth?: number) {\n    const clockRadius = radius || mainRadius;\n\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth || 4;\n    ctx.strokeStyle = color;\n\n    function dayMinuteToRadian(minute: number) {\n      const minuteRadian = 2 * Math.PI / (12 * 60);\n      const startingRadian = -0.5 * Math.PI;\n      return startingRadian + minute * minuteRadian;\n    }\n\n    const startAngle = dayMinuteToRadian(fromMinute);\n    const endAngle = dayMinuteToRadian(toMinute);\n\n    ctx.arc(canvasSize / 2, canvasSize / 2, clockRadius, startAngle, endAngle);\n    ctx.stroke();\n  }\n\n  function UTCToClockTime(epoch: number): number {\n    const date = new Date(0);\n    date.setUTCMilliseconds(epoch);\n    return date.getHours() * 60 + date.getMinutes();\n  };\n\n  function drawCurrentTime(ctx: any) {\n    const minutes = UTCToClockTime(props.time);\n    // Draw circle background\n    drawCircleStroke(ctx, minutes + 1, minutes, \"#000\", 200, 22);\n    \n    // Draw available slots for whole day\n    drawCircleStroke(ctx, minutes - 60, minutes - 120, greenColor, 203, 5);\n    \n    // Draw busy slots for given allocations\n    // [TODO] The busy slots drawing should have min and max value so it shouldn't exceed 11 hours threshold\n    props.allocations\n    .map((a: any) => ({from: UTCToClockTime(a.from), to: UTCToClockTime(a.to)}))\n    .forEach((e: any) => drawCircleStroke(ctx, e.from, e.to, redColor, 200, 12));\n    \n    // Draw current time\n    drawCircleStroke(ctx, minutes - 2, minutes + 3, \"#FFF\", 170, 30);\n    drawCircleStroke(ctx, minutes, minutes + 1, \"#000\", 196, 20);\n\n    // draw 30 min slots\n    for (let i = 0; i < 24; i++) {\n      // long line on each full hour and short on not full hour\n      if (i % 2) {\n        drawCircleStroke(ctx, i * 30, i * 30 + 1, \"#FFF\", 200, 12);\n      } else {\n        drawCircleStroke(ctx, i * 30, i * 30 + 1, \"#FFF\", 196, 20);\n      }\n    }\n    \n  }\n\n  let canvas: any = React.createRef();\n  // [TODO] This component need to be smart component and this timeout then can be removed\n  setTimeout(function () {\n    if (canvas.current && canvas.current.getContext) {\n      const ctx = canvas.current.getContext(\"2d\");\n\n      canvas.current.width = canvasSize;\n      canvas.current.height = canvasSize;\n      drawCurrentTime(ctx);\n    }\n  }, 10)\n\n  return (\n    <div className=\"TimeView\">\n      <span>{formatTimeStamp(props.time)}</span>\n      <canvas className=\"TimeViewCanvas\" id=\"canvas\" ref={canvas}></canvas>\n    </div>\n  );\n};\n\nexport default timeView;\n","import React from \"react\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport \"./EquipmentBar.scss\";\nimport Button from \"../../UI/Button/Button\";\n\nconst equipmentBar = (props: { equipment: Equipment[], onChangeStatusClick: (e: Equipment) => void }) => {\n  const mapEquipmentToButton = (e: Equipment) => {\n    return <Button\n      key={e.type}\n      type=\"icon\"\n      onClick={() => props.onChangeStatusClick(e)}\n      iconId={`icon-${e.type.toLowerCase()}`}\n      btnClassName={`btn_${e.status.toLowerCase()}`}\n    />;\n  };\n\n  return (\n    <div className=\"EquipmentBar\">\n      {props.equipment.map((e: Equipment) => mapEquipmentToButton(e))}\n    </div>\n  );\n};\n\nexport default equipmentBar;\n","import React from \"react\";\nimport EquipmentBar from \"./EquipmentBar/EquipmentBar\";\nimport \"./Header.scss\";\n\nconst Header = (props: any) => {\n  return (\n    <div className=\"Header\">\n      <div><h1>{props.room.name}</h1></div>\n      <div>{new Date().toLocaleDateString()}</div>\n      <EquipmentBar equipment={props.equipment} onChangeStatusClick={props.onChangeStatusClick}/>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport \"./Backdrop.scss\";\n\nconst Backdrop = () => {\n  return (\n    <div className=\"Backdrop\"/>\n  )\n}\n\nexport default Backdrop;\n","import React from \"react\";\nimport \"./Popup.scss\";\nimport Backdrop from \"../Backdrop/Backdrop\";\nimport Button from \"../Button/Button\";\n\nconst Popup = (props: any) => {\n  const classes = [\"Popup\"];\n  if (props.open) {\n    classes.push(\"open\");\n  }\n\n  return (\n    <div className={classes.join(\" \")}>\n      <Backdrop/>\n      <div className=\"content\">\n        <Button\n          type=\"icon-text\"\n          onClick={props.onCloseClick}\n          iconId=\"icon-close\"\n          label=\"Close\"\n        />\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Popup;\n","import { createSelector } from \"redux-starter-kit\";\n\nexport const getDate = createSelector (\n  [\"ui.time\"],\n);\n\nexport const getSelectedRoomId = createSelector(\n  [\"ui.selectedRoomId\"],\n);\n\nexport const getAdminPanelOpen = createSelector(\n  [\"ui.adminPanelOpen\"],\n);\n\nexport const getSyncSettings = createSelector(\n  [\"ui.syncSettings\"],\n);\n","import { createSlice } from \"redux-starter-kit\";\nimport Room from \"../../models/Room\";\n\n// ROOMS ////////////////////////\nconst roomSlice = createSlice({\n  slice: \"room\",\n  initialState: {\n    entity: {} as {[id: string]: Room },\n    ids: [] as string[],\n  },\n  reducers: {\n    addRoom: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    changeRoomName: (state, action) => {\n      // [TODO] Temporary create room when it does not exists\n      if (!state.entity[action.payload.id]) {\n        state.entity[action.payload.id] = action.payload;\n        state.ids.push(action.payload.id);\n      } else {\n        state.entity[action.payload.id].name = action.payload.name;\n      }\n    }\n  },\n});\n\nexport default roomSlice;\n","import { createAction, createReducer } from \"redux-starter-kit\";\nimport * as cacheManager from \"../shared/cacheManager\";\n\nconst saveStateStarted = createAction(\"crossslice/savestate/started\")\nconst saveStateSucceeded = createAction(\"crossslice/savestate/succeeded\")\nconst saveStateFailed = createAction(\"crossslice/savestate/failed\")\n\nconst loadStateStarted = createAction(\"crossslice/loadstate/started\")\nconst loadStateSucceeded = createAction(\"crossslice/loadstate/succeeded\")\nconst loadStateFailed = createAction(\"crossslice/loadstate/failed\")\n\nconst removeStateStarted = createAction(\"crossslice/removestate/started\")\nconst removeStateSucceeded = createAction(\"crossslice/removestate/succeeded\")\nconst removeStateFailed = createAction(\"crossslice/removestate/failed\")\n\nexport const saveState = () => (dispatch: any, getState: any) => {\n  dispatch(saveStateStarted());\n  return cacheManager.writeData(\"state\", getState()).then(\n    () => dispatch(saveStateSucceeded()),\n    (error) => dispatch(saveStateFailed(error))\n  );\n};\n\nexport const loadState = () => (dispatch: any) => {\n  dispatch(loadStateStarted());\n  return cacheManager.readData(\"state\").then(\n    (state) => dispatch(loadStateSucceeded(state)),\n    (error) => dispatch(loadStateFailed(error))\n  );\n};\n\nexport const removeState = () => (dispatch: any) => {\n  dispatch(removeStateStarted());\n  return cacheManager.removeData(\"state\").then(\n    (state) => {\n      dispatch(removeStateSucceeded(state));\n      dispatch(loadState());\n    },\n    (error) => dispatch(removeStateFailed(error))\n  );\n};\n\nexport const crossSliceReducer = (state: any, action: any) => {\n  let newState: any = {...state};\n  newState.ui = {...newState.ui};\n\n  switch (action.type) {\n    case removeStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case removeStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case removeStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case saveStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case saveStateSucceeded.toString():\n      newState.ui.syncInProgress = false;\n      return newState;\n    case saveStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    case loadStateStarted.toString():\n      newState.ui.syncInProgress = true;\n      return newState;\n    case loadStateSucceeded.toString():\n      // [TODO] if new version arrive, state shuold be cleaned, or retrofitted.\n      newState = {...newState, ...action.payload};\n      // newState = {...action.payload};\n      newState.ui.time = Date.now();\n      newState.ui.syncInProgress = false;\n      return newState;\n    case loadStateFailed.toString():\n      newState.ui.syncInProgress = false;\n      newState.ui.syncError = action.payload;\n      return newState;\n    default:\n      return state;\n  }\n}\n","import localforage from \"localforage\";\n\nexport const writeData = (key: any, data: any) => localforage.setItem(key, data);\nexport const readData = (key: any) => localforage.getItem(key);\nexport const removeData = (key: any) => localforage.removeItem(key);\nexport const clear = () => localforage.clear();\n","import { createSlice } from \"redux-starter-kit\";\n\n// UI ////////////////////////\nconst uiSlice = createSlice({\n  slice: \"ui\",\n  initialState: {\n    selectedRoomId: \"\",\n    time: Date.now(),\n    adminPanelOpen: false,\n    syncSettings: {},\n    syncInProgress: false,\n    syncError: \"\"\n  },\n  reducers: {\n    setSelectedRoomId: (state, action) => {\n      state.selectedRoomId = action.payload;\n      return state;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n      return state;\n    },\n    showAdminPanel: (state) => {\n      state.adminPanelOpen = true;\n      return state;\n    },\n    hideAdminPanel: (state) => {\n      state.adminPanelOpen = false;\n      return state;\n    },\n    setSyncSettings: (state, action) => {\n      state.syncSettings = action.payload;\n      return state;\n    }\n  },\n});\n\nexport default uiSlice;\n","import { uuidv4 } from \"../shared/utility\";\n\nexport default class Room {\n  public id: string;\n\n  public capacity?: number;\n  public location?: string;\n  public equipment?: any[];\n\n  // this property is identifier of the object and should be unique\n  constructor(public name: string) {\n    this.id = uuidv4();\n  }\n}\n","import React from \"react\";\nimport { EquipmentType } from \"../../../models/EquipmentType\";\n\nconst EquipmentAdmin = (props: any) => {\n  return (\n    <>\n      <div>This is equipment admin</div>\n      {Object.values(EquipmentType).map((type: any) => <div key={type}><button onClick={() => props.onEquipmentToggleClick(props.roomId, type)}>{type}</button></div>)}\n    </>\n  );\n};\n\nexport default EquipmentAdmin;\n","export enum EquipmentStatus {\n  Available = \"Available\",\n  NotAvailable = \"NotAvailable\",\n  Broken = \"Broken\",\n}\n","import React from \"react\";\n\nimport \"./Input.scss\";\n\nconst Input = ( props: any ) => {\n    let inputElement = null;\n    const inputClasses = [\"InputElement\"];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(\"Invalid\");\n    }\n\n    switch ( props.elementType ) {\n        case ( \"input\" ):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} \n            />;\n            break;\n        case ( \"textarea\" ):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} \n            />;\n            break;\n        case ( \"select\" ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map((option: any) => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={\"Input\"}>\n            <label className={\"Label\"}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default Input;","import React, { ReactNode, SyntheticEvent } from \"react\";\nimport { GoogleApi } from \"../../providers/googleApi\";\n\n\n\nexport default class SignInButton extends React.Component<{roomId: string, googleApi: any}, { signedIn: boolean }> {\n\n    // Client ID and API key from the Developer Console\n    // TODO move to state and admin panel\n    // private readonly CLIENT_ID = \"162342559011-rh81oauc2fut2lj6d03j4srkk3oeea2l.apps.googleusercontent.com\";\n    // private readonly API_KEY = \"AIzaSyBe9hJXEgWHgkhAjqMEnxDtyCQLVCdEByI\";\n  \n    // private readonly CONFIG = {\n    //   apiKey: this.API_KEY,\n    //   clientId: this.CLIENT_ID,\n    //   calendarId: \"primary\",\n    // };\n\n  private apiCalendar: GoogleApi;\n  \n  \n  constructor(props: any) {\n    console.log(\"[SignInButton] constructor\");\n    super(props);\n    this.apiCalendar = this.props.googleApi; \n\n    this.state = {signedIn: this.apiCalendar.sign};\n    this.handleItemClick = this.handleItemClick.bind(this);\n    this.apiCalendar.onLoadCallback = () => {\n      this.setState({signedIn: this.apiCalendar.sign});\n      this.apiCalendar.listenSign((status: any) => {\n        console.log(status);\n        this.setState({\n          signedIn: status,\n        });\n      });\n    };\n  }\n  componentDidMount() {\n    console.log(\"[SignInButton] componentDidMount\");\n  }\n\n\n  public handleItemClick(event: SyntheticEvent<any>, name: string): void {\n    if (name === \"sign-in\") {\n      this.apiCalendar.handleAuthClick();\n    } else if (name === \"sign-out\") {\n      this.apiCalendar.handleSignoutClick();\n    }\n  }\n\n  public sync() {\n    setInterval(() => {\n      console.log(\"[SignIn button] syncing events in interval\");\n      this.apiCalendar.listUpcomingEvents();\n    }, 60 * 1000);\n    // this.apiCalendar.sync();\n  }\n\n  public initClient() {\n    this.apiCalendar.initClient();\n  }\n\n  public render(): ReactNode {\n    const signButton = !this.state.signedIn ?\n      <button onClick={(e) => this.handleItemClick(e, \"sign-in\")}>\n        sign-in\n      </button>\n      :\n      <button onClick={(e) => this.handleItemClick(e, \"sign-out\")}>\n        sign-out\n      </button>;\n\n    return (\n      <>\n        <button onClick={() => this.initClient()}>\n          init client\n        </button>\n        {signButton}\n        <button onClick={() => this.sync()}>\n          sync\n        </button>\n      </>\n    );\n  }\n}\n","import { uuidv4, roundEpochToMinutes } from \"../shared/utility\";\n\nexport default class Allocation {\n  public id: string;\n  public confirmed = false;\n  public by?: string;\n  public attendees?: number;\n  public agenda?: string;\n  public extId?: string;\n  public extStatus?: string;\n\n  // From and to are epochs rounded to minutes\n  constructor(public title: string, public roomId: string, public from: number, public to: number) {\n    this.id = uuidv4();\n    this.from = roundEpochToMinutes(this.from);\n    this.to = roundEpochToMinutes(this.to);\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport Allocation from \"../../models/Allocation\";\nimport { roundEpochToMinutes } from \"../../shared/utility\";\n\n// ALLOCATIONS ////////////////////////\nconst allocationSlice = createSlice({\n  slice: \"allocation\",\n  initialState: {\n    entity: {} as {[id: string]: Allocation },\n    ids: [] as string[],\n  },\n  reducers: {\n    addAllocation: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n      state.ids.push(action.payload.id);\n    },\n    deleteAllocation: (state, action) => {\n      delete state.entity[action.payload.id];\n      // this operation can be costly\n      state.ids = state.ids.filter((id: string) => id !== action.payload.id);\n    },\n    finishEarly: (state, action) => {\n      state.entity[action.payload].to = roundEpochToMinutes(action.payload.time);\n      state.entity[action.payload].confirmed = true;\n    },\n    extendMeeting: (state, action) => {\n      state.entity[action.payload.id].to += action.payload.amount;\n      state.entity[action.payload.id].confirmed = true;\n    },\n    confirmMeeting: (state, action) => {\n      state.entity[action.payload.id].confirmed = true;\n      state.entity[action.payload.id].from = roundEpochToMinutes(action.payload.time);\n    },\n    // [TODO] sync adhoc meetings to external source\n    syncExternalAllocations: (state, action) => {\n      console.log(\"[AllocationSlice:syncExternalAllocations] : \", action);\n      // [TODO] Delete objects with extId && !confirmed && not in newAllocations\n      const newAllocations: Allocation[] = action.payload;\n      const expiredAllocations = Object.values(state.entity).filter((sa: Allocation) => !!sa.extId && !sa.confirmed && !newAllocations.find((a: Allocation) => a.extId === sa.extId));\n      for (const deleteAllocation of expiredAllocations) {\n        delete state.entity[deleteAllocation.id];\n        // this operation can be costly\n        state.ids = state.ids.filter((id: string) => id !== deleteAllocation.id);\n      };\n\n      // For each allocation in payload\n      for (const allocation of newAllocations) {\n        // check if exist entry with extId = id\n        const foundAllocation = Object.values(state.entity).find((sa: Allocation) => sa.extId === allocation.extId);\n        if (foundAllocation) {\n          // if exists entry then check the status !== confirmed, if yes delete, else update \n          if (allocation.extStatus !== \"confirmed\") {\n            delete state.entity[foundAllocation.id];\n            // this operation can be costly\n            state.ids = state.ids.filter((id: string) => id !== foundAllocation.id);\n          } else {\n            // update if meeting isn't yet confirmed \n            if (!foundAllocation.confirmed) {\n              foundAllocation.from = allocation.from;\n              foundAllocation.to = allocation.to;\n              foundAllocation.title = allocation.title;\n            }\n          }\n        } else {\n          // if no entry check status === confirmed, if yes add\n          if (allocation.extStatus === \"confirmed\") {\n            state.entity[allocation.id] = allocation;\n            state.ids.push(allocation.id);\n          }\n        }\n      }\n    }\n  },\n});\n\nexport default allocationSlice;\n","import { EquipmentStatus } from \"./EquipmentStatus\";\nimport { EquipmentType } from \"./EquipmentType\";\nimport { uuidv4 } from \"../shared/utility\";\n\nexport class Equipment {\n  public id: string;\n\n  constructor(public roomId: string, public type: EquipmentType, public status: EquipmentStatus) {\n    this.id = uuidv4();\n  }\n}\n","import { createSlice } from \"redux-starter-kit\";\nimport { Equipment } from \"../../models/Equipment\";\nimport { EquipmentStatus } from \"../../models/EquipmentStatus\";\n\n// EQUIPMENT ////////////////////////\nconst equipmentSlice = createSlice({\n  slice: \"equipment\",\n  initialState: {\n    entity: {} as {[id: string]: Equipment },\n  },\n  reducers: {\n    addEquipment: (state, action) => {\n      state.entity[action.payload.id] = action.payload;\n    },\n    deleteEquipment: (state, action) => {\n      delete state.entity[action.payload.id];\n    },\n    toggleEquipment: (state, action) => {\n      console.log('toggle equipment: ', action);\n      const roomId = action.payload.roomId;\n      const type = action.payload.type;\n      const equipmentFound = Object.values(state.entity).filter((eq: Equipment) => eq.roomId === roomId && eq.type === type)[0];\n      if (equipmentFound) {\n        delete state.entity[equipmentFound.id];\n      } else {\n        const newEquipment = new Equipment(roomId, type, EquipmentStatus.Available);\n        state.entity[newEquipment.id] = {...newEquipment};\n      }\n    },\n    setStatus: (state, action) => {\n      state.entity[action.payload.id].status = action.payload.status;\n      return state;\n    },\n    changeStatus: (state, action) => {\n      const equipment: Equipment = state.entity[action.payload.id];\n      let newStatus: EquipmentStatus = EquipmentStatus.Available;\n      switch (equipment.status) {\n        case EquipmentStatus.Available:\n          newStatus = EquipmentStatus.Broken;\n          break;\n        case EquipmentStatus.Broken:\n          newStatus = EquipmentStatus.NotAvailable;\n          break;\n        case EquipmentStatus.NotAvailable:\n          newStatus = EquipmentStatus.Available;\n          break;\n      }\n      equipment.status = newStatus;\n      return state;\n    },\n  },\n});\n\nexport default equipmentSlice;\n","import { combineReducers } from \"redux\";\nimport { configureStore } from \"redux-starter-kit\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport uiSlice from \"./UI/UISlice\";\nimport reduceReducers from \"reduce-reducers\";\nimport { crossSliceReducer } from \"./crossSliceReducer\";\n\n///////////////////////////////////////////////////////////////\n// Store Config\n///////////////////////////////////////////////////////////////\n\nconst combinedReducers = combineReducers({\n  ui: uiSlice.reducer,\n  room: roomSlice.reducer,\n  allocation: allocationSlice.reducer,\n  equipment: equipmentSlice.reducer,\n});\n\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer);\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\n///////////////////////////////////////////////////////////////\n// Selectors\n///////////////////////////////////////////////////////////////\n\n// DateTime testing\n// const getDateTime = minuteInterval => {\n//   const coeff = 1000 * 60 * minuteInterval\n//   const now = new Date()\n//   return new Date(Math.floor(now.getTime() / coeff) * coeff)\n// }\n\n// const dateEqualSelector = createSelectorCreator(\n//   defaultMemoize,\n//   (a,b) => {\n//     return a.getTime() === b.getTime()\n//   }\n// )\n// const intervalSelector = () => getDateTime(1)\n\n// export const selectDateTime = dateEqualSelector(\n//   intervalSelector,\n//   (interval) => interval\n// )\n\n// export const isSelectedRoomOccupied2 = createSelector(\n//   [selectDateTime, getSelectedRoomId, 'allocation'],\n//   (date, roomId, allocation) => {\n//     console.log('isSelectedRoomOccupied2:', date.getTime());\n//     return allocation.filter(a => a.roomName === roomId).filter(a => a.from <= date && a.to >= date).length > 0;\n//   }\n// )\n","import Allocation from \"../models/Allocation\";\nimport allocationSlice from \"../store/Allocation/AllocationSlice\";\nimport store from \"../store/store\";\n\nexport class GoogleApi {\n  public get gapi(): any {\n    return (window as any).gapi;\n  }\n\n  public sign: boolean = false;\n  public onLoadCallback: any;\n  public events: any = {};\n\n  private syncToken: string | null = null;\n\n     // Client ID and API key from the Developer Console\n    // TODO move to state and admin panel\n    // private readonly CLIENT_ID = \"162342559011-rh81oauc2fut2lj6d03j4srkk3oeea2l.apps.googleusercontent.com\";\n    // private readonly API_KEY = \"AIzaSyBe9hJXEgWHgkhAjqMEnxDtyCQLVCdEByI\";\n  \n\n    // Array of API discovery doc URLs for APIs used by the quickstart\n    private readonly DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n    // Authorization scopes required by the API; multiple scopes can be\n    // included, separated by spaces.\n    private readonly SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n  \n    private readonly CONFIG = {\n      apiKey: \"[googleApi] apiKey not provided!!\",\n      clientId: \"[googleApi] clientId not provided!!\",\n      discoveryDocs: this.DISCOVERY_DOCS,\n      scope: this.SCOPES,\n    };\n\n  private calendarId: string;\n  private roomId: string;\n\n  constructor(roomId: string, apiKey: string, clientId: string, calendarId: string) {\n    this.roomId = roomId;\n    this.calendarId = calendarId;\n\n    this.CONFIG.apiKey = apiKey;\n    this.CONFIG.clientId = clientId;\n    this.handleClientLoad();\n  }\n\n  public changeConfig(roomId: string, apiKey: string, clientId: string, calendarId: string) {\n    this.roomId = roomId;\n    this.calendarId = calendarId;\n    this.CONFIG.apiKey = apiKey;\n    this.CONFIG.clientId = clientId;\n  }\n\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n  public handleClientLoad() {\n    const script = document.createElement(\"script\");\n    script.src = \"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    script.onload = () => {\n      // this.gapi = window[\"gapi\"] as any;\n      // this.gapi.load(\"client:auth2\", this.initClient);\n      this.gapi.load(\"client:auth2\", () => console.log(\"[Google Api] gapi loaded\")); //this.initClient());\n    };\n    // gapi.load(\"client:auth2\", initClient);\n  }\n\n  public handleAuthClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signIn();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public handleSignoutClick() {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().signOut();\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  /**\n   * Execute the callback function when a user is disconnected or connected with the sign status.\n   * @param callback\n   */\n  public listenSign(callback: (status: any) => void) {\n    if (this.gapi) {\n      this.gapi.auth2.getAuthInstance().isSignedIn.listen(callback);\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n    }\n  }\n\n  public sync() {\n    // Construct the {@link Calendar.Events.List} request, but don\"t execute it yet.\n    // Calendar.Events.List request = client.events().list(\"primary\");\n    let request: any;\n\n    // Load the sync token stored from the last execution, if any.\n    if (this.syncToken == null) {\n      console.log(\"Performing full sync.\");\n      request = this.constructUpcomingEventsRequestFull();\n\n      // Set the filters you want to use during the full sync. Sync tokens aren\"t compatible with\n      // most filters, but you may want to limit your full sync to only a certain date range.\n      // In this example we are only syncing events up to a year old.\n      // Date oneYearAgo = Utils.getRelativeDate(java.util.Calendar.YEAR, -1);\n      // request.setTimeMin(new DateTime(oneYearAgo, TimeZone.getTimeZone(\"UTC\")));\n    } else {\n      console.log(\"Performing incremental sync.\");\n      request = this.constructUpcomingEventsRequestPartial();\n      request.syncToken = this.syncToken;\n    }\n\n    // Retrieve the events, one page at a time.\n    // let pageToken = null;\n    // let events = null;\n\n    // do {\n    // request.pageToken = pageToken;\n\n    // try {\n    const singleSync = (pageToken: string | null) => {\n      request.pageToken = pageToken;\n      console.log(\"request body: \", request);\n      this.gapi.client.calendar.events.list(request)\n        .then((response: any) => {\n          console.log(\"synced object: \", response.result);\n          console.log(\"events synced: \", response.result.items);\n          this.events = response.result;\n\n          if (this.events.items.length === 0) {\n            console.log(\"No new events to sync.\");\n          } else {\n            console.log(\"[TODO] syncEvents\");\n            this.syncEvents(this.events.items);\n\n          }\n\n          const nextPageToken = this.events.nextPageToken;\n          if (nextPageToken) {\n            console.log(\"new pageToken: \", nextPageToken);\n            singleSync(nextPageToken);\n          } else {\n            console.log(\"setting sync Token: \", this.events.nextSyncToken);\n            this.syncToken = this.events.nextSyncToken;\n            console.log(\"Sync complete.\");\n          }\n\n        })\n        .catch((err: any) => {\n          console.log(\"Sync Error: \", err);\n          if (err.statusCode === 410) {\n            // A 410 status code, \"Gone\", indicates that the sync token is invalid.\n            console.log(\"Invalid sync token, clearing event store and re-syncing.\");\n            this.syncToken = null;\n            this.events = [];\n            this.sync();\n          } else {\n            throw err;\n          }\n        });\n    };\n\n    singleSync(null);\n    // pageToken = events.getNextPageToken();\n    // } while (pageToken != null);\n\n    // Store the sync token from the last request to be used during the next execution.\n    // syncSettingsDataStore.set(SYNC_TOKEN_KEY, events.getNextSyncToken());\n    // this.syncToken = this.events.syncToken;\n  }\n\n  private syncEvents(events: any) {\n    const mappedEvents = events.map((event: any) => {\n      const a = new Allocation(\n        event.summary, \n        this.roomId,\n        new Date(event.start.dateTime).getTime(),\n        new Date(event.end.dateTime).getTime());\n      if (event.attendees) {\n        a.attendees = event.attendees.length;\n      }\n      if (event.organizer && event.organizer.displayName) {\n        a.by = event.organizer.displayName;\n      }\n      a.extId = event.id;\n      a.extStatus = event.status;\n      return {...a};\n    })\n      // allocation.organizer.displayName\n      // status\n      // description\n      // attendees.length\n    store.dispatch(allocationSlice.actions.syncExternalAllocations(mappedEvents));\n\n    console.log(\"Google api. syncEvents items: \", events.length);\n  }\n\n  public listUpcomingEvents(maxResults: number = 100) {\n    console.log(\"[GoogleApi] list upcoming events\");\n    if (this.gapi) {\n      var today = new Date();\n      var tomorrow = new Date();\n      tomorrow.setDate(today.getDate() + 1);\n      return this.gapi.client.calendar.events.list({\n        calendarId: this.calendarId,\n        maxResults,\n        orderBy: \"startTime\",\n        showDeleted: true,\n        singleEvents: true,\n        timeMin: today.toISOString(),\n        timeMax: tomorrow.toISOString()\n      }).then((response: any) => {\n        console.log(\"events: \", response.result.items);\n        this.syncEvents(response.result.items)\n        // for (const allocation of response.result.items) {\n        //   const a = new Allocation(allocation.summary, this.roomId,\n        //     new Date(allocation.start.dateTime).getTime(),\n        //     new Date(allocation.end.dateTime).getTime());\n\n        //   // allocation.organizer.displayName\n        //   // status\n        //   // description\n        //   // attendees.length\n        //   store.dispatch(allocationSlice.actions.addAllocation({ ...a }));\n        // }\n      });\n    } else {\n      console.log(\"Error: this.gapi not loaded\");\n      return false;\n    }\n  }\n\n  private constructUpcomingEventsRequestFull(calendarId = this.calendarId, maxResults = 10000) {\n    const today = new Date();\n    // const tomorrow = new Date();\n    // tomorrow.setDate(today.getDate() + 1);\n    // tomorrow.setTime(today.getTime() + 30000);\n    return {\n      calendarId,\n      // \"timeMax\": (tomorrow).toISOString(),\n      maxResults,\n      pageToken: null as (string | null),\n      singleEvents: true,\n      syncToken: null as (string | null),\n      timeMin: (today).toISOString(),\n    };\n  }\n\n  private constructUpcomingEventsRequestPartial(calendarId = this.calendarId, maxResults = 1000) {\n    const today = new Date();\n    const tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n    return {\n      calendarId,\n      maxResults,\n      pageToken: null as (string | null),\n      singleEvents: true,\n      syncToken: null as (string | null),\n    };\n  }\n\n  /**\n   * Auth to the google Api.\n   */\n  public initClient() {\n    this.gapi.client.init(this.CONFIG)\n      .then(() => {\n        console.log(\"[Google API] Client init success\");\n        // Listen for sign-in state changes.\n        this.gapi.auth2.getAuthInstance().isSignedIn.listen((e: any) => this.updateSigninStatus(e));\n        // Handle the initial sign-in state.\n        this.updateSigninStatus(this.gapi.auth2.getAuthInstance().isSignedIn.get());\n        if (this.onLoadCallback) {\n          this.onLoadCallback();\n        }\n      })\n      .catch((e: any) => {\n        console.log(\"[Google API] Client init error:\", e);\n      });\n  }\n\n  private updateSigninStatus(isSignedIn: boolean) {\n    if (isSignedIn) {\n      this.listUpcomingEvents(10);\n    }\n    this.sign = isSignedIn;\n  }\n\n}\n\n// const apiCalendar: GoogleApi = new GoogleApi();\nexport default GoogleApi;\n","import React, { ChangeEvent, Component, FormEvent } from \"react\";\nimport Room from \"../../../models/Room\";\nimport Button from \"../../UI/Button/Button\";\nimport EquipmentAdmin from \"../../Equipment/EquipmentAdmin/EquipmentAdmin\";\nimport { Equipment } from \"../../../models/Equipment\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\nimport Input from \"../../UI/Input/Input\";\nimport \"./AdminPanel.scss\";\nimport SignInButton from \"../../Google/SignInButton\";\nimport GoogleApi from \"../../../providers/googleApi\";\n\ninterface IAdminPanelProps {\n  onSettingsSaved: (settings: any) => void;\n  onEquipmentToggleClick: ({ }) => void;\n  onSettingsClear: () => void;\n}\n\ninterface IAdminPanelState {\n  // room: Room;\n  formIsValid: Boolean;\n  orderForm: any;\n}\n\nclass AdminPanel extends Component<IAdminPanelProps, IAdminPanelState> {\n  state: IAdminPanelState = {\n    // room: new Room(\"\"),\n    orderForm: {\n      roomName: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Room name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      clientID: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Client ID'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      apiKey: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'API key'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false\n      },\n      calendarID: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Calendar ID'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n    },\n    formIsValid: false\n  }\n\n  private selectedRoom: Room;\n  private roomEquipment: Equipment[];\n  private syncSettings: any;\n  private googleApi: any;\n\n  constructor(props: any) {\n    super(props)\n\n    \n    \n    this.selectedRoom = {...props.selectedRoom};\n    this.roomEquipment = {...props.roomEquipment};\n    this.syncSettings = {...props.syncSettings};\n    \n    if (!this.selectedRoom) {\n      this.selectedRoom = { ... new Room(\"Conference Room 1\") };\n    }\n    \n    // [TODO] set props to state;\n    this.state.orderForm.roomName.value = this.selectedRoom.name;\n    this.state.orderForm.clientID.value = this.syncSettings.clientID;\n    this.state.orderForm.apiKey.value = this.syncSettings.apiKey;\n    this.state.orderForm.calendarID.value = this.syncSettings.calendarID;\n    \n    this.googleApi = new GoogleApi(this.selectedRoom.id, this.syncSettings.apiKey, this.syncSettings.clientID, this.syncSettings.calendarID);\n    // this.setState({\n    //   room: { ... this.selectedRoom },\n    // });\n  }\n\n\n\n  submitSettings = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const formData: any = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    }\n\n    this.selectedRoom.name = formData.roomName;\n    const newSettings = {\n      syncSettings: {\n        clientID: formData.clientID,\n        apiKey: formData.apiKey,\n        calendarID: formData.calendarID,\n      },\n      room: this.selectedRoom,\n    }\n\n    console.log(\"[AdminPanel] selectedroom:\", this.selectedRoom);\n    console.log(\"[AdminPanel] settings: \", newSettings);\n\n    this.props.onSettingsSaved(newSettings);\n    this.googleApi.changeConfig(newSettings.room.id, newSettings.syncSettings.apiKey, newSettings.syncSettings.clientID, newSettings.syncSettings.calendarID);\n    // this.props.onOrderBurger(order, this.props.token);\n  }\n\n  inputChangedHandler = (event: ChangeEvent<HTMLInputElement>, inputIdentifier: any) => {\n\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n    const updatedFormData = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedFormData) {\n      formIsValid = updatedFormData[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setSyncSettings(updatedFormData);\n    this.setState({ orderForm: updatedFormData, formIsValid: formIsValid });\n  }\n\n  setSyncSettings(data: any) {\n    this.syncSettings = {\n      clientID: data.clientID,\n      apiKey: data.apiKey,\n      calendarID: data.calendarID,\n    }\n  }\n\n  // submitSettings(event: FormEvent<HTMLFormElement>) {\n  //   event.preventDefault();\n\n  // };\n\n  clearSettings() {\n    this.props.onSettingsClear();\n  }\n\n  // inputChangedHandler(event: ChangeEvent<HTMLInputElement>) {\n  //   console.log(event);\n  //   const newState = { ...this.state };\n  //   if (newState.room) {\n  //     newState.room.name = event.target.value;\n  //   }\n  //   this.setState(newState);\n  // }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.submitSettings}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event: any) => this.inputChangedHandler(event, formElement.id)} />\n        ))}\n        <div>\n          <EquipmentAdmin roomId={this.selectedRoom.id} equipment={this.roomEquipment} onEquipmentToggleClick={this.props.onEquipmentToggleClick} />\n        </div>\n        <SignInButton roomId={this.selectedRoom.id} googleApi={this.googleApi} />\n        <Button\n          type=\"icon-text\"\n          iconId=\"icon-save\"\n          label=\"Save Settings\"\n        />\n\n        {/* <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button> */}\n      </form>\n\n    );\n    // if (this.props.loading) {\n    //   form = <Spinner />;\n    // }\n    return (\n      <div className=\"ContactData\">\n        <h4>Enter your Contact Data</h4>\n        {form}\n        {/* // [TODO] all buttons are submit buttons */}\n        <Button\n          type=\"text\"\n          label=\"Clear Settings\"\n          onClick={() => this.clearSettings()}\n        />\n      </div>\n    );\n  }\n\n\n  // render2() {\n  //   return (\n  //     <div>\n  //       <h3>This is admin panel</h3>\n  //       <form onSubmit={(e) => this.submitSettings(e)}>\n  //         <span>General</span>\n  //         <div>\n  //           <label>Room name</label>\n  //           <input\n  //             type=\"text\"\n  //             placeholder=\"Room Name\"\n  //             value={this.state.room.name}\n  //             onChange={(e) => this.inputChangedHandler(e)}\n  //           />\n  //         </div>\n  //         <div>\n  //           <label>API key</label>\n  //           <input\n  //             type=\"text\"\n  //             placeholder=\"Room Name\"\n  //             value={this.state.room.name}\n  //             onChange={(e) => this.inputChangedHandler(e)}\n  //           />\n  //         </div>\n  //         <div>\n  //           <label>Client ID</label>\n  //           <input\n  //             type=\"text\"\n  //             placeholder=\"Client ID\"\n  //             value={this.state.room.name}\n  //             onChange={(e) => this.inputChangedHandler(e)}\n  //           />\n  //         </div>\n  //         <div>\n  //           <label>Calendar ID</label>\n  //           <input\n  //             type=\"text\"\n  //             placeholder=\"Room Name\"\n  //             value={this.state.room.name}\n  //             onChange={(e) => this.inputChangedHandler(e)}\n  //           />\n  //         </div>\n  //         <div>\n  //           <EquipmentAdmin roomId={this.state.room.id} equipment={this.roomEquipment} onEquipmentToggleClick={this.props.onEquipmentToggleClick} />\n  //         </div>\n\n  //         <Button\n  //           type=\"icon-text\"\n  //           iconId=\"icon-save\"\n  //           label=\"Save Settings\"\n  //         />\n\n\n  //       </form>\n\n  //     </div>\n  //   );\n  // }\n}\n\nexport default AdminPanel;\n","import { connect } from \"react-redux\";\nimport * as selectors from \"../../store/selectors\";\nimport roomSlice from \"../../store/Room/RoomSlice\";\nimport Room from \"../../models/Room\";\nimport {saveState, removeState} from \"../../store/crossSliceReducer\";\nimport uiSlice from \"../../store/UI/UISlice\";\nimport AdminPanel from \"../../components/Admin/AdminPanel/AdminPanel\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport { getSyncSettings } from \"../../store/UI/UISelectors\";\n\nconst mapStateToProps = (state: any) => {\n  const selectedRoom = selectors.getSelectedRoom(state);\n  const roomEquipment = selectors.getSelectedRoomEquipment(state);\n  const syncSettings = getSyncSettings(state);\n\n  return {\n    selectedRoom,\n    roomEquipment,\n    syncSettings,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onSettingsSaved: (settings: any) => {\n      dispatch(roomSlice.actions.changeRoomName({...settings.room}));\n      // [TODO] temporary solution, need to be changed when multiple room management will be added\n      dispatch(uiSlice.actions.setSelectedRoomId(settings.room.id));\n      dispatch(uiSlice.actions.setSyncSettings(settings.syncSettings));\n      dispatch(saveState());\n    },\n    onEquipmentToggleClick: (roomId: string, type: string) => {\n      console.log(\"onEquipmentToggleClick\");\n      dispatch(equipmentSlice.actions.toggleEquipment({roomId, type}));\n    },\n    onSettingsClear: () => {\n      dispatch(removeState());\n    }\n  };\n};\n\nconst Admin = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AdminPanel);\n\nexport default Admin;\n","import React from \"react\";\nimport AllocationInfo from \"../../Allocation/AllocationInfo/AllocationInfo\";\nimport AllocationInfoBig from \"../../Allocation/AllocationInfoBig/AllocationInfoBig\";\nimport AllocationMenu from \"../../Allocation/AllocationMenu/AllocationMenu\";\nimport RoomStatusBorder from \"../RoomStatusBorder/RoomStatusBorder\";\nimport StatusBar from \"../../StatusBar/StatusBar\";\nimport TimeView from \"../TimeView/TimeView\";\nimport \"./RoomView.scss\";\nimport Header from \"../../Header/Header\";\nimport Popup from \"../../UI/Popup/Popup\";\nimport Admin from \"../../../containers/Admin/Admin\";\n\nconst roomView = (props: any) => {\n  // console.log(\"roomView: \", props);\n  if (!props.room) {\n    console.error(\"[RoomView] No room provided!\");\n    return <Admin/>;\n  }\n\n  let currentAllocationTag;\n  let nextAllocationTag;\n\n  // [TODO] Overlapping events, if current event is overlapping next\n  if (props.currentAllocation) {\n    currentAllocationTag =\n    <AllocationInfoBig time={props.time}\n      {...props.currentAllocation}\n    />;\n  }\n\n  if (props.nextAllocation) {\n    nextAllocationTag = <AllocationInfo time={props.time} {...props.nextAllocation}/>;\n  }\n\n  return (\n    <div className=\"RoomView\">\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <Header time={props.time} {...props}/>\n      </RoomStatusBorder>\n      <div className=\"Content\">\n        <TimeView time={props.time} allocations={props.clockAllocations} />\n        <div className=\"Separator\"/>\n        <div className=\"RightSection\">\n          <div className=\"Allocations\">\n            {currentAllocationTag}\n            {nextAllocationTag}\n          </div>\n          <AllocationMenu\n            roomId={props.room.id}\n            time={props.time}\n            currentAllocation={props.currentAllocation}\n            nextAllocation={props.nextAllocation}\n            roomStatus={props.roomStatus}\n            onFinishEarlyClick={props.onFinishEarlyClick}\n            onExtendMeetingClick={props.onExtendMeetingClick}\n            onConfirmMeetingClick={props.onConfirmMeetingClick}\n            onAddMeetingClick={props.onAddMeetingClick}\n          />\n        </div>\n      </div>\n      <RoomStatusBorder roomStatus={props.roomStatus}>\n        <StatusBar room={props.room} onAdminClicked={props.onAdminClick}/>\n      </RoomStatusBorder>\n      <Popup open={props.adminPanelOpen} onCloseClick={props.onPopupCloseClick}>\n        <Admin></Admin>\n      </Popup>\n    </div>\n  );\n};\n\nexport default roomView;\n","import { connect } from \"react-redux\";\nimport RoomView from \"../../components/Room/RoomView/RoomView\";\nimport Allocation from \"../../models/Allocation\";\nimport { Equipment } from \"../../models/Equipment\";\nimport allocationSlice from \"../../store/Allocation/AllocationSlice\";\nimport equipmentSlice from \"../../store/Equipment/EquipmentSlice\";\nimport * as selectors from \"../../store/selectors\";\nimport { getDate, getAdminPanelOpen } from \"../../store/UI/UISelectors\";\nimport uiSlice from \"../../store/UI/UISlice\";\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  // console.log(\"mapState: \", state);\n  const time = getDate(state);\n  const adminPanelOpen = getAdminPanelOpen(state);\n  const room = selectors.getSelectedRoom(state);\n  const equipment = selectors.getSelectedRoomEquipment(state);\n\n  // 2 min\n  const roomStatus = selectors.getSelectedRoomStatus(120000)(state);\n\n  // [TODO] If there are more then two allocations it should be marked in allocationinfobig\n  const currentAllocation = selectors.getSelectedRoomCurrentAllocation(state);\n  const nextAllocation = selectors.getSelectedRoomNextAllocation(state);\n\n  // get allocations for next 10 hours\n  const clockMaxTime = time + 10 * 60 * 60 * 1000;\n  const clockMinTime = time - 1 * 60 * 60 * 1000;\n  const clockAllocations = selectors.getSelectedRoomAllocationsFromTo(clockMinTime, clockMaxTime)(state);\n\n  return {\n    currentAllocation,\n    equipment,\n    nextAllocation,\n    room,\n    roomStatus,\n    time,\n    adminPanelOpen,\n    clockAllocations,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAdminClick: () => {\n      dispatch(uiSlice.actions.showAdminPanel());\n    },\n    onPopupCloseClick: () => {\n      dispatch(uiSlice.actions.hideAdminPanel());\n    },\n    onAddMeetingClick: (roomId: string, time: number) => {\n      dispatch(allocationSlice.actions.addAllocation({\n        ...new Allocation(\"Ad hoc meeting\", roomId, time, time + 60 * 1000 * 30), confirmed: true}));\n    },\n    onChangeStatusClick: (e: Equipment) => {\n      dispatch(equipmentSlice.actions.changeStatus(e));\n      console.log(\"TODO change status. Ids need to be added to equipment\");\n    },\n    onConfirmMeetingClick: (id: string) => {\n      dispatch(allocationSlice.actions.confirmMeeting({id}));\n    },\n    onExtendMeetingClick: (id: string, time: number, amount: number) => {\n      dispatch(allocationSlice.actions.extendMeeting({id, time, amount}));\n    },\n    onFinishEarlyClick: (id: string, time: number) => {\n      dispatch(allocationSlice.actions.finishEarly(id, time));\n    },\n  };\n};\n\nconst SelectedRoom = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RoomView);\n\nexport default SelectedRoom;\n","import React, { Component } from \"react\";\n\nimport SelectedRoom from \"../SelectedRoom/SelectedRoom\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <SelectedRoom/>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Allocation from \"../models/Allocation\";\nimport Room from \"../models/Room\";\nimport store from \"./store\";\n\nimport { Equipment } from \"../models/Equipment\";\nimport { EquipmentStatus } from \"../models/EquipmentStatus\";\nimport { EquipmentType } from \"../models/EquipmentType\";\nimport allocationSlice from \"./Allocation/AllocationSlice\";\nimport equipmentSlice from \"./Equipment/EquipmentSlice\";\nimport roomSlice from \"./Room/RoomSlice\";\nimport {\n  getSelectedRoomAllocations, getSelectedRoomCurrentAllocations,\n  getSelectedRoomEquipment, getSelectedRoomNextAllocation, isSelectedRoomOccupied\n} from \"./selectors\";\nimport { getSelectedRoomId } from \"./UI/UISelectors\";\nimport uiSlice from \"./UI/UISlice\";\nimport { loadState, saveState } from \"./crossSliceReducer\";\nimport { roundEpochToMinutes } from \"../shared/utility\";\n\n///////////////////////////////////////////////////////////////\n// Starting init\n///////////////////////////////////////////////////////////////\nconst start = () => {\n  const startState = store.getState();\n  console.log(\"[Start] startState:\", startState);\n  store.dispatch(loadState());\n\n  // [TODO] once a day clean old entries\n  setInterval(() => {\n    console.log(\"[Start] Interval\");\n    // Set time to be alway 1 milliesecond after full minute\n    store.dispatch(uiSlice.actions.setTime(roundEpochToMinutes(Date.now()) + 1));\n    store.dispatch(saveState());\n  }, 60 * 1000);\n\n\n  // store.subscribe(() => {\n  //   console.log(store.getState());\n  // });\n\n  const initData = () => {\n    console.log('[Start] init data');\n    // const usedRoom = new Room(\"Supernova\");\n    // store.dispatch(roomSlice.actions.addRoom({...usedRoom}));\n    // store.dispatch(roomSlice.actions.addRoom({...new Room(\"Room 2\")}));\n\n    // store.dispatch(uiSlice.actions.setSelectedRoomId(usedRoom.id));\n\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1a\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1b\", usedRoom.id, Date.now() - 1200000, Date.now() - 1200000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Current 1c\", usedRoom.id, Date.now() - 120000 , Date.now() + 50000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation Next 1d\", usedRoom.id, Date.now() + 110000, Date.now() + 480000)}));\n    // // store.dispatch(allocationSlice.actions.addAllocation(\n    // //   {...new Allocation(\"Test allocation 1e\", usedRoom.id, Date.now() + 1000000, Date.now() + 1200000)}));\n\n    // store.dispatch(allocationSlice.actions.addAllocation(\n    //   {...new Allocation(\"Test allocation 2a\", \"Room 2\", Date.now() - 1200000, Date.now() - 1200000)}));\n\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Projector, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.Skype, EquipmentStatus.Available)}));\n    // store.dispatch(equipmentSlice.actions.addEquipment(\n    //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // // store.dispatch(equipmentSlice.actions.changeStatus(\n    // //   {...new Equipment(usedRoom.id, EquipmentType.WhiteBoard, EquipmentStatus.Available)}));\n\n    // const roomName1 = getSelectedRoomId(store.getState());\n    // const roomAllocations = getSelectedRoomAllocations(store.getState());\n    // const roomEquipment = getSelectedRoomEquipment(store.getState());\n\n    // const roomOccupied = isSelectedRoomOccupied(store.getState());\n    // const currentAllocation = getSelectedRoomCurrentAllocations(store.getState())[0];\n    // const nextAllocation = getSelectedRoomNextAllocation(store.getState());\n\n    // // const timeInterval = selectDateTime();\n    // // console.log('Time: ', selectDateTime(store.getState()));\n    // // console.log('Occupied2: ', roomOccupied2);\n    // // const roomOccupied2 = isSelectedRoomOccupied2(store.getState());\n    // console.log(\"Name: \", roomName1);\n    // console.log(\"Allocations: \", roomAllocations);\n    // console.log(\"Occupied: \", roomOccupied);\n    // console.log(\"Equipment: \", roomEquipment);\n    // console.log(\"Current allocation: \", currentAllocation);\n    // console.log(\"Next allocation: \", nextAllocation);\n  }\n};\n\nexport default start;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App/App\";\nimport \"./styles/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport start from \"./store/start\";\nimport store from \"./store/store\";\n\nstart();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}